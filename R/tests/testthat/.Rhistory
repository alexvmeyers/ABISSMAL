)
write.csv(sim_ts, file.path(tmp_path, "Temp", paste("Temp_Box_01_", gsub("-", "_", dates[i]), ".csv", sep = "")), row.names = FALSE)
}))
combine_raw_data_per_sensor(sensors = "Temp", path = path, data_dir = data_dir, out_dir = file.path(data_dir, "raw_combined"), tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
# Read in the output, check the output, then delete all files
test_res <- read.csv(file.path(tmp_path, "raw_combined", "combined_raw_data_Temp.csv"))
# Test that the results are the expected number of timestamps per date
expect_equal(nrow(test_res), length(event_ts) * length(dates))
# Test that all expected dates are in the combined file
expect_equal(unique(paste(test_res$year, test_res$month, test_res$day, sep = "_")), gsub("-", "_", dates))
tmp_path == file.path(path, data_dir)
# Remove the temporary directory and all files within it
if(tmp_path == file.path(path, data_dir)){
unlink(tmp_path, recursive = TRUE)
}
# Create a temporary directory for testing. Files will be written and read here
path <- "/home/gsvidaurre/Desktop"
data_dir <- "tmp_tests"
tmp_path <- file.path(path, data_dir)
if(!dir.exists(tmp_path)){
dir.create(tmp_path)
}
# Then create a folders for each sensor type inside this path
dir.create(file.path(tmp_path, "RFID"))
dir.create(file.path(tmp_path, "IRBB"))
dir.create(file.path(tmp_path, "Video"))
dir.create(file.path(tmp_path, "Temp"))
# Generate files of raw temperature data per unique date
dates <- c("2023-8-1", "2023-8-2", "2023-8-3")
# Generate files of raw temperature data per unique date
dates <- c("2023-8-1", "2023-8-2", "2023-8-3")
# Create a vector of RFID timestamps. Each file will have 4 timestamps
event_ts <- c(
"01:00:00",
"02:00:00",
"01:05:00",
"02:05:00"
)
# Write out a spreadsheet per date with these timestamps that will be used as input data for the function
invisible(lapply(1:length(dates), function(i){
sim_ts <- data.frame(timestamp_ms = event_ts) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(dates[i]),
month = month(dates[i]),
day = day(dates[i]),
sensor_id = "RFID",
PIT_tag_ID = "test"
)
write.csv(sim_ts, file.path(tmp_path, "RFID", paste("RFID_Box_01_", gsub("-", "_", dates[i]), ".csv", sep = "")), row.names = FALSE)
}))
# Create a vector of inner and outer beam breaker timestamps. Each file will have 8 timestamps (4 per beam breaker pair)
event_ts_o <- c(
"01:00:00",
"02:00:00",
"01:05:00",
"02:05:00"
)
event_ts_i <- c(
"01:00:02",
"02:00:02",
"01:05:02",
"02:05:02"
)
# Write out a spreadsheet per date with these timestamps that will be used as input data for the function
invisible(lapply(1:length(dates), function(i){
sim_ts <- data.frame(timestamp_ms = c(event_ts_o, event_ts_i)) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(dates[i]),
month = month(dates[i]),
day = day(dates[i]),
sensor_id = c(rep("Outer Beam Breaker", length(event_ts_o)), rep("Inner Beam Breaker", length(event_ts_i)))
)
write.csv(sim_ts, file.path(tmp_path, "IRBB", paste("IRBB_Box_01_", gsub("-", "_", dates[i]), ".csv", sep = "")), row.names = FALSE)
}))
# Create a vector of timestamps of video recording events. Each file will have 4 timestamps
event_ts <- c(
"01:00:00",
"02:00:00",
"01:05:00",
"02:05:00"
)
# Write out a spreadsheet per date with these timestamps that will be used as input data for the function. Each timestamp is repeated twice to account for a pre- and post-motion trigger video recording per timestamp
invisible(lapply(1:length(dates), function(i){
file_nms <- paste(paste(rep(paste(paste("Box_01", gsub("-", "_", dates[i]), sep = "_"), gsub(":", "_", event_ts), sep = "_"), each = 2), c("pre_trigger", "post_trigger"), sep = "_"), ".mp4", sep = "")
sim_ts <- data.frame(time_video_started = rep(event_ts, each = 2)) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(dates[i]),
month = month(dates[i]),
day = day(dates[i]),
sensor_id = "Camera",
video_file_name = file_nms,
total_pixels_motionTrigger = 100
)
write.csv(sim_ts, file.path(tmp_path, "Video", paste("Video_Box_01_", gsub("-", "_", dates[i]), ".csv", sep = "")), row.names = FALSE)
}))
# Create a vector of timestamps of temperature measurements taken each minute. Each file will have 4 timestamps
event_ts <- c(
"01:00:00",
"01:01:00",
"01:02:00",
"01:03:00"
)
# Write out a spreadsheet per date with these timestamps that will be used as input data for the function
invisible(lapply(1:length(dates), function(i){
sim_ts <- data.frame(time = event_ts) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(dates[i]),
month = month(dates[i]),
day = day(dates[i]),
sensor_id = "Temp",
degrees_Celsius = 23.9,
degrees_Farenheit = 75
)
write.csv(sim_ts, file.path(tmp_path, "Temp", paste("Temp_Box_01_", gsub("-", "_", dates[i]), ".csv", sep = "")), row.names = FALSE)
}))
combine_raw_data_per_sensor(sensors = c("RFID", "IRBB", "Video", "Temp"), path = path, data_dir = data_dir, out_dir = file.path(data_dir, "raw_combined"), tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
tmp_path == file.path(path, data_dir)
# Remove the temporary directory and all files within it
if(tmp_path == file.path(path, data_dir)){
unlink(tmp_path, recursive = TRUE)
}
# Create a temporary directory for testing. Files will be written and read here
path <- "/home/gsvidaurre/Desktop"
data_dir <- "tmp_tests"
tmp_path <- file.path(path, data_dir)
if(!dir.exists(tmp_path)){
dir.create(tmp_path)
}
# Then create a folders for each sensor type inside this path
sensrs <- c("RFID", "IRBB", "Video", "Temp")
invisible(lapply(1:length(sensrs), function(i){
dir.create(file.path(tmp_path, sensrs[i]))
}))
# Generate files of raw temperature data per unique date
dates <- c("2023-8-1", "2023-8-2", "2023-8-3")
# Create a vector of RFID timestamps. Each file will have 4 timestamps
event_ts <- c(
"01:00:00",
"02:00:00",
"01:05:00",
"02:05:00"
)
# Write out a spreadsheet per date with these timestamps that will be used as input data for the function
invisible(lapply(1:length(dates), function(i){
sim_ts <- data.frame(timestamp_ms = event_ts) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(dates[i]),
month = month(dates[i]),
day = day(dates[i]),
sensor_id = "RFID",
PIT_tag_ID = "test"
)
write.csv(sim_ts, file.path(tmp_path, "RFID", paste("RFID_Box_01_", gsub("-", "_", dates[i]), ".csv", sep = "")), row.names = FALSE)
}))
# Create a vector of inner and outer beam breaker timestamps. Each file will have 8 timestamps (4 per beam breaker pair)
event_ts_o <- c(
"01:00:00",
"02:00:00",
"01:05:00",
"02:05:00"
)
event_ts_i <- c(
"01:00:02",
"02:00:02",
"01:05:02",
"02:05:02"
)
# Write out a spreadsheet per date with these timestamps that will be used as input data for the function
invisible(lapply(1:length(dates), function(i){
sim_ts <- data.frame(timestamp_ms = c(event_ts_o, event_ts_i)) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(dates[i]),
month = month(dates[i]),
day = day(dates[i]),
sensor_id = c(rep("Outer Beam Breaker", length(event_ts_o)), rep("Inner Beam Breaker", length(event_ts_i)))
)
write.csv(sim_ts, file.path(tmp_path, "IRBB", paste("IRBB_Box_01_", gsub("-", "_", dates[i]), ".csv", sep = "")), row.names = FALSE)
}))
# Create a vector of timestamps of video recording events. Each file will have 4 timestamps
event_ts <- c(
"01:00:00",
"02:00:00",
"01:05:00",
"02:05:00"
)
# Write out a spreadsheet per date with these timestamps that will be used as input data for the function. Each timestamp is repeated twice to account for a pre- and post-motion trigger video recording per timestamp
invisible(lapply(1:length(dates), function(i){
file_nms <- paste(paste(rep(paste(paste("Box_01", gsub("-", "_", dates[i]), sep = "_"), gsub(":", "_", event_ts), sep = "_"), each = 2), c("pre_trigger", "post_trigger"), sep = "_"), ".mp4", sep = "")
sim_ts <- data.frame(time_video_started = rep(event_ts, each = 2)) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(dates[i]),
month = month(dates[i]),
day = day(dates[i]),
sensor_id = "Camera",
video_file_name = file_nms,
total_pixels_motionTrigger = 100
)
write.csv(sim_ts, file.path(tmp_path, "Video", paste("Video_Box_01_", gsub("-", "_", dates[i]), ".csv", sep = "")), row.names = FALSE)
}))
# Create a vector of timestamps of temperature measurements taken each minute. Each file will have 4 timestamps
event_ts <- c(
"01:00:00",
"01:01:00",
"01:02:00",
"01:03:00"
)
# Write out a spreadsheet per date with these timestamps that will be used as input data for the function
invisible(lapply(1:length(dates), function(i){
sim_ts <- data.frame(time = event_ts) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(dates[i]),
month = month(dates[i]),
day = day(dates[i]),
sensor_id = "Temp",
degrees_Celsius = 23.9,
degrees_Farenheit = 75
)
write.csv(sim_ts, file.path(tmp_path, "Temp", paste("Temp_Box_01_", gsub("-", "_", dates[i]), ".csv", sep = "")), row.names = FALSE)
}))
combine_raw_data_per_sensor(sensors = sensrs, path = path, data_dir = data_dir, out_dir = file.path(data_dir, "raw_combined"), tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
paste("combined_raw_data_", sensrs[i], ".csv", sep = "")
# Remove the temporary directory and all files within it
if(tmp_path == file.path(path, data_dir)){
unlink(tmp_path, recursive = TRUE)
}
# Create a temporary directory for testing. Files will be written and read here
path <- "/home/gsvidaurre/Desktop"
data_dir <- "tmp_tests"
tmp_path <- file.path(path, data_dir)
if(!dir.exists(tmp_path)){
dir.create(tmp_path)
}
# Then create a folders for each sensor type inside this path
sensrs <- c("RFID", "IRBB", "Video", "Temp")
invisible(lapply(1:length(sensrs), function(i){
dir.create(file.path(tmp_path, sensrs[i]))
}))
# Generate files of raw temperature data per unique date
dates <- c("2023-8-1", "2023-8-2", "2023-8-3")
# Create a vector of RFID timestamps. Each file will have 4 timestamps
rfid_event_ts <- c(
"01:00:00",
"02:00:00",
"01:05:00",
"02:05:00"
)
# Write out a spreadsheet per date with these timestamps that will be used as input data for the function
invisible(lapply(1:length(dates), function(i){
sim_ts <- data.frame(timestamp_ms = rfid_event_ts) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(dates[i]),
month = month(dates[i]),
day = day(dates[i]),
sensor_id = "RFID",
PIT_tag_ID = "test"
)
write.csv(sim_ts, file.path(tmp_path, "RFID", paste("RFID_Box_01_", gsub("-", "_", dates[i]), ".csv", sep = "")), row.names = FALSE)
}))
# Create a vector of inner and outer beam breaker timestamps. Each file will have 8 timestamps (4 per beam breaker pair)
event_ts_o <- c(
"01:00:00",
"02:00:00",
"01:05:00",
"02:05:00"
)
event_ts_i <- c(
"01:00:02",
"02:00:02",
"01:05:02",
"02:05:02"
)
# Write out a spreadsheet per date with these timestamps that will be used as input data for the function
invisible(lapply(1:length(dates), function(i){
sim_ts <- data.frame(timestamp_ms = c(event_ts_o, event_ts_i)) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(dates[i]),
month = month(dates[i]),
day = day(dates[i]),
sensor_id = c(rep("Outer Beam Breaker", length(event_ts_o)), rep("Inner Beam Breaker", length(event_ts_i)))
)
write.csv(sim_ts, file.path(tmp_path, "IRBB", paste("IRBB_Box_01_", gsub("-", "_", dates[i]), ".csv", sep = "")), row.names = FALSE)
}))
# Create a vector of timestamps of video recording events. Each file will have 4 timestamps
video_event_ts <- c(
"01:00:00",
"02:00:00",
"01:05:00",
"02:05:00"
)
# Write out a spreadsheet per date with these timestamps that will be used as input data for the function. Each timestamp is repeated twice to account for a pre- and post-motion trigger video recording per timestamp
invisible(lapply(1:length(dates), function(i){
file_nms <- paste(paste(rep(paste(paste("Box_01", gsub("-", "_", dates[i]), sep = "_"), gsub(":", "_", video_event_ts), sep = "_"), each = 2), c("pre_trigger", "post_trigger"), sep = "_"), ".mp4", sep = "")
sim_ts <- data.frame(time_video_started = rep(video_event_ts, each = 2)) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(dates[i]),
month = month(dates[i]),
day = day(dates[i]),
sensor_id = "Camera",
video_file_name = file_nms,
total_pixels_motionTrigger = 100
)
write.csv(sim_ts, file.path(tmp_path, "Video", paste("Video_Box_01_", gsub("-", "_", dates[i]), ".csv", sep = "")), row.names = FALSE)
}))
# Create a vector of timestamps of temperature measurements taken each minute. Each file will have 4 timestamps
temp_event_ts <- c(
"01:00:00",
"01:01:00",
"01:02:00",
"01:03:00"
)
# Write out a spreadsheet per date with these timestamps that will be used as input data for the function
invisible(lapply(1:length(dates), function(i){
sim_ts <- data.frame(time = temp_event_ts) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(dates[i]),
month = month(dates[i]),
day = day(dates[i]),
sensor_id = "Temp",
degrees_Celsius = 23.9,
degrees_Farenheit = 75
)
write.csv(sim_ts, file.path(tmp_path, "Temp", paste("Temp_Box_01_", gsub("-", "_", dates[i]), ".csv", sep = "")), row.names = FALSE)
}))
combine_raw_data_per_sensor(sensors = sensrs, path = path, data_dir = data_dir, out_dir = file.path(data_dir, "raw_combined"), tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
# For each sensor type, read in and check the output before deleting temporary files
i <- 1
# For each sensor type, read in and check the output before deleting temporary files
# i <- 1
invisible(lapply(1:length(sensrs), function(i){
test_res <- read.csv(file.path(tmp_path, "raw_combined", paste("combined_raw_data_", sensrs[i], ".csv", sep = "")))
# Test that the results are the expected number of timestamps per date
if(sensrs[i] == "RFID"){
expect_equal(nrow(test_res), length(rfid_event_ts) * length(dates))
}  else if(sensrs[i] == "IRBB"){
expect_equal(nrow(test_res), (length(event_ts_o) + length(event_ts_i)) * length(dates))
} else if(sensrs[i] == "Video"){
expect_equal(nrow(test_res), (length(video_event_ts) * 2) * length(dates))
} else if(sensrs[i] == "Temp"){
expect_equal(nrow(test_res), length(temp_event_ts) * length(dates))
}
# Test that all expected dates are in the combined file
expect_equal(unique(paste(test_res$year, test_res$month, test_res$day, sep = "_")), gsub("-", "_", dates))
}))
tmp_path == file.path(path, data_dir)
# Remove the temporary directory and all files within it
if(tmp_path == file.path(path, data_dir)){
unlink(tmp_path, recursive = TRUE)
}
# Create 4 clusters of detections: each cluster consists of 10 detections spaced 0.5 seconds apart
starts <- as.POSIXct(c(
"2023-01-01 01:00:00 EST",
"2023-01-01 02:00:00 EST",
"2023-01-01 01:05:00 EST",
"2023-01-01 02:05:00 EST"
))
ends <- starts + 1
event_ts <- seq(starts, ends, 0.5)
# Create 4 clusters of detections: each cluster consists of 10 detections spaced 0.5 seconds apart
starts <- as.POSIXct(c(
"2023-01-01 01:00:00 EST",
"2023-01-01 02:00:00 EST",
"2023-01-01 01:05:00 EST",
"2023-01-01 02:05:00 EST"
))
ends <- starts + 1
ends <- starts + 10
event_ts <- seq(starts, ends, 0.5)
event_ts
event_ts <- seq(starts[1], ends[1], 0.5)
event_ts
ends <- starts + 9
event_ts <- seq(starts[1], ends[1], 0.5)
event_ts
ends <- starts + 10
event_ts <- seq(starts[1], ends[1], 0.5)
event_ts
event_ts <- sapply(1:length(starts), function(x){
seq(starts[x], ends[x], 0.5)
})
event_ts
event_ts <- sapply(1:length(starts), function(x){
seq(starts[x], ends[x], 0.5)
}, simplify = FALSE)
event_ts
event_ts <- unlist(sapply(1:length(starts), function(x){
seq(starts[x], ends[x], 0.5)
}, simplify = FALSE))
event_ts
event_ts <- unlist(sapply(1:length(starts), function(x){
seq(starts[x], ends[x], 0.5)
}))
event_ts
event_ts <- sapply(1:length(starts), function(x){
seq(starts[x], ends[x], 0.5)
}, simplify = FALSE)
unlist(event_ts)
event_ts <- sapply(1:length(starts), function(x){
seq(starts[x], ends[x], 0.5)
}, simplify = FALSE)
event_ts
unlist(event_ts[[1]])
unlist(event_ts)
event_ts <- sapply(1:length(starts), function(x){
return(seq(starts[x], ends[x], 0.5))
}, simplify = FALSE)
event_ts
unlist(event_ts)
# Write out a spreadsheet with these timestamps that will be used as input data for the function
sim_ts <- data.frame(timestamp_ms = c(event_ts[[1]], event_ts[[2]], event_ts[[3]], event_ts[[4]])) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(timestamp_ms),
month = month(timestamp_ms),
day = day(timestamp_ms),
original_timestamp = gsub(" EST", "" , gsub("2023-01-01 ", "", timestamp_ms)),
sensor_id = "RFID",
PIT_tag_ID = "test"
)
sim_ts
# Write out a spreadsheet with these timestamps that will be used as input data for the function
sim_ts <- data.frame(timestamp_ms = c(event_ts[[1]], event_ts[[2]], event_ts[[3]], event_ts[[4]])) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(timestamp_ms),
month = month(timestamp_ms),
day = day(timestamp_ms),
original_timestamp = gsub(" EST", "" , gsub("2023-01-01 ", "", timestamp_ms)),
sensor_id = "RFID",
PIT_tag_ID = "test"
)
write.csv(sim_ts, file.path(tmp_path, "combined_raw_data_RFID.csv"), row.names = FALSE)
tmp_path
# Create a temporary directory for testing. Files will be written and read here
path <- "/home/gsvidaurre/Desktop"
data_dir <- "tmp_tests"
tmp_path <- file.path(path, data_dir)
if(!dir.exists(tmp_path)){
dir.create(tmp_path)
}
# Create 4 clusters of detections: each cluster consists of 21 detections spaced 0.5 seconds apart
starts <- as.POSIXct(c(
"2023-01-01 01:00:00 EST",
"2023-01-01 02:00:00 EST",
"2023-01-01 01:05:00 EST",
"2023-01-01 02:05:00 EST"
))
ends <- starts + 10
event_ts <- sapply(1:length(starts), function(x){
return(seq(starts[x], ends[x], 0.5))
}, simplify = FALSE)
# Write out a spreadsheet with these timestamps that will be used as input data for the function
sim_ts <- data.frame(timestamp_ms = c(event_ts[[1]], event_ts[[2]], event_ts[[3]], event_ts[[4]])) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(timestamp_ms),
month = month(timestamp_ms),
day = day(timestamp_ms),
original_timestamp = gsub(" EST", "" , gsub("2023-01-01 ", "", timestamp_ms)),
sensor_id = "RFID",
PIT_tag_ID = "test"
)
write.csv(sim_ts, file.path(tmp_path, "combined_raw_data_RFID.csv"), row.names = FALSE)
Sys.Date()
preprocess_detections(sensor = "RFID", timestamps_col = "timestamps_ms", group_col_nm = "PIT_tag_ID", pixel_col_nm = NULL, thin_threshold = NULL, pixel_threshold = NULL, path = path, data_dir = file.path(data_dir, "raw_combined"), out_dir = "processed", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
preprocess_detections <- source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/preprocess_detections.R", print = FALSE)$value
preprocess_detections(sensor = "RFID", timestamps_col = "timestamps_ms", group_col_nm = "PIT_tag_ID", pixel_col_nm = NULL, thin_threshold = NULL, pixel_threshold = NULL, path = path, data_dir = file.path(data_dir, "raw_combined"), out_dir = "processed", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
path
file.path(data_dir, "raw_combined")
preprocess_detections(sensor = "RFID", timestamps_col = "timestamps_ms", group_col_nm = "PIT_tag_ID", pixel_col_nm = NULL, thin_threshold = 1, pixel_threshold = NULL, path = path, data_dir = file.path(data_dir, "raw_combined"), out_dir = "processed", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
# Create the input data directory that the function expects
dir.create(file.path(tmp_path, "raw_combined"))
# Create 4 clusters of detections: each cluster consists of 21 detections spaced 0.5 seconds apart
starts <- as.POSIXct(c(
"2023-01-01 01:00:00 EST",
"2023-01-01 02:00:00 EST",
"2023-01-01 01:05:00 EST",
"2023-01-01 02:05:00 EST"
))
ends <- starts + 10
event_ts <- sapply(1:length(starts), function(x){
return(seq(starts[x], ends[x], 0.5))
}, simplify = FALSE)
# Write out a spreadsheet with these timestamps that will be used as input data for the function
sim_ts <- data.frame(timestamp_ms = c(event_ts[[1]], event_ts[[2]], event_ts[[3]], event_ts[[4]])) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(timestamp_ms),
month = month(timestamp_ms),
day = day(timestamp_ms),
original_timestamp = gsub(" EST", "" , gsub("2023-01-01 ", "", timestamp_ms)),
sensor_id = "RFID",
data_type = "RFID",
data_stage = "raw_combined",
date_combined = Sys.Date(),
PIT_tag_ID = "test"
)
write.csv(sim_ts, file.path(tmp_path, "raw_combined", "combined_raw_data_RFID.csv"), row.names = FALSE)
preprocess_detections(sensor = "RFID", timestamps_col = "timestamps_ms", group_col_nm = "PIT_tag_ID", pixel_col_nm = NULL, thin_threshold = 1, pixel_threshold = NULL, path = path, data_dir = file.path(data_dir, "raw_combined"), out_dir = "processed", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
preprocess_detections(sensor = "RFID", timestamps_col = "timestamp_ms", group_col_nm = "PIT_tag_ID", pixel_col_nm = NULL, thin_threshold = 1, pixel_threshold = NULL, path = path, data_dir = file.path(data_dir, "raw_combined"), out_dir = "processed", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
preprocess_detections(sensor = "RFID", timestamps_col = "timestamp_ms", group_col_nm = "PIT_tag_ID", pixel_col_nm = NULL, thin_threshold = 1, pixel_threshold = NULL, path = path, data_dir = file.path(data_dir, "raw_combined"), out_dir = file.path(data_dir, "processed"), tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
