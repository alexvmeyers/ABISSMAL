score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = NULL, PIT_tag_col = NULL, rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = FALSE, perching_dataset = NULL, perching_prefix = NULL, path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
sim_dats <- read.csv(file.path(path, data_dir, "simulated_detectionClusters.csv"))
glimpse(sim_dats)
score_detectionClusters <- source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")$value
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/utilities.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = NULL, PIT_tag_col = NULL, rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = FALSE, perching_dataset = NULL, perching_prefix = NULL, path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
score_detectionClusters <- source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")$value
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/utilities.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = NULL, PIT_tag_col = NULL, rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = FALSE, perching_dataset = NULL, perching_prefix = NULL, path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = NULL, PIT_tag_col = NULL, rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = FALSE, perching_dataset = NULL, perching_prefix = NULL, path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = NULL, PIT_tag_col = NULL, rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = FALSE, perching_dataset = NULL, perching_prefix = NULL, path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = NULL, PIT_tag_col = NULL, rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = FALSE, perching_dataset = NULL, perching_prefix = NULL, path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = NULL, PIT_tag_col = NULL, rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = FALSE, perching_dataset = NULL, perching_prefix = NULL, path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = NULL, PIT_tag_col = NULL, rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = FALSE, perching_dataset = NULL, perching_prefix = NULL, path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = NULL, PIT_tag_col = NULL, rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = FALSE, perching_dataset = NULL, perching_prefix = NULL, path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = NULL, PIT_tag_col = NULL, rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = FALSE, perching_dataset = NULL, perching_prefix = NULL, path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = NULL, PIT_tag_col = NULL, rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = FALSE, perching_dataset = NULL, perching_prefix = NULL, path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
rfid_label
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = NULL, PIT_tag_col = NULL, rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = FALSE, perching_dataset = NULL, perching_prefix = NULL, path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = NULL, PIT_tag_col = NULL, rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = FALSE, perching_dataset = NULL, perching_prefix = NULL, path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = NULL, PIT_tag_col = NULL, rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = FALSE, perching_dataset = NULL, perching_prefix = NULL, path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = NULL, PIT_tag_col = NULL, rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = FALSE, perching_dataset = NULL, perching_prefix = NULL, path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = NULL, PIT_tag_col = NULL, rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = FALSE, perching_dataset = NULL, perching_prefix = NULL, path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = NULL, PIT_tag_col = NULL, rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = FALSE, perching_dataset = NULL, perching_prefix = NULL, path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
# Read in the output, check the output, then delete all files
test_res <- read.csv(file.path(tmp_path, "scored_detectionClusters.csv"))
glimpse(test_res)
# Test that the results are 3 entrance events and 3 exit events, in that order
event_labels <- sapply(1:nrow(test_res), function(i){
wh <- which(!is.na(test_res[i, grep("direction", names(test_res))]))
test_res[i, grep("direction", names(test_res))][[wh]]
})
event_labels
# Test that the results are 3 entrance events and 3 exit events, in that order
event_labels <- sapply(1:nrow(test_res), function(i){
wh <- which(!is.na(test_res[i, grep("direction", names(test_res))]))
test_res[i, grep("direction", names(test_res))][[wh]]
})
expect_equal(event_labels, rep(c("entrance", "exit"), each = 3))
# Test that the number of detection clusters in the input and output data are the same
expect_equal(nrow(sim_dats), nrow(test_res))
# Test that order of sensor labels in the first edge is correct
sensor_seq <- sapply(1:nrow(test_res), function(i){
paste(unique(strsplit(sim_dats$event_seq[i], split = "; ")[[1]])[1:2], collapse = " - ")
})
sensor_seq
# Test that order of sensor labels in the first edge is correct
sensor_seq <- sapply(1:nrow(test_res), function(i){
paste(unique(strsplit(sim_dats$event_seq[i], split = "; ")[[1]])[1:2], collapse = " - ")
})
invisible(lapply(1:nrow(test_res), function(i){
expect_equal(test_res$Edge_1[i], sensor_seq[i])
}))
tmp_path == file.path(path, data_dir)
# Remove the temporary directory and all files within it
if(tmp_path == file.path(path, data_dir)){
unlink(tmp_path, recursive = TRUE)
}
# Create a temporary directory for testing. Files will be written and read here
path <- "/home/gsvidaurre/Desktop"
data_dir <- "tmp_tests"
tmp_path <- file.path(path, data_dir)
if(!dir.exists(tmp_path)){
dir.create(tmp_path)
}
tmp_path
# Create a temporary directory for testing. Files will be written and read here
path <- "/home/gsvidaurre/Desktop"
data_dir <- "tmp_tests"
tmp_path <- file.path(path, data_dir)
if(!dir.exists(tmp_path)){
dir.create(tmp_path)
}
# Create 3 entrance and 3 exit events using different combinations of the 2 pairs of beam breakers. Each event is a detection cluster of a given duration (see ends below)
starts <- as.POSIXct(c(
"2023-01-01 01:00:00 EST"
)) + seq(1, 300, 50)
ends <- starts + rep(c(5, 10, 15), 2)
# Create a spreadsheet of the simulated directional movement events
sim_dats <- data.frame(start = starts) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(start),
month = month(start),
day = day(start),
end = ends,
event_seq = c(
paste(c(rep("Outer Beam Breaker", 2), rep("Inner Beam Breaker", 2)), collapse = "; "), # entrance
paste(c(rep("Outer Beam Breaker", 4), rep("Inner Beam Breaker", 2)), collapse = "; "), # no directionality
paste(c(rep("Outer Beam Breaker", 4), rep("Inner Beam Breaker", 5)), collapse = "; "), # entrance
paste(c(rep("Inner Beam Breaker", 2), rep("Outer Beam Breaker", 2)), collapse = "; "), # exit
paste(c(rep("Inner Beam Breaker", 5), rep("Outer Beam Breaker", 2)), collapse = "; "), # exit
paste(c(rep("Inner Beam Breaker", 1), rep("Outer Beam Breaker", 4)), collapse = "; ") # exit
),
indiv1_id = "test",
indiv2_id = NA,
# Matches the number of RFID detections if present above
total_indiv1_detections = c(NA, 2, 3, NA, 2, 4),
total_indiv2_detections = 0,
individual_initiated = "test",
individual_ended = "test",
threshold_seconds = 1,
run_length = 1,
data_stage = "pre-processing",
date_pre_processed = Sys.Date()
)
write.csv(sim_dats, file.path(tmp_path, "simulated_detectionClusters.csv"), row.names = FALSE)
starts_p <- starts[c(1:2, 5)]
ends_p <- starts_p + c(25, 50, 100)
starts_p
ends_p
sim_perch <- data.frame(perching_start = starts_p) %>%
dplyr::mutate(
chamber_id = "Box_01",
sensor_id = "RFID",
PIT_tag_id = "test",
perching_end = ends_p,
perching_duration_s = perching_end - perching_start,
unique_perching_event = seq(1, nrow(.), 1),
threshold = 1,
min_perching_run_length = 3,
data_stage = "pre-processing",
date_pre_processed = Sys.Date()
)
glimpse(sim_perch)
write.csv(sim_perch, file.path(tmp_path, "simulated_perching_events_RFID.csv"), row.names = FALSE)
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = "sensor_id", PIT_tag_col = "PIT_tag_ID", rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = TRUE, perching_dataset = "RFID", perching_prefix = "simulated_perching_events_", path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = "sensor_id", PIT_tag_col = "PIT_tag_ID", rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = TRUE, perching_dataset = "RFID", perching_prefix = "simulated_perching_events_", path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = "sensor_id", PIT_tag_col = "PIT_tag_ID", rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = TRUE, perching_dataset = "RFID", perching_prefix = "simulated_perching_events_", path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = "sensor_id", PIT_tag_col = "PIT_tag_ID", rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = TRUE, perching_dataset = "RFID", perching_prefix = "simulated_perching_events_", path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = "sensor_id", PIT_tag_col = "PIT_tag_ID", rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = TRUE, perching_dataset = "RFID", perching_prefix = "simulated_perching_events_", path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = "sensor_id", PIT_tag_col = "PIT_tag_ID", rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = TRUE, perching_dataset = "RFID", perching_prefix = "simulated_perching_events_", path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
glimpse(sim_perch)
write.csv(sim_perch, file.path(tmp_path, "simulated_perching_events_RFID.csv"), row.names = FALSE)
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = "sensor_id", PIT_tag_col = "PIT_tag_ID", rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = TRUE, perching_dataset = "RFID", perching_prefix = "simulated_perching_events_", path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
glimpse(sim_perch)
sim_perch <- data.frame(perching_start = starts_p) %>%
dplyr::mutate(
chamber_id = "Box_01",
sensor_id = "RFID",
PIT_tag_ID = "test",
perching_end = ends_p,
perching_duration_s = perching_end - perching_start,
unique_perching_event = seq(1, nrow(.), 1),
threshold = 1,
min_perching_run_length = 3,
data_stage = "pre-processing",
date_pre_processed = Sys.Date()
)
glimpse(sim_perch)
write.csv(sim_perch, file.path(tmp_path, "simulated_perching_events_RFID.csv"), row.names = FALSE)
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = "sensor_id", PIT_tag_col = "PIT_tag_ID", rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = TRUE, perching_dataset = "RFID", perching_prefix = "simulated_perching_events_", path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
# Read in the output, check the output, then delete all files
test_res <- read.csv(file.path(tmp_path, "scored_detectionClusters.csv"))
glimpse(test_res)
# Test that the results are 3 entrance events and 3 exit events, in that order
event_labels <- sapply(1:nrow(test_res), function(i){
wh <- which(!is.na(test_res[i, grep("direction", names(test_res))]))
test_res[i, grep("direction", names(test_res))][[wh]]
})
expect_equal(event_labels, rep(c("entrance", "exit"), each = 3))
# Test that the number of detection clusters in the input and output data are the same
expect_equal(nrow(sim_dats), nrow(test_res))
# Test that order of sensor labels in the first edge is correct
sensor_seq <- sapply(1:nrow(test_res), function(i){
paste(unique(strsplit(sim_dats$event_seq[i], split = "; ")[[1]])[1:2], collapse = " - ")
})
invisible(lapply(1:nrow(test_res), function(i){
expect_equal(test_res$Edge_1[i], sensor_seq[i])
}))
?expect
# Test that the correct entrance and/or exit movements were assigned to perching events
i <- 1
test_res$start[i]
starts_p
test_res$start[i] %in% starts_p
sapply(test_res[i, ], is.na, c("perching_start")
)
test_res[i, grep("perch", names(test_res))]
sapply(test_res[i, grep("perch", names(test_res))], is.na)
expect_true(!sapply(test_res[i, grep("perch", names(test_res))], is.na))
expect_true(all(!sapply(test_res[i, grep("perch", names(test_res))], is.na)))
# Test that the correct entrance and/or exit movements were assigned to perching events
i <- 2
expect_false(all(!sapply(test_res[i, grep("perch", names(test_res))], is.na)))
# Test that the correct entrance and/or exit movements were assigned to perching events
i <- 3
expect_false(all(!sapply(test_res[i, grep("perch", names(test_res))], is.na)))
# Test that the correct entrance and/or exit movements were assigned to perching events
invisible(lapply(1:nrow(test_res), function(i){
if(test_res$start[i] %in% starts_p){
expect_true(all(!sapply(test_res[i, grep("perch", names(test_res))], is.na)))
} else {
expect_false(all(!sapply(test_res[i, grep("perch", names(test_res))], is.na)))
}
}))
# Test that the correct entrance and/or exit movements were assigned to perching events
invisible(lapply(1:nrow(test_res), function(i){
cat("i = ", i, "\n")
if(test_res$start[i] %in% starts_p){
expect_true(all(!sapply(test_res[i, grep("perch", names(test_res))], is.na)))
} else {
expect_false(all(!sapply(test_res[i, grep("perch", names(test_res))], is.na)))
}
}))
# Test that the correct entrance and/or exit movements were assigned to perching events
i <- 6
test_res$start[i] %in% starts_p
expect_false(all(!sapply(test_res[i, grep("perch", names(test_res))], is.na)))
test_res[i, grep("perch", names(test_res))]
View(test_res)
starts_p <- starts[c(1:2, 5)]
ends_p <- starts_p + c(25, 50, 10)
sim_perch <- data.frame(perching_start = starts_p) %>%
dplyr::mutate(
chamber_id = "Box_01",
sensor_id = "RFID",
PIT_tag_ID = "test",
perching_end = ends_p,
perching_duration_s = perching_end - perching_start,
unique_perching_event = seq(1, nrow(.), 1),
threshold = 1,
min_perching_run_length = 3,
data_stage = "pre-processing",
date_pre_processed = Sys.Date()
)
glimpse(sim_perch)
write.csv(sim_perch, file.path(tmp_path, "simulated_perching_events_RFID.csv"), row.names = FALSE)
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = "sensor_id", PIT_tag_col = "PIT_tag_ID", rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = TRUE, perching_dataset = "RFID", perching_prefix = "simulated_perching_events_", path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
# Read in the output, check the output, then delete all files
test_res <- read.csv(file.path(tmp_path, "scored_detectionClusters.csv"))
glimpse(test_res)
# Test that the results are 3 entrance events and 3 exit events, in that order
event_labels <- sapply(1:nrow(test_res), function(i){
wh <- which(!is.na(test_res[i, grep("direction", names(test_res))]))
test_res[i, grep("direction", names(test_res))][[wh]]
})
expect_equal(event_labels, rep(c("entrance", "exit"), each = 3))
# Test that the number of detection clusters in the input and output data are the same
expect_equal(nrow(sim_dats), nrow(test_res))
# Test that order of sensor labels in the first edge is correct
sensor_seq <- sapply(1:nrow(test_res), function(i){
paste(unique(strsplit(sim_dats$event_seq[i], split = "; ")[[1]])[1:2], collapse = " - ")
})
invisible(lapply(1:nrow(test_res), function(i){
expect_equal(test_res$Edge_1[i], sensor_seq[i])
}))
# Test that the correct entrance and/or exit movements were assigned to perching events
# i <- 6
# View(test_res)
invisible(lapply(1:nrow(test_res), function(i){
# cat("i = ", i, "\n")
if(test_res$start[i] %in% starts_p){
expect_true(all(!sapply(test_res[i, grep("perch", names(test_res))], is.na)))
} else {
expect_false(all(!sapply(test_res[i, grep("perch", names(test_res))], is.na)))
}
}))
tmp_path == file.path(path, data_dir)
# Remove the temporary directory and all files within it
if(tmp_path == file.path(path, data_dir)){
unlink(tmp_path, recursive = TRUE)
}
# Create a temporary directory for testing. Files will be written and read here
path <- "/home/gsvidaurre/Desktop"
data_dir <- "tmp_tests"
tmp_path <- file.path(path, data_dir)
if(!dir.exists(tmp_path)){
dir.create(tmp_path)
}
# Create 3 entrance and 3 exit events using different combinations of the RFID and 2 pairs of beam breakers. Each event is a detection cluster of a given duration (see ends below)
starts <- as.POSIXct(c(
"2023-01-01 01:00:00 EST"
)) + seq(1, 300, 50)
ends <- starts + rep(c(5, 10, 15), 2)
# Create a spreadsheet of the simulated directional movement events
sim_dats <- data.frame(start = starts) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(start),
month = month(start),
day = day(start),
end = ends,
event_seq = c(
paste(c(rep("Outer Beam Breaker", 2), rep("Inner Beam Breaker", 2)), collapse = "; "), # entrance
paste(c(rep("RFID", 2), rep("Inner Beam Breaker", 1)), collapse = "; "), # entrance
paste(c(rep("Outer Beam Breaker", 3), rep("RFID", 2)), collapse = "; "), # entrance
paste(c(rep("Inner Beam Breaker", 2), rep("Outer Beam Breaker", 2)), collapse = "; "), # exit
paste(c(rep("Inner Beam Breaker", 5), rep("RFID", 2)), collapse = "; "), # exit
paste(c(rep("RFID", 2), rep("Outer Beam Breaker", 4)), collapse = "; ") # exit
),
indiv1_id = "test",
indiv2_id = NA,
# Matches the number of RFID detections if present above
total_indiv1_detections = c(NA, 2, 3, NA, 2, 4),
total_indiv2_detections = 0,
individual_initiated = "test",
individual_ended = "test",
threshold_seconds = 1,
run_length = 1,
data_stage = "pre-processing",
date_pre_processed = Sys.Date()
)
write.csv(sim_dats, file.path(tmp_path, "simulated_detectionClusters.csv"), row.names = FALSE)
# Create a dataset of 3 simulated perching events that encompass 2 entrances and 1 exit above
starts_p <- starts[c(1:2, 5)]
ends_p <- starts_p + c(25, 50, 10)
sim_perch <- data.frame(perching_start = starts_p) %>%
dplyr::mutate(
chamber_id = "Box_01",
sensor_id = "RFID",
PIT_tag_ID = "test",
perching_end = ends_p,
perching_duration_s = perching_end - perching_start,
unique_perching_event = seq(1, nrow(.), 1),
threshold = 1,
min_perching_run_length = 3,
data_stage = "pre-processing",
date_pre_processed = Sys.Date()
)
write.csv(sim_perch, file.path(tmp_path, "simulated_perching_events_RFID.csv"), row.names = FALSE)
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = NULL, PIT_tag_col = NULL, rfid_label = "RFID", camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = TRUE, perching_dataset = "RFID", perching_prefix = "simulated_perching_events_", path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = NULL, PIT_tag_col = NULL, rfid_label = "RFID", camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = TRUE, perching_dataset = "RFID", perching_prefix = "simulated_perching_events_", path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = NULL, PIT_tag_col = NULL, rfid_label = "RFID", camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = TRUE, perching_dataset = "RFID", perching_prefix = "simulated_perching_events_", path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
rlang::last_trace()
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = "sensor_id", PIT_tag_col = "PIT_tag_ID", rfid_label = "RFID", camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = TRUE, perching_dataset = "RFID", perching_prefix = "simulated_perching_events_", path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = "sensor_id", PIT_tag_col = "PIT_tag_ID", rfid_label = "RFID", camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = TRUE, perching_dataset = "RFID", perching_prefix = "simulated_perching_events_", path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
# Read in the output, check the output, then delete all files
test_res <- read.csv(file.path(tmp_path, "scored_detectionClusters.csv"))
glimpse(test_res)
# Test that the results are 3 entrance events and 3 exit events, in that order
event_labels <- sapply(1:nrow(test_res), function(i){
wh <- which(!is.na(test_res[i, grep("direction", names(test_res))]))
test_res[i, grep("direction", names(test_res))][[wh]]
})
expect_equal(event_labels, rep(c("entrance", "exit"), each = 3))
# Test that the number of detection clusters in the input and output data are the same
expect_equal(nrow(sim_dats), nrow(test_res))
# Test that order of sensor labels in the first edge is correct
sensor_seq <- sapply(1:nrow(test_res), function(i){
paste(unique(strsplit(sim_dats$event_seq[i], split = "; ")[[1]])[1:2], collapse = " - ")
})
invisible(lapply(1:nrow(test_res), function(i){
expect_equal(test_res$Edge_1[i], sensor_seq[i])
}))
# Test that the results have the correct number of detections per individual (since RFID data was used as input)
invisible(lapply(1:nrow(test_res), function(i){
expect_equal(test_res$total_indiv1_detections[i], sim_dats$total_indiv1_detections[i])
}))
# Read in the output, check the output, then delete all files
test_res <- read.csv(file.path(tmp_path, "scored_detectionClusters.csv"))
glimpse(test_res)
# Test that the results are 3 entrance events and 3 exit events, in that order
event_labels <- sapply(1:nrow(test_res), function(i){
wh <- which(!is.na(test_res[i, grep("direction", names(test_res))]))
test_res[i, grep("direction", names(test_res))][[wh]]
})
expect_equal(event_labels, rep(c("entrance", "exit"), each = 3))
# Test that the number of detection clusters in the input and output data are the same
expect_equal(nrow(sim_dats), nrow(test_res))
# Test that order of sensor labels in the first edge is correct
sensor_seq <- sapply(1:nrow(test_res), function(i){
paste(unique(strsplit(sim_dats$event_seq[i], split = "; ")[[1]])[1:2], collapse = " - ")
})
invisible(lapply(1:nrow(test_res), function(i){
expect_equal(test_res$Edge_1[i], sensor_seq[i])
}))
# Test that the results have the correct number of detections per individual (since RFID data was used as input)
invisible(lapply(1:nrow(test_res), function(i){
expect_equal(test_res$total_indiv1_detections[i], sim_dats$total_indiv1_detections[i])
}))
# Test that the correct entrance and/or exit movements were assigned to perching events
invisible(lapply(1:nrow(test_res), function(i){
if(test_res$start[i] %in% starts_p){
expect_true(all(!sapply(test_res[i, grep("perch", names(test_res))], is.na)))
} else {
expect_false(all(!sapply(test_res[i, grep("perch", names(test_res))], is.na)))
}
}))
tmp_path == file.path(path, data_dir)
# Remove the temporary directory and all files within it
if(tmp_path == file.path(path, data_dir)){
unlink(tmp_path, recursive = TRUE)
}
# Create a temporary directory for testing. Files will be written and read here
path <- "/home/gsvidaurre/Desktop"
data_dir <- "tmp_tests"
tmp_path <- file.path(path, data_dir)
if(!dir.exists(tmp_path)){
dir.create(tmp_path)
}
# Create 3 entrance and 3 exit events using different combinations of the RFID, 2 pairs of beam breakers, and a camera. Each event is a detection cluster of a given duration (see ends below)
starts <- as.POSIXct(c(
"2023-01-01 01:00:00 EST"
)) + seq(1, 300, 50)
ends <- starts + rep(c(5, 10, 15), 2)
# Create a spreadsheet of the simulated directional movement events
sim_dats <- data.frame(start = starts) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(start),
month = month(start),
day = day(start),
end = ends,
event_seq = c(
paste(c(rep("Outer Beam Breaker", 2), rep("Inner Beam Breaker", 2), "Camera"), collapse = "; "), # entrance
paste(c(rep("RFID", 2), "Inner Beam Breaker", "Camera"), collapse = "; "), # entrance
paste(c(rep("Outer Beam Breaker", 3), rep("RFID", 2), "Camera"), collapse = "; "), # entrance
paste(c("Camera", rep("Inner Beam Breaker", 2), rep("Outer Beam Breaker", 2)), collapse = "; "), # exit
paste(c(rep("Camera", "Inner Beam Breaker", 5), rep("RFID", 2)), collapse = "; "), # exit
paste(c("Camera", rep("RFID", 2), rep("Outer Beam Breaker", 4)), collapse = "; ") # exit
),
indiv1_id = "test",
indiv2_id = NA,
# Matches the number of RFID detections if present above
total_indiv1_detections = c(NA, 2, 3, NA, 2, 4),
total_indiv2_detections = 0,
individual_initiated = "test",
individual_ended = "test",
total_pixels_motionTrigger = 60000,
pixel_threshold = 100,
video_file_name = paste(paste(paste("Box_01_2023_8_1", paste(hour(start), minute(start), second(start), sep = "_"), sep = "_"), "pre_trigger", sep = "_"), ".mp4", sep = ""),
threshold_seconds = 1,
run_length = 1,
data_stage = "pre-processing",
date_pre_processed = Sys.Date()
)
write.csv(sim_dats, file.path(tmp_path, "simulated_detectionClusters.csv"), row.names = FALSE)
# Create a dataset of 3 simulated perching events that encompass 2 entrances and 1 exit above
starts_p <- starts[c(1:2, 5)]
ends_p <- starts_p + c(25, 50, 10)
sim_perch <- data.frame(perching_start = starts_p) %>%
dplyr::mutate(
chamber_id = "Box_01",
sensor_id = "RFID",
PIT_tag_ID = "test",
perching_end = ends_p,
perching_duration_s = perching_end - perching_start,
unique_perching_event = seq(1, nrow(.), 1),
threshold = 1,
min_perching_run_length = 3,
data_stage = "pre-processing",
date_pre_processed = Sys.Date()
)
write.csv(sim_perch, file.path(tmp_path, "simulated_perching_events_RFID.csv"), row.names = FALSE)
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = "sensor_id", PIT_tag_col = "PIT_tag_ID", rfid_label = "RFID", camera_label = "Camera", outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = c("total_pixels_motionTrigger", "pixel_threshold", "video_file_name"), integrate_perching = TRUE, perching_dataset = "RFID", perching_prefix = "simulated_perching_events_", path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = "sensor_id", PIT_tag_col = "PIT_tag_ID", rfid_label = "RFID", camera_label = "Camera", outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = c("total_pixels_motionTrigger", "pixel_threshold", "video_file_name"), integrate_perching = TRUE, perching_dataset = "RFID", perching_prefix = "simulated_perching_events_", path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
rlang::last_trace()
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = "sensor_id", PIT_tag_col = "PIT_tag_ID", rfid_label = "RFID", camera_label = "Camera", outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = c("total_pixels_motionTrigger", "pixel_threshold", "video_file_name"), integrate_perching = TRUE, perching_dataset = "RFID", perching_prefix = "simulated_perching_events_", path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
# Read in the output, check the output, then delete all files
test_res <- read.csv(file.path(tmp_path, "scored_detectionClusters.csv"))
# Test that the results are 3 entrance events and 3 exit events, in that order
event_labels <- sapply(1:nrow(test_res), function(i){
wh <- which(!is.na(test_res[i, grep("direction", names(test_res))]))
test_res[i, grep("direction", names(test_res))][[wh]]
})
expect_equal(event_labels, rep(c("entrance", "exit"), each = 3))
# Test that the number of detection clusters in the input and output data are the same
expect_equal(nrow(sim_dats), nrow(test_res))
# Test that order of sensor labels in the first edge is correct
sensor_seq <- sapply(1:nrow(test_res), function(i){
paste(unique(strsplit(sim_dats$event_seq[i], split = "; ")[[1]])[1:2], collapse = " - ")
})
invisible(lapply(1:nrow(test_res), function(i){
expect_equal(test_res$Edge_1[i], sensor_seq[i])
}))
# Test that the results have the correct number of detections per individual (since RFID data was used as input)
invisible(lapply(1:nrow(test_res), function(i){
expect_equal(test_res$total_indiv1_detections[i], sim_dats$total_indiv1_detections[i])
}))
# Test that the correct entrance and/or exit movements were assigned to perching events
invisible(lapply(1:nrow(test_res), function(i){
if(test_res$start[i] %in% starts_p){
expect_true(all(!sapply(test_res[i, grep("perch", names(test_res))], is.na)))
} else {
expect_false(all(!sapply(test_res[i, grep("perch", names(test_res))], is.na)))
}
}))
tmp_path == file.path(path, data_dir)
# Remove the temporary directory and all files within it
if(tmp_path == file.path(path, data_dir)){
unlink(tmp_path, recursive = TRUE)
}
