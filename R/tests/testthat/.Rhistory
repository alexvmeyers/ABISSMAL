) %>%
rowid_to_column()
# Find all of the edges that occur in each sequence of sensor triggering events
detectns_edges <- detectns %>%
group_by(rowid) %>%
nest() %>%
# Make a data frame of the indices of edges in the sensor type sequences
dplyr::mutate(
# Each nested data frame represents a different cluster of detections
edges = map(
.x = data,
# Get the edges for each burst of detections
# TKTK in testing, need to check that the correct number of columns are returned even when edges very in length across bouts
.f = ~ dplyr::select(.x, start, end, event_seq) %>%
pmap_dfr(., function(start, end, event_seq){
sensor_events <- strsplit(event_seq, split = "; ")[[1]]
li <- cumsum(rle(sensor_events)[["lengths"]])
# Get edges using dyads of the last indices
edges <- unlist(lapply(1:length(li), function(i){
if(i < length(li)){
return(paste(sensor_events[li[i]], sensor_events[li[i + 1]], sep = " - "))
} else if(i == 1 & length(li) == 1){
return(NA)
}
}))
# Use the first edge to label directionality
if(!is.na(edges[1])){
if(!is.null(camera_label)){
if(grepl(rfid_label, edges[1]) & grepl(camera_label, edges[1])){
if(edges[1] == paste(rfid_label, camera_label, sep = " - ")){
rfid_camera_direction <- "entrance"
} else if(edges[1] == paste(camera_label, rfid_label, sep = " - ")){
rfid_camera_direction <- "exit"
}
rfid_outer_irbb_direction <- rfid_inner_irbb_direction <- outer_irbb_camera_direction <- inner_irbb_camera_direction <- outer_inner_irbb_direction <- NA
}
}
if(grepl(rfid_label, edges[1]) & grepl(paste(c(outer_irbb_label, inner_irbb_label), collapse = "|"), edges[1])){
if(edges[1] == paste(outer_irbb_label, rfid_label, sep = " - ")){
rfid_outer_irbb_direction <- "entrance"
rfid_inner_irbb_direction <- NA
} else if(edges[1] == paste(rfid_label, outer_irbb_label, sep = " - ")){
rfid_outer_irbb_direction <- "exit"
rfid_inner_irbb_direction <- NA
} else if(edges[1] == paste(rfid_label, inner_irbb_label, sep = " - ")){
rfid_inner_irbb_direction <- "entrance"
rfid_outer_irbb_direction <- NA
} else if(edges[1] == paste(inner_irbb_label, rfid_label, sep = " - ")){
rfid_inner_irbb_direction <- "exit"
rfid_outer_irbb_direction <- NA
}
rfid_camera_direction <- outer_irbb_camera_direction <- inner_irbb_camera_direction <- outer_inner_irbb_direction <- NA
}
if(!is.null(camera_label)){
if(grepl(camera_label, edges[1]) & grepl(paste(c(outer_irbb_label, inner_irbb_label), collapse = "|"), edges[1])){
if(edges[1] == paste(outer_irbb_label, camera_label, sep = " - ")){
outer_irbb_camera_direction <- "entrance"
inner_irbb_camera_direction <- NA
} else if(edges[1] == paste(camera_label, outer_irbb_label, sep = " - ")){
outer_irbb_camera_direction <- "exit"
inner_irbb_camera_direction <- NA
} else if(edges[1] == paste(inner_irbb_label, camera_label, sep = " - ")){
inner_irbb_camera_direction <- "entrance"
outer_irbb_camera_direction <- NA
} else if(edges[1] == paste(camera_label, inner_irbb_label, sep = " - ")){
inner_irbb_camera_direction <- "exit"
outer_irbb_camera_direction <- NA
}
rfid_camera_direction <- rfid_outer_irbb_direction <- rfid_inner_irbb_direction <- outer_inner_irbb_direction <- NA
}
}
if(!grepl("Camera|RFID", edges[1]) & grepl(paste(c(outer_irbb_label, inner_irbb_label), collapse = "|"), edges[1])){
if(edges[1] == paste(outer_irbb_label, inner_irbb_label, sep = " - ")){
outer_inner_irbb_direction <- "entrance"
} else if(edges[1] == paste(inner_irbb_label, outer_irbb_label, sep = " - ")){
outer_inner_irbb_direction <- "exit"
}
rfid_camera_direction <- rfid_outer_irbb_direction <- rfid_inner_irbb_direction <- inner_irbb_camera_direction <- outer_irbb_camera_direction <- NA
}
} else {
rfid_camera_direction <- rfid_outer_irbb_direction <- rfid_inner_irbb_direction <- outer_irbb_camera_direction <- inner_irbb_camera_direction <- outer_inner_irbb_direction <- NA
}
# Get edges using dyads of the last indices
edges <- data.frame(t(matrix(edges)))
names(edges) <- paste("Edge", seq(1, length(edges), 1), sep = "_")
# Add the unique sensor labels that were present in each bout
sensor_ids <- paste(unique(sensor_events), collapse = "; ")
tmp <- data.frame(
start = start,
end = end,
sensor_ids = sensor_ids
) %>%
bind_cols(
edges
) %>%
dplyr::mutate(
rfid_camera_direction = rfid_camera_direction,
rfid_outer_irbb_direction = rfid_outer_irbb_direction,
rfid_inner_irbb_direction = rfid_inner_irbb_direction,
outer_irbb_camera_direction = outer_irbb_camera_direction,
inner_irbb_camera_direction = inner_irbb_camera_direction,
outer_inner_irbb_direction = outer_inner_irbb_direction
)
return(tmp)
})
)
) %>%
dplyr::select(-c(data)) %>%
unnest(`cols` = c(edges)) %>%
ungroup()
# If only RFID data is present, then add back metadata about individual identities from the integration
if(!is.null(camera_label)){
if(any(grepl(rfid_label, detectns$event_seq)) & !any(grepl(camera_label, detectns$event_seq))){
detectns_edges2 <- detectns_edges %>%
dplyr::inner_join(
detectns %>%
dplyr::select("rowid", names(.)[grep("indiv", names(.))]),
by = "rowid"
) %>%
dplyr::select(rowid, start, end, sensor_ids, names(.)[grep("Edge", names(.))], names(.)[grep("direction", names(.))], names(.)[grep("indiv", names(.))])
}
# If only Camera data is present, then add back metadata about videos from the integration
if(any(grepl(camera_label, detectns$event_seq)) & !any(grepl(rfid_label, detectns$event_seq))){
detectns_edges2 <- detectns_edges %>%
dplyr::inner_join(
detectns %>%
dplyr::select("rowid", names(.)[grep(paste(video_metadata_cols, collapse = "|"), names(.))]),
by = "rowid"
) %>%
dplyr::select(rowid, start, end, sensor_ids, names(.)[grep("Edge", names(.))], names(.)[grep("direction", names(.))], names(.)[grep(paste(video_metadata_cols, collapse = "|"), names(.))])
}
# If RFID and Camera data is present, then add back individual identity and video metadata
if(any(grepl(rfid_label, detectns$event_seq)) & any(grepl(camera_label, detectns$event_seq))){
detectns_edges2 <- detectns_edges %>%
dplyr::inner_join(
detectns %>%
dplyr::select("rowid", names(.)[grep("indiv", names(.))], names(.)[grep(paste(video_metadata_cols, collapse = "|"), names(.))]),
by = "rowid"
) %>%
dplyr::select(rowid, start, end, sensor_ids, names(.)[grep("Edge", names(.))], names(.)[grep("direction", names(.))], names(.)[grep("indiv", names(.))], names(.)[grep(paste(video_metadata_cols, collapse = "|"), names(.))])
}
if(!any(grepl(paste(c(rfid_label, camera_label), collapse = "|"), detectns$event_seq))){
detectns_edges2 <- detectns_edges %>%
dplyr::select(rowid, start, end, sensor_ids, names(.)[grep("Edge", names(.))], names(.)[grep("direction", names(.))])
}
}
# Integrate perching events if specified
if(integrate_perching){
# Read in perching event data depending on which datasets were specified
if(perching_dataset != "RFID-IRBB"){
perch_df <- read.csv(file.path(path, data_dir, paste(perching_prefix, perching_dataset, ".csv", sep = "")))  %>%
# Make sure that the timestamps are in the right format
dplyr::mutate(
perching_start = as.POSIXct(format(as.POSIXct(perching_start, tz = "America/New York"), "%Y-%m-%d %H:%M:%OS6")),
perching_end = as.POSIXct(format(as.POSIXct(perching_end, tz = "America/New York"), "%Y-%m-%d %H:%M:%OS6"))
)
} else if(perching_dataset == "RFID-IRBB"){
tmp_file_nms <- c(paste(perching_prefix, strsplit(perching_dataset, split = "-")[[1]][1], ".csv", sep = ""), paste(perching_prefix, strsplit(perching_dataset, split = "-")[[1]][2], ".csv", sep = ""))
perch_df <- data.table::rbindlist(lapply(1:length(tmp_file_nms), function(i){
tmp <- read.csv(file.path(path, data_dir, tmp_file_nms[i]))  %>%
# Make sure that the timestamps are in the right format
dplyr::mutate(
perching_start = as.POSIXct(format(as.POSIXct(perching_start, tz = "America/New York"), "%Y-%m-%d %H:%M:%OS6")),
perching_end = as.POSIXct(format(as.POSIXct(perching_end, tz = "America/New York"), "%Y-%m-%d %H:%M:%OS6"))
)
# Add a PIT tag column with NAs for the beam breaker data
}), fill = TRUE)
}
if(nrow(perch_df) > 0){
# For each detection cluster, figure out whether it occurred during a perching event and add that perching event to the final dataset
if(perching_dataset %in% c("RFID", "RFID-IRBB")){
tmp_df <- detectns_edges2 %>%
dplyr::select(rowid, start, end) %>%
pmap_dfr(., function(rowid, start, end){
tmp_perching <- perch_df %>%
dplyr::filter(
start >= perching_start & end <= perching_end
) %>%
dplyr::rename(
perching_PIT_tag = !!sym(PIT_tag_col)
) %>%
dplyr::mutate(
de_rowid = rowid
) %>%
dplyr::select(de_rowid, all_of(sensor_id_col), perching_PIT_tag, perching_start, perching_end, perching_duration_s)
return(tmp_perching)
})
} else if(perching_dataset == "IRBB"){
tmp_df <- detectns_edges2 %>%
dplyr::select(rowid, start, end) %>%
pmap_dfr(., function(rowid, start, end){
tmp_perching <- perch_df %>%
dplyr::filter(
start >= perching_start & end <= perching_end
) %>%
dplyr::mutate(
de_rowid = rowid
) %>%
dplyr::select(de_rowid, all_of(sensor_id_col), perching_start, perching_end, perching_duration_s)
return(tmp_perching)
})
}
# Then add the perching event assignment for the given bout as new columns, depending on the perching datasets used as input
if(perching_dataset %in% c("RFID", "IRBB")){
detectns_edges_p <- detectns_edges2 %>%
dplyr::left_join(
tmp_df %>%
dplyr::rename(
perching_sensor = !!sym(sensor_id_col)
),
by = c("rowid" = "de_rowid")
)
# If both RFID and IRBB were specified as perching datasets, then add back perching events from each dataset as separate columns
} else if(perching_dataset == "RFID-IRBB"){
detectns_edges_p <- detectns_edges2 %>%
dplyr::left_join(
tmp_df %>%
dplyr::filter(!!sym(sensor_id_col) == "RFID") %>%
dplyr::rename(
`perching_rfid_start` = "perching_start",
`perching_rfid_end` = "perching_end",
`perching_rfid_duration_s` = "perching_duration_s"
) %>%
dplyr::select(-c(all_of(sensor_id_col))),
by = c("rowid" = "de_rowid")
) %>%
dplyr::left_join(
tmp_df %>%
dplyr::filter(!!sym(sensor_id_col) == "Outer Beam Breaker") %>%
dplyr::rename(
`perching_outer_irbb_start` = "perching_start",
`perching_outer_irbb_end` = "perching_end",
`perching_outer_irbb_duration_s` = "perching_duration_s"
) %>%
dplyr::select(-c(all_of(sensor_id_col), "perching_PIT_tag")),
by = c("rowid" = "de_rowid")
) %>%
dplyr::left_join(
tmp_df %>%
dplyr::filter(!!sym(sensor_id_col) == "Inner Beam Breaker") %>%
dplyr::rename(
`perching_inner_irbb_start` = "perching_start",
`perching_inner_irbb_end` = "perching_end",
`perching_inner_irbb_duration_s` = "perching_duration_s"
) %>%
dplyr::select(-c(all_of(sensor_id_col), "perching_PIT_tag")),
by = c("rowid" = "de_rowid")
)
}
} else {
warning("The perching events dataset was empty; skipping integration of perching events")
detectns_edges_p <- detectns_edges2
}
} else {
detectns_edges_p <- detectns_edges2
}
# If only RFID data is present, then add back metadata about individual identities from the integration
if(!is.null(camera_label)){
if(any(grepl(rfid_label, detectns$event_seq)) & !any(grepl(camera_label, detectns$event_seq))){
detectns_edges2 <- detectns_edges %>%
dplyr::inner_join(
detectns %>%
dplyr::select("rowid", names(.)[grep("indiv", names(.))]),
by = "rowid"
) %>%
dplyr::select(rowid, start, end, sensor_ids, names(.)[grep("Edge", names(.))], names(.)[grep("direction", names(.))], names(.)[grep("indiv", names(.))])
}
# If only Camera data is present, then add back metadata about videos from the integration
if(any(grepl(camera_label, detectns$event_seq)) & !any(grepl(rfid_label, detectns$event_seq))){
detectns_edges2 <- detectns_edges %>%
dplyr::inner_join(
detectns %>%
dplyr::select("rowid", names(.)[grep(paste(video_metadata_cols, collapse = "|"), names(.))]),
by = "rowid"
) %>%
dplyr::select(rowid, start, end, sensor_ids, names(.)[grep("Edge", names(.))], names(.)[grep("direction", names(.))], names(.)[grep(paste(video_metadata_cols, collapse = "|"), names(.))])
}
# If RFID and Camera data is present, then add back individual identity and video metadata
if(any(grepl(rfid_label, detectns$event_seq)) & any(grepl(camera_label, detectns$event_seq))){
detectns_edges2 <- detectns_edges %>%
dplyr::inner_join(
detectns %>%
dplyr::select("rowid", names(.)[grep("indiv", names(.))], names(.)[grep(paste(video_metadata_cols, collapse = "|"), names(.))]),
by = "rowid"
) %>%
dplyr::select(rowid, start, end, sensor_ids, names(.)[grep("Edge", names(.))], names(.)[grep("direction", names(.))], names(.)[grep("indiv", names(.))], names(.)[grep(paste(video_metadata_cols, collapse = "|"), names(.))])
}
if(!any(grepl(paste(c(rfid_label, camera_label), collapse = "|"), detectns$event_seq))){
detectns_edges2 <- detectns_edges %>%
dplyr::select(rowid, start, end, sensor_ids, names(.)[grep("Edge", names(.))], names(.)[grep("direction", names(.))])
}
} else {
detectns_edges2 <- detectns_edges
}
# Integrate perching events if specified
if(integrate_perching){
# Read in perching event data depending on which datasets were specified
if(perching_dataset != "RFID-IRBB"){
perch_df <- read.csv(file.path(path, data_dir, paste(perching_prefix, perching_dataset, ".csv", sep = "")))  %>%
# Make sure that the timestamps are in the right format
dplyr::mutate(
perching_start = as.POSIXct(format(as.POSIXct(perching_start, tz = "America/New York"), "%Y-%m-%d %H:%M:%OS6")),
perching_end = as.POSIXct(format(as.POSIXct(perching_end, tz = "America/New York"), "%Y-%m-%d %H:%M:%OS6"))
)
} else if(perching_dataset == "RFID-IRBB"){
tmp_file_nms <- c(paste(perching_prefix, strsplit(perching_dataset, split = "-")[[1]][1], ".csv", sep = ""), paste(perching_prefix, strsplit(perching_dataset, split = "-")[[1]][2], ".csv", sep = ""))
perch_df <- data.table::rbindlist(lapply(1:length(tmp_file_nms), function(i){
tmp <- read.csv(file.path(path, data_dir, tmp_file_nms[i]))  %>%
# Make sure that the timestamps are in the right format
dplyr::mutate(
perching_start = as.POSIXct(format(as.POSIXct(perching_start, tz = "America/New York"), "%Y-%m-%d %H:%M:%OS6")),
perching_end = as.POSIXct(format(as.POSIXct(perching_end, tz = "America/New York"), "%Y-%m-%d %H:%M:%OS6"))
)
# Add a PIT tag column with NAs for the beam breaker data
}), fill = TRUE)
}
if(nrow(perch_df) > 0){
# For each detection cluster, figure out whether it occurred during a perching event and add that perching event to the final dataset
if(perching_dataset %in% c("RFID", "RFID-IRBB")){
tmp_df <- detectns_edges2 %>%
dplyr::select(rowid, start, end) %>%
pmap_dfr(., function(rowid, start, end){
tmp_perching <- perch_df %>%
dplyr::filter(
start >= perching_start & end <= perching_end
) %>%
dplyr::rename(
perching_PIT_tag = !!sym(PIT_tag_col)
) %>%
dplyr::mutate(
de_rowid = rowid
) %>%
dplyr::select(de_rowid, all_of(sensor_id_col), perching_PIT_tag, perching_start, perching_end, perching_duration_s)
return(tmp_perching)
})
} else if(perching_dataset == "IRBB"){
tmp_df <- detectns_edges2 %>%
dplyr::select(rowid, start, end) %>%
pmap_dfr(., function(rowid, start, end){
tmp_perching <- perch_df %>%
dplyr::filter(
start >= perching_start & end <= perching_end
) %>%
dplyr::mutate(
de_rowid = rowid
) %>%
dplyr::select(de_rowid, all_of(sensor_id_col), perching_start, perching_end, perching_duration_s)
return(tmp_perching)
})
}
# Then add the perching event assignment for the given bout as new columns, depending on the perching datasets used as input
if(perching_dataset %in% c("RFID", "IRBB")){
detectns_edges_p <- detectns_edges2 %>%
dplyr::left_join(
tmp_df %>%
dplyr::rename(
perching_sensor = !!sym(sensor_id_col)
),
by = c("rowid" = "de_rowid")
)
# If both RFID and IRBB were specified as perching datasets, then add back perching events from each dataset as separate columns
} else if(perching_dataset == "RFID-IRBB"){
detectns_edges_p <- detectns_edges2 %>%
dplyr::left_join(
tmp_df %>%
dplyr::filter(!!sym(sensor_id_col) == "RFID") %>%
dplyr::rename(
`perching_rfid_start` = "perching_start",
`perching_rfid_end` = "perching_end",
`perching_rfid_duration_s` = "perching_duration_s"
) %>%
dplyr::select(-c(all_of(sensor_id_col))),
by = c("rowid" = "de_rowid")
) %>%
dplyr::left_join(
tmp_df %>%
dplyr::filter(!!sym(sensor_id_col) == "Outer Beam Breaker") %>%
dplyr::rename(
`perching_outer_irbb_start` = "perching_start",
`perching_outer_irbb_end` = "perching_end",
`perching_outer_irbb_duration_s` = "perching_duration_s"
) %>%
dplyr::select(-c(all_of(sensor_id_col), "perching_PIT_tag")),
by = c("rowid" = "de_rowid")
) %>%
dplyr::left_join(
tmp_df %>%
dplyr::filter(!!sym(sensor_id_col) == "Inner Beam Breaker") %>%
dplyr::rename(
`perching_inner_irbb_start` = "perching_start",
`perching_inner_irbb_end` = "perching_end",
`perching_inner_irbb_duration_s` = "perching_duration_s"
) %>%
dplyr::select(-c(all_of(sensor_id_col), "perching_PIT_tag")),
by = c("rowid" = "de_rowid")
)
}
} else {
warning("The perching events dataset was empty; skipping integration of perching events")
detectns_edges_p <- detectns_edges2
}
} else {
detectns_edges_p <- detectns_edges2
}
detectns_edges_p <- detectns_edges_p %>%
dplyr::mutate(
data_stage = "integrated",
date_processed = paste(Sys.Date(), Sys.time(), sep = " ")
) %>%
dplyr::select(-c("rowid"))
write.csv(detectns_edges_p, file.path(path, out_dir, out_file_nm), row.names = FALSE)
# Right now the NULL in camera_label is causing problems in the labeling conditional statements
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = NULL, PIT_tag_col = NULL, rfid_label = "RFID", camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = FALSE, perching_dataset = NULL, perching_prefix = NULL, path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
# Right now the NULL in camera_label is causing problems in the labeling conditional statements
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = NULL, PIT_tag_col = NULL, rfid_label = "RFID", camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = FALSE, perching_dataset = NULL, perching_prefix = NULL, path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
# Create a spreadsheet of the simulated directional movement events
sim_dats <- data.frame(start = starts) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(start),
month = month(start),
day = day(start),
end = ends,
event_seq = c(
paste(c(rep("Outer Beam Breaker", 2), rep("Inner Beam Breaker", 2)), collapse = "; "), # entrance
paste(c(rep("RFID", 2), rep("Inner Beam Breaker", 1)), collapse = "; "), # entrance
paste(c(rep("Outer Beam Breaker", 3), rep("RFID", 2)), collapse = "; "), # entrance
paste(c(rep("Inner Beam Breaker", 2), rep("Outer Beam Breaker", 2)), collapse = "; "), # exit
paste(c(rep("Inner Beam Breaker", 5), rep("RFID", 2)), collapse = "; "), # exit
paste(c(rep("RFID", 2), rep("Outer Beam Breaker", 4)), collapse = "; ") # exit
),
indiv1_id = "test",
indiv2_id = NA,
# Matches the number of RFID detections if present above
total_indiv1_detections = c(NA, 2, 3, NA, 2, 4),
total_indiv2_detections = 0,
individual_initiated = "test",
individual_ended = "test",
threshold_seconds = 1,
run_length = 1,
data_stage = "pre-processing",
date_pre_processed = Sys.Date()
)
write.csv(sim_dats, file.path(tmp_path, "simulated_detectionClusters.csv"), row.names = FALSE)
# Right now the NULL in camera_label is causing problems in the labeling conditional statements
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
score_detectionClusters(file_nm = "simulated_detectionClusters.csv", sensor_id_col = NULL, PIT_tag_col = NULL, rfid_label = "RFID", camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", general_metadata_cols = c("chamber_id", "year", "month", "day"), video_metadata_cols = NULL, integrate_perching = FALSE, perching_dataset = NULL, perching_prefix = NULL, path = path, data_dir = data_dir, out_dir = data_dir, out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
# Read in the output, check the output, then delete all files
test_res <- read.csv(file.path(tmp_path, "scored_detectionClusters.csv"))
View(test_res)
# Test that the results are 3 entrance events and 3 exit events, in that order
i <- 1
test_res[i, grep("direction", names(test_res))]
wh <- which(!is.na(test_res[i, grep("direction", names(test_res))]))
test_res[i, wh]
wh <- which(!is.na(test_res[i, grep("direction", names(test_res))]))
wh
test_res[i, grep("direction", names(test_res))][wh]
test_res[i, grep("direction", names(test_res))][[wh]]
# Test that the results are 3 entrance events and 3 exit events, in that order
event_labels <- sapply(1:nrow(test_res), function(i){
wh <- which(!is.na(test_res[i, grep("direction", names(test_res))]))
test_res[i, grep("direction", names(test_res))][[wh]]
})
event_labels
expect_equal(event_labels, rep(c("entrance", "exit"), each = 3))
# Test that order of sensor labels in the first edge is correct
sim_dats$event_seq
# Test that order of sensor labels in the first edge is correct
sapply(1:nrow(test_res), function(i){
paste(unique(strsplit(sim_dats$event_seq, split = "; ")), collapse = "; ")
})
# Test that order of sensor labels in the first edge is correct
sapply(1:nrow(test_res), function(i){
paste(unique(strsplit(sim_dats$event_seq[i], split = "; ")), collapse = "; ")
})
# Test that order of sensor labels in the first edge is correct
i <- 1
sim_dats$event_seq
strsplit(sim_dats$event_seq[i], split = "; ")[[1]]
unique(strsplit(sim_dats$event_seq[i], split = "; ")[[1]])
paste(unique(strsplit(sim_dats$event_seq[i], split = "; ")[[1]]), collapse = "; ")
# Test that the number of detection clusters in the input and output data are the same
expect_equal(nrow(sim_dats), nrow(test_res))
# Test that order of sensor labels in the first edge is correct
sapply(1:nrow(test_res), function(i){
paste(unique(strsplit(sim_dats$event_seq[i], split = "; ")[[1]]), collapse = "; ")
})
# Test that order of sensor labels in the first edge is correct
test_seq <- sapply(1:nrow(test_res), function(i){
paste(unique(strsplit(sim_dats$event_seq[i], split = "; ")[[1]]), collapse = "; ")
})
# Test that order of sensor labels in the first edge is correct
sensor_seq <- sapply(1:nrow(test_res), function(i){
paste(unique(strsplit(sim_dats$event_seq[i], split = "; ")[[1]]), collapse = "; ")
})
invisible(lapply(1:nrow(test_res), function(i){
expect_equal(test_res$event_seq[i], sensor_seq[i])
}))
invisible(lapply(1:nrow(test_res), function(i){
expect_equal(test_res$Edge_1[i], sensor_seq[i])
}))
# Test that order of sensor labels in the first edge is correct
sensor_seq <- sapply(1:nrow(test_res), function(i){
paste(unique(strsplit(sim_dats$event_seq[i], split = "; ")[[1]]), collapse = " - ")
})
sensor_seq
invisible(lapply(1:nrow(test_res), function(i){
expect_equal(test_res$Edge_1[i], sensor_seq[i])
}))
