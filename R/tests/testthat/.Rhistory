check_fArgs_data_cols
check_fArgs_data_cols <- function(y, df){
# Catch column names that are named objects or character strings
errTest <- try({eval(base::as.symbol(y))}, silent = TRUE)
if(class(errTest) == "try-error"){
tmp_cols <- y
} else {
tmp_cols <- eval(base::as.symbol(y))
}
class(errTest)
# str(tmp_cols)
class(tmp_cols)
# eval(tmp_cols)
# str(length(tmp_cols))
if(length(tmp_cols) == 1){
if(class(errTest) == "try-error"){
err <- paste("The column", print(tmp_cols), "was not found in the data frame", sep = " ")
} else {
err <- paste("The column", tmp_cols, "was not found in the data frame", sep = " ")
}
if(!tmp_cols %in% names(df)){
stop(err)
}
} else if(length(tmp_cols) > 1){
sapply(1:length(tmp_cols), function(z){
err <- paste("The column", tmp_cols[z], "was not found in the data frame", sep = " ")
if(!tmp_cols[z] %in% names(df)){
stop(err)
}
})
}
}
invisible(sapply(1:length(general_metadata_cols), function(i){
check_fArgs_data_cols(general_metadata_cols[i], labeled_irbb)
}))
check_fArgs_data_cols <- function(y, df){
# Catch column names that are named objects or character strings
errTest <- try({eval(base::as.symbol(y))}, silent = TRUE)
if(class(errTest) == "try-error"){
tmp_cols <- y
} else {
tmp_cols <- eval(base::as.symbol(y))
}
str(errTest)
class(errTest)
# str(tmp_cols)
class(tmp_cols)
# eval(tmp_cols)
# str(length(tmp_cols))
if(length(tmp_cols) == 1){
if(class(errTest) == "try-error"){
err <- paste("The column", print(tmp_cols), "was not found in the data frame", sep = " ")
} else {
err <- paste("The column", tmp_cols, "was not found in the data frame", sep = " ")
}
if(!tmp_cols %in% names(df)){
stop(err)
}
} else if(length(tmp_cols) > 1){
sapply(1:length(tmp_cols), function(z){
err <- paste("The column", tmp_cols[z], "was not found in the data frame", sep = " ")
if(!tmp_cols[z] %in% names(df)){
stop(err)
}
})
}
}
invisible(sapply(1:length(general_metadata_cols), function(i){
check_fArgs_data_cols(general_metadata_cols[i], labeled_irbb)
}))
check_fArgs_data_cols <- function(y, df){
check_fArgs_data_cols <- function(y, df){
# Catch column names that are named objects or character strings
errTest <- try({eval(base::as.symbol(y))}, silent = TRUE)
if(grepl("error", class(errTest))){
tmp_cols <- y
} else {
tmp_cols <- eval(base::as.symbol(y))
}
str(errTest)
class(errTest)
# str(tmp_cols)
class(tmp_cols)
# eval(tmp_cols)
# str(length(tmp_cols))
if(length(tmp_cols) == 1){
if(grepl("error", class(errTest))){
err <- paste("The column", print(tmp_cols), "was not found in the data frame", sep = " ")
} else {
err <- paste("The column", tmp_cols, "was not found in the data frame", sep = " ")
}
if(!tmp_cols %in% names(df)){
stop(err)
}
} else if(length(tmp_cols) > 1){
sapply(1:length(tmp_cols), function(z){
err <- paste("The column", tmp_cols[z], "was not found in the data frame", sep = " ")
if(!tmp_cols[z] %in% names(df)){
stop(err)
}
})
}
}
invisible(sapply(1:length(general_metadata_cols), function(i){
check_fArgs_data_cols(general_metadata_cols[i], labeled_irbb)
}))
check_fArgs_data_cols <- function(y, df){
# Catch column names that are named objects or character strings
errTest <- try({eval(base::as.symbol(y))}, silent = TRUE)
if(grepl("error", class(errTest))){
tmp_cols <- y
} else {
tmp_cols <- eval(base::as.symbol(y))
}
str(errTest)
class(errTest)
# str(tmp_cols)
class(tmp_cols)
# eval(tmp_cols)
# str(length(tmp_cols))
if(length(tmp_cols) == 1){
if(grepl("error", class(errTest))){
class(tmp_cols)
# err <- paste("The column", print(tmp_cols), "was not found in the data frame", sep = " ")
} else {
err <- paste("The column", tmp_cols, "was not found in the data frame", sep = " ")
}
if(!tmp_cols %in% names(df)){
stop(err)
}
} else if(length(tmp_cols) > 1){
sapply(1:length(tmp_cols), function(z){
err <- paste("The column", tmp_cols[z], "was not found in the data frame", sep = " ")
if(!tmp_cols[z] %in% names(df)){
stop(err)
}
})
}
}
invisible(sapply(1:length(general_metadata_cols), function(i){
check_fArgs_data_cols(general_metadata_cols[i], labeled_irbb)
}))
check_fArgs_data_cols <- function(y, df){
# Catch column names that are named objects or character strings
errTest <- try({eval(base::as.symbol(y))}, silent = TRUE)
if(grepl("error", class(errTest))){
tmp_cols <- y
} else {
tmp_cols <- eval(base::as.symbol(y))
}
str(errTest)
# class(errTest)
# str(tmp_cols)
# class(tmp_cols)
# eval(tmp_cols)
# str(length(tmp_cols))
if(length(tmp_cols) == 1){
if(grepl("error", class(errTest))){
class(tmp_cols)
# err <- paste("The column", print(tmp_cols), "was not found in the data frame", sep = " ")
} else {
err <- paste("The column", tmp_cols, "was not found in the data frame", sep = " ")
}
if(!tmp_cols %in% names(df)){
stop(err)
}
} else if(length(tmp_cols) > 1){
sapply(1:length(tmp_cols), function(z){
err <- paste("The column", tmp_cols[z], "was not found in the data frame", sep = " ")
if(!tmp_cols[z] %in% names(df)){
stop(err)
}
})
}
}
invisible(sapply(1:length(general_metadata_cols), function(i){
check_fArgs_data_cols(general_metadata_cols[i], labeled_irbb)
}))
# Check that a data frame has each column in a vector of columns specified in the formal arguments
y <- general_metadata_cols[1]
# y <- irbb_expected_cols[1]
df <- labeled_irbb
glimpse(df)
y
# Catch column names that are named objects or character strings
errTest <- try({eval(base::as.symbol(y))}, silent = TRUE)
errTest
str(errTest)
errTest[1]
errTest[2]
attr(errTest)
attributes(errTest)
attributes(errTest)$class
check_fArgs_data_cols <- function(y, df){
# Catch column names that are named objects or character strings
errTest <- try({eval(base::as.symbol(y))}, silent = TRUE)
if(grepl("error", attributes(errTest)$class)){
tmp_cols <- y
} else {
tmp_cols <- eval(base::as.symbol(y))
}
str(errTest)
attributes(errTest)$class
# class(errTest)
# str(tmp_cols)
# class(tmp_cols)
# eval(tmp_cols)
# str(length(tmp_cols))
if(length(tmp_cols) == 1){
if(grepl("error", attributes(errTest)$class)){
class(tmp_cols)
# err <- paste("The column", print(tmp_cols), "was not found in the data frame", sep = " ")
} else {
err <- paste("The column", tmp_cols, "was not found in the data frame", sep = " ")
}
if(!tmp_cols %in% names(df)){
stop(err)
}
} else if(length(tmp_cols) > 1){
sapply(1:length(tmp_cols), function(z){
err <- paste("The column", tmp_cols[z], "was not found in the data frame", sep = " ")
if(!tmp_cols[z] %in% names(df)){
stop(err)
}
})
}
}
invisible(sapply(1:length(general_metadata_cols), function(i){
check_fArgs_data_cols(general_metadata_cols[i], labeled_irbb)
}))
attributes(errTest)$class
grepl("error", attributes(errTest)$class)
check_fArgs_data_cols <- function(y, df){
# Catch column names that are named objects or character strings
errTest <- try({eval(base::as.symbol(y))}, silent = TRUE)
if(any(grepl("error", attributes(errTest)$class))){
tmp_cols <- y
} else {
tmp_cols <- eval(base::as.symbol(y))
}
str(errTest)
str(attributes(errTest)$class)
# class(errTest)
# str(tmp_cols)
# class(tmp_cols)
# eval(tmp_cols)
# str(length(tmp_cols))
if(length(tmp_cols) == 1){
if(any(grepl("error", attributes(errTest)$class))){
class(tmp_cols)
# err <- paste("The column", print(tmp_cols), "was not found in the data frame", sep = " ")
} else {
err <- paste("The column", tmp_cols, "was not found in the data frame", sep = " ")
}
if(!tmp_cols %in% names(df)){
stop(err)
}
} else if(length(tmp_cols) > 1){
sapply(1:length(tmp_cols), function(z){
err <- paste("The column", tmp_cols[z], "was not found in the data frame", sep = " ")
if(!tmp_cols[z] %in% names(df)){
stop(err)
}
})
}
}
invisible(sapply(1:length(general_metadata_cols), function(i){
check_fArgs_data_cols(general_metadata_cols[i], labeled_irbb)
}))
check_fArgs_data_cols <- function(y, df){
# Catch column names that are named objects or character strings
errTest <- try({eval(base::as.symbol(y))}, silent = TRUE)
if(any(grepl("error", attributes(errTest)$class))){
tmp_cols <- y
} else {
tmp_cols <- eval(base::as.symbol(y))
}
str(errTest)
str(attributes(errTest)$class)
# class(errTest)
# str(tmp_cols)
# class(tmp_cols)
# eval(tmp_cols)
# str(length(tmp_cols))
if(length(tmp_cols) == 1){
if(any(grepl("error", attributes(errTest)$class))){
class(tmp_cols)
# err <- paste("The column", print(tmp_cols), "was not found in the data frame", sep = " ")
} else if(!any(grepl("error", attributes(errTest)$class))){
err <- paste("The column", tmp_cols, "was not found in the data frame", sep = " ")
}
if(!tmp_cols %in% names(df)){
stop(err)
}
} else if(length(tmp_cols) > 1){
sapply(1:length(tmp_cols), function(z){
err <- paste("The column", tmp_cols[z], "was not found in the data frame", sep = " ")
if(!tmp_cols[z] %in% names(df)){
stop(err)
}
})
}
}
invisible(sapply(1:length(general_metadata_cols), function(i){
check_fArgs_data_cols(general_metadata_cols[i], labeled_irbb)
}))
check_fArgs_data_cols <- function(y, df){
# Catch column names that are named objects or character strings
errTest <- try({eval(base::as.symbol(y))}, silent = TRUE)
if(any(grepl("error", attributes(errTest)$class))){
tmp_cols <- y
} else {
tmp_cols <- eval(base::as.symbol(y))
}
str(errTest)
str(attributes(errTest)$class)
# class(errTest)
# str(tmp_cols)
# class(tmp_cols)
# eval(tmp_cols)
# str(length(tmp_cols))
if(length(tmp_cols) == 1){
if(any(grepl("error", attributes(errTest)$class))){
class(tmp_cols)
# err <- paste("The column", print(tmp_cols), "was not found in the data frame", sep = " ")
} else if(!any(grepl("error", attributes(errTest)$class))){
# err <- paste("The column", tmp_cols, "was not found in the data frame", sep = " ")
}
if(!tmp_cols %in% names(df)){
stop(err)
}
} else if(length(tmp_cols) > 1){
sapply(1:length(tmp_cols), function(z){
err <- paste("The column", tmp_cols[z], "was not found in the data frame", sep = " ")
if(!tmp_cols[z] %in% names(df)){
stop(err)
}
})
}
}
invisible(sapply(1:length(general_metadata_cols), function(i){
check_fArgs_data_cols(general_metadata_cols[i], labeled_irbb)
}))
check_fArgs_data_cols <- function(y, df){
# Catch column names that are named objects or character strings
errTest <- try({eval(base::as.symbol(y))}, silent = TRUE)
if(any(grepl("error", attributes(errTest)$class))){
tmp_cols <- y
} else {
tmp_cols <- eval(base::as.symbol(y))
}
str(errTest)
str(attributes(errTest)$class)
# class(errTest)
# str(tmp_cols)
# class(tmp_cols)
# eval(tmp_cols)
# str(length(tmp_cols))
if(length(tmp_cols) == 1){
if(any(grepl("error", attributes(errTest)$class))){
class(tmp_cols)
# err <- paste("The column", print(tmp_cols), "was not found in the data frame", sep = " ")
}
# else if(!any(grepl("error", attributes(errTest)$class))){
# err <- paste("The column", tmp_cols, "was not found in the data frame", sep = " ")
# }
if(!tmp_cols %in% names(df)){
stop(err)
}
} else if(length(tmp_cols) > 1){
sapply(1:length(tmp_cols), function(z){
err <- paste("The column", tmp_cols[z], "was not found in the data frame", sep = " ")
if(!tmp_cols[z] %in% names(df)){
stop(err)
}
})
}
}
invisible(sapply(1:length(general_metadata_cols), function(i){
check_fArgs_data_cols(general_metadata_cols[i], labeled_irbb)
}))
check_fArgs_data_cols <- function(y, df){
# Catch column names that are named objects or character strings
errTest <- try({eval(base::as.symbol(y))}, silent = TRUE)
if(any(grepl("error", attributes(errTest)$class))){
tmp_cols <- eval(y)
} else {
tmp_cols <- eval(base::as.symbol(y))
}
str(errTest)
str(attributes(errTest)$class)
# class(errTest)
# str(tmp_cols)
# class(tmp_cols)
# eval(tmp_cols)
# str(length(tmp_cols))
if(length(tmp_cols) == 1){
if(any(grepl("error", attributes(errTest)$class))){
class(tmp_cols)
# err <- paste("The column", print(tmp_cols), "was not found in the data frame", sep = " ")
} else if(!any(grepl("error", attributes(errTest)$class))){
err <- paste("The column", tmp_cols, "was not found in the data frame", sep = " ")
}
if(!tmp_cols %in% names(df)){
stop(err)
}
} else if(length(tmp_cols) > 1){
sapply(1:length(tmp_cols), function(z){
err <- paste("The column", tmp_cols[z], "was not found in the data frame", sep = " ")
if(!tmp_cols[z] %in% names(df)){
stop(err)
}
})
}
}
invisible(sapply(1:length(general_metadata_cols), function(i){
check_fArgs_data_cols(general_metadata_cols[i], labeled_irbb)
}))
# Check that a data frame has each column in a vector of columns specified in the formal arguments
y <- general_metadata_cols[1]
# y <- irbb_expected_cols[1]
df <- labeled_irbb
glimpse(df)
y
# Catch column names that are named objects or character strings
errTest <- try({eval(base::as.symbol(y))}, silent = TRUE)
any(grepl("error", attributes(errTest)$class))
eval(y)
tmp_cols <- eval(y)
tmp_cols
eval(base::as.symbol(y))
eval(y)
class(eval(y))
tmp_cols
class(tmp_cols)
check_fArgs_data_cols <- function(y, df){
# Catch column names that are named objects or character strings
errTest <- try({eval(base::as.symbol(y))}, silent = TRUE)
if(any(grepl("error", attributes(errTest)$class))){
tmp_cols <- eval(y)
} else {
tmp_cols <- eval(base::as.symbol(y))
}
str(errTest)
str(attributes(errTest)$class)
# class(errTest)
# str(tmp_cols)
class(tmp_cols)
# eval(tmp_cols)
# str(length(tmp_cols))
if(length(tmp_cols) == 1){
if(any(grepl("error", attributes(errTest)$class))){
class(tmp_cols)
# err <- paste("The column", print(tmp_cols), "was not found in the data frame", sep = " ")
} else if(!any(grepl("error", attributes(errTest)$class))){
err <- paste("The column", tmp_cols, "was not found in the data frame", sep = " ")
}
if(!tmp_cols %in% names(df)){
stop(err)
}
} else if(length(tmp_cols) > 1){
sapply(1:length(tmp_cols), function(z){
err <- paste("The column", tmp_cols[z], "was not found in the data frame", sep = " ")
if(!tmp_cols[z] %in% names(df)){
stop(err)
}
})
}
}
invisible(sapply(1:length(general_metadata_cols), function(i){
check_fArgs_data_cols(general_metadata_cols[i], labeled_irbb)
}))
?eval
?paste
?y
check_fArgs_data_cols <- function(y, df){
# Catch column names that are named objects or character strings
errTest <- try({eval(base::as.symbol(y))}, silent = TRUE)
if(any(grepl("error", attributes(errTest)$class))){
tmp_cols <- eval(y)
} else {
tmp_cols <- eval(base::as.symbol(y))
}
str(errTest)
str(attributes(errTest)$class)
# class(errTest)
str(tmp_cols)
# class(tmp_cols)
# eval(tmp_cols)
# str(length(tmp_cols))
if(length(tmp_cols) == 1){
if(any(grepl("error", attributes(errTest)$class))){
class(tmp_cols) # this returns function(x) when I run the function inside another function and y is a character string (rather than a named object)
# err <- paste("The column", print(tmp_cols), "was not found in the data frame", sep = " ")
} else if(!any(grepl("error", attributes(errTest)$class))){
err <- paste("The column", tmp_cols, "was not found in the data frame", sep = " ")
}
if(!tmp_cols %in% names(df)){
stop(err)
}
} else if(length(tmp_cols) > 1){
sapply(1:length(tmp_cols), function(z){
err <- paste("The column", tmp_cols[z], "was not found in the data frame", sep = " ")
if(!tmp_cols[z] %in% names(df)){
stop(err)
}
})
}
}
invisible(sapply(1:length(general_metadata_cols), function(i){
check_fArgs_data_cols(general_metadata_cols[i], labeled_irbb)
}))
