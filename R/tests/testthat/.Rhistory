args <- list(
`PIT_tag_col_nm` = "PIT_tag_ID",
`rfid_label` = "RFID",
`camera_label` = "Video",
`video_metadata_col_nms` = c("total_pixels_motionTrigger", "pixel_threshold")
)
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/find_detectionClusters.R")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/utilities.R")
# i <- 1
invisible(lapply(1:length(arg_nms), function(i){
args[arg_nms[i]] <- list(NULL)
expect_error(
find_detectionClusters(file_nms = c("pre_processed_data_RFID.csv", "pre_processed_data_Video.csv"), threshold = 2, run_length = 1, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = args[["PIT_tag_col_nm"]], rfid_label = args[["rfid_label"]], camera_label = args[["camera_label"]], drop_tag = NULL, preproc_metadata_col_nms = c("thin_threshold_s", "data_stage", "date_pre_processed"), general_metadata_col_nms = c("chamber_id", "year", "month", "day"), video_metadata_col_nms = args[["video_metadata_col_nms"]], path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "detection_clusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS"),
regexp = paste("Expected a non-NULL value but the argument", arg_nms[i], "is NULL", sep = " ")
)
}))
# When using Video data, the following arguments cannot be NULL:
arg_nms <- c("PIT_tag_col_nm", "rfid_label", "camera_label", "video_metadata_col_nms")
args <- list(
`PIT_tag_col_nm` = "PIT_tag_ID",
`rfid_label` = "RFID",
`camera_label` = "Video",
`video_metadata_col_nms` = c("total_pixels_motionTrigger", "pixel_threshold")
)
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/find_detectionClusters.R")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/utilities.R")
i <- 1
expect_error(
find_detectionClusters(file_nms = c("pre_processed_data_RFID.csv", "pre_processed_data_Video.csv"), threshold = 2, run_length = 1, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = args[["PIT_tag_col_nm"]], rfid_label = args[["rfid_label"]], camera_label = args[["camera_label"]], drop_tag = NULL, preproc_metadata_col_nms = c("thin_threshold_s", "data_stage", "date_pre_processed"), general_metadata_col_nms = c("chamber_id", "year", "month", "day"), video_metadata_col_nms = args[["video_metadata_col_nms"]], path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "detection_clusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS"),
regexp = paste("Expected a non-NULL value but the argument", arg_nms[i], "is NULL", sep = " ")
)
# When using Video data, the following arguments cannot be NULL:
arg_nms <- c("PIT_tag_col_nm", "rfid_label", "camera_label", "video_metadata_col_nms")
args <- list(
`PIT_tag_col_nm` = "PIT_tag_ID",
`rfid_label` = "RFID",
`camera_label` = "Video",
`video_metadata_col_nms` = c("total_pixels_motionTrigger", "pixel_threshold")
)
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/find_detectionClusters.R")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/utilities.R")
i <- 1
args[arg_nms[i]] <- list(NULL)
expect_error(
find_detectionClusters(file_nms = c("pre_processed_data_RFID.csv", "pre_processed_data_Video.csv"), threshold = 2, run_length = 1, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = args[["PIT_tag_col_nm"]], rfid_label = args[["rfid_label"]], camera_label = args[["camera_label"]], drop_tag = NULL, preproc_metadata_col_nms = c("thin_threshold_s", "data_stage", "date_pre_processed"), general_metadata_col_nms = c("chamber_id", "year", "month", "day"), video_metadata_col_nms = args[["video_metadata_col_nms"]], path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "detection_clusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS"),
regexp = paste("Expected a non-NULL value but the argument", arg_nms[i], "is NULL", sep = " ")
)
find_detectionClusters(file_nms = c("pre_processed_data_RFID.csv", "pre_processed_data_Video.csv"), threshold = 2, run_length = 1, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = args[["PIT_tag_col_nm"]], rfid_label = args[["rfid_label"]], camera_label = args[["camera_label"]], drop_tag = NULL, preproc_metadata_col_nms = c("thin_threshold_s", "data_stage", "date_pre_processed"), general_metadata_col_nms = c("chamber_id", "year", "month", "day"), video_metadata_col_nms = args[["video_metadata_col_nms"]], path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "detection_clusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
# Check that the formal arguments that should be NULL under certain conditions are NULL given the current user-specified arguments
file_nms = c("pre_processed_data_RFID.csv", "pre_processed_data_Video.csv")
any(grepl("RFID", file_nms) | grepl("IRBB", file_nms)) & all(!grepl("Video", file_nms))
?exists
# When using Video data, the following arguments cannot be NULL:
arg_nms <- c("PIT_tag_col_nm", "rfid_label", "camera_label", "video_metadata_col_nms")
args <- list(
`PIT_tag_col_nm` = "PIT_tag_ID",
`rfid_label` = "RFID",
`camera_label` = "Video",
`video_metadata_col_nms` = c("total_pixels_motionTrigger", "pixel_threshold")
)
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/find_detectionClusters.R")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/utilities.R")
i <- 1
args[arg_nms[i]] <- list(NULL)
find_detectionClusters(file_nms = c("pre_processed_data_RFID.csv", "pre_processed_data_Video.csv"), threshold = 2, run_length = 1, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = args[["PIT_tag_col_nm"]], rfid_label = args[["rfid_label"]], camera_label = args[["camera_label"]], drop_tag = NULL, preproc_metadata_col_nms = c("thin_threshold_s", "data_stage", "date_pre_processed"), general_metadata_col_nms = c("chamber_id", "year", "month", "day"), video_metadata_col_nms = args[["video_metadata_col_nms"]], path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "detection_clusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
arg_nms <- c("PIT_tag_col_nm", "rfid_label", "camera_label", "video_metadata_col_nms")
args <- list(
`PIT_tag_col_nm` = "PIT_tag_ID",
`rfid_label` = "RFID",
`camera_label` = "Video",
`video_metadata_col_nms` = c("total_pixels_motionTrigger", "pixel_threshold")
)
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/find_detectionClusters.R")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/utilities.R")
i <- 1
args[arg_nms[i]] <- list(NULL)
find_detectionClusters(file_nms = c("pre_processed_data_RFID.csv", "pre_processed_data_Video.csv"), threshold = 2, run_length = 1, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = args[["PIT_tag_col_nm"]], rfid_label = args[["rfid_label"]], camera_label = args[["camera_label"]], drop_tag = NULL, preproc_metadata_col_nms = c("thin_threshold_s", "data_stage", "date_pre_processed"), general_metadata_col_nms = c("chamber_id", "year", "month", "day"), video_metadata_col_nms = args[["video_metadata_col_nms"]], path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "detection_clusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
args <- list(
`PIT_tag_col_nm` = "PIT_tag_ID",
`rfid_label` = "RFID",
`camera_label` = "Video",
`video_metadata_col_nms` = c("total_pixels_motionTrigger", "pixel_threshold")
)
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/find_detectionClusters.R")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/utilities.R")
i <- 1
args[arg_nms[i]] <- list(NULL)
find_detectionClusters(file_nms = c("pre_processed_data_RFID.csv", "pre_processed_data_Video.csv"), threshold = 2, run_length = 1, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = args[["PIT_tag_col_nm"]], rfid_label = args[["rfid_label"]], camera_label = args[["camera_label"]], drop_tag = NULL, preproc_metadata_col_nms = c("thin_threshold_s", "data_stage", "date_pre_processed"), general_metadata_col_nms = c("chamber_id", "year", "month", "day"), video_metadata_col_nms = args[["video_metadata_col_nms"]], path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "detection_clusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
?expect_null
# When using Video data, the following arguments cannot be NULL:
arg_nms <- c("PIT_tag_col_nm", "rfid_label", "camera_label", "video_metadata_col_nms")
args <- list(
`PIT_tag_col_nm` = "PIT_tag_ID",
`rfid_label` = "RFID",
`camera_label` = "Video",
`video_metadata_col_nms` = c("total_pixels_motionTrigger", "pixel_threshold")
)
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/find_detectionClusters.R")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/utilities.R")
i <- 1
args[arg_nms[i]] <- list(NULL)
find_detectionClusters(file_nms = c("pre_processed_data_RFID.csv", "pre_processed_data_Video.csv"), threshold = 2, run_length = 1, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = args[["PIT_tag_col_nm"]], rfid_label = args[["rfid_label"]], camera_label = args[["camera_label"]], drop_tag = NULL, preproc_metadata_col_nms = c("thin_threshold_s", "data_stage", "date_pre_processed"), general_metadata_col_nms = c("chamber_id", "year", "month", "day"), video_metadata_col_nms = args[["video_metadata_col_nms"]], path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "detection_clusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
# When using Video data, the following arguments cannot be NULL:
arg_nms <- c("PIT_tag_col_nm", "rfid_label", "camera_label", "video_metadata_col_nms")
args <- list(
`PIT_tag_col_nm` = "PIT_tag_ID",
`rfid_label` = "RFID",
`camera_label` = "Video",
`video_metadata_col_nms` = c("total_pixels_motionTrigger", "pixel_threshold")
)
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/find_detectionClusters.R")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/utilities.R")
i <- 1
invisible(lapply(1:length(arg_nms), function(i){
args[arg_nms[i]] <- list(NULL)
expect_error(
find_detectionClusters(file_nms = c("pre_processed_data_RFID.csv", "pre_processed_data_Video.csv"), threshold = 2, run_length = 1, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = args[["PIT_tag_col_nm"]], rfid_label = args[["rfid_label"]], camera_label = args[["camera_label"]], drop_tag = NULL, preproc_metadata_col_nms = c("thin_threshold_s", "data_stage", "date_pre_processed"), general_metadata_col_nms = c("chamber_id", "year", "month", "day"), video_metadata_col_nms = args[["video_metadata_col_nms"]], path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "detection_clusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS"),
regexp = paste("Expected a non-NULL value but the argument", arg_nms[i], "is NULL", sep = " ")
)
}))
tmp_path == file.path(path, data_dir)
# Remove the temporary directory and all files within it
if(tmp_path == file.path(path, data_dir)){
unlink(tmp_path, recursive = TRUE)
}
test_that("the function catches when the input file names do not contain the patterns 'RFID', 'IRBB', or 'Video'", {
# Avoid library calls and other changes to the virtual environment
# See https://r-pkgs.org/testing-design.html
withr::local_package("tidyverse")
withr::local_package("plyr")
withr::local_package("dplyr")
withr::local_package("lubridate")
# Just for code development
# library(tidyverse)
# library(lubridate)
# library(testthat)
# Create a temporary directory for testing. Files will be written and read here
path <- "/home/gsvidaurre/Desktop"
data_dir <- "tmp_tests"
tmp_path <- file.path(path, data_dir)
if(!dir.exists(tmp_path)){
dir.create(tmp_path)
}
# Create the input data directory that the function expects
if(!dir.exists(file.path(tmp_path, "processed"))){
dir.create(file.path(tmp_path, "processed"))
}
# Generate a file with pre-processed timestamps for one sensor
# Create 4 clusters of detections: each cluster consists of 2 detections spaced 1 second apart
starts <- as.POSIXct(c(
"2023-01-01 01:00:00 EST",
"2023-01-01 02:00:00 EST",
"2023-01-01 01:05:00 EST",
"2023-01-01 02:05:00 EST"
))
ends <- starts + 1
# Write out a spreadsheet with these timestamps that will be used as input data for the function
sim_ts <- data.frame(timestamp_ms = c(starts, ends)) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(timestamp_ms),
month = month(timestamp_ms),
day = day(timestamp_ms),
sensor_id = "RFID",
PIT_tag_ID = "test",
thin_threshold_s = 1,
data_stage = "pre-processing",
date_pre_processed = Sys.Date()
)
write.csv(sim_ts, file.path(tmp_path, "processed", "pre_processed_data_RFID.csv"), row.names = FALSE)
write.csv(sim_ts, file.path(tmp_path, "processed", "pre_processed_data_IRBB.csv"), row.names = FALSE)
write.csv(sim_ts, file.path(tmp_path, "processed", "pre_processed_data_Video.csv"), row.names = FALSE)
expect_error(
find_detectionClusters(file_nms = "pre_processed_data_RFD.csv", threshold = 2, run_length = 1, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = "PIT_tag_ID", rfid_label = "RFID", camera_label = NULL, drop_tag = NULL, preproc_metadata_col_nms = c("thin_threshold_s", "data_stage", "date_pre_processed"), general_metadata_col_nms = c("chamber_id", "year", "month", "day"), video_metadata_col_nms = NULL, path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "detection_clusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS"),
regexp = "The input file name does not contain the correct sensor suffix"
)
expect_error(
find_detectionClusters(file_nms = c("pre_processed_data_RFID.csv", "pre_processed_data_irbb.csv", "pre_processed_data_Video.csv"), threshold = 2, run_length = 1, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = "PIT_tag_ID", rfid_label = "RFID", camera_label = NULL, drop_tag = NULL, preproc_metadata_col_nms = c("thin_threshold_s", "data_stage", "date_pre_processed"), general_metadata_col_nms = c("chamber_id", "year", "month", "day"), video_metadata_col_nms = NULL, path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "detection_clusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS"),
regexp = "The input file name does not contain the correct sensor suffix"
)
expect_error(
find_detectionClusters(file_nms = c("pre_processed_data_RFID.csv", "pre_processed_data_IRBB.csv", "pre_processed_data_NO.csv"), threshold = 2, run_length = 1, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = "PIT_tag_ID", rfid_label = "RFID", camera_label = NULL, drop_tag = NULL, preproc_metadata_col_nms = c("thin_threshold_s", "data_stage", "date_pre_processed"), general_metadata_col_nms = c("chamber_id", "year", "month", "day"), video_metadata_col_nms = NULL, path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "detection_clusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS"),
regexp = "The input file name does not contain the correct sensor suffix"
)
# Remove the temporary directory and all files within it
if(tmp_path == file.path(path, data_dir)){
unlink(tmp_path, recursive = TRUE)
}
})
test_that("the function catches when non-NULL arguments are NULL", {
# Avoid library calls and other changes to the virtual environment
# See https://r-pkgs.org/testing-design.html
withr::local_package("tidyverse")
withr::local_package("dplyr")
withr::local_package("lubridate")
withr::local_package("tidyquant")
# Just for code development
# library(tidyverse)
# library(lubridate)
# library(testthat)
# Create a temporary directory for testing. Files will be written and read here
path <- "/home/gsvidaurre/Desktop"
data_dir <- "tmp_tests"
tmp_path <- file.path(path, data_dir)
if(!dir.exists(tmp_path)){
dir.create(tmp_path)
}
# Create the input data directory that the function expects
if(!dir.exists(file.path(tmp_path, "processed"))){
dir.create(file.path(tmp_path, "processed"))
}
# Generate a file with pre-processed timestamps for one sensor
# Create 4 clusters of detections: each cluster consists of 2 detections spaced 1 second apart
starts <- as.POSIXct(c(
"2023-01-01 01:00:00 EST",
"2023-01-01 02:00:00 EST",
"2023-01-01 01:05:00 EST",
"2023-01-01 02:05:00 EST"
))
ends <- starts + 1
# Write out a spreadsheet with these timestamps that will be used as input data for the function
sim_ts <- data.frame(timestamp_ms = c(starts, ends)) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(timestamp_ms),
month = month(timestamp_ms),
day = day(timestamp_ms),
sensor_id = "RFID",
PIT_tag_ID = "test",
thin_threshold_s = 1,
data_stage = "pre-processing",
date_pre_processed = Sys.Date()
)
write.csv(sim_ts, file.path(tmp_path, "processed", "pre_processed_data_RFID.csv"), row.names = FALSE)
# General arguments that cannot ever be NULL:
arg_nms <- c("file_nms", "threshold", "run_length", "sensor_id_col_nm", "timestamps_col_nm", "preproc_metadata_col_nms", "general_metadata_col_nms", "path", "data_dir", "out_dir", "out_file_nm", "tz", "POSIXct_format")
args <- list(
`file_nms` = "pre_processed_data_RFID.csv",
`threshold` = 2,
`run_length` = 1,
`sensor_id_col_nm` = "sensor_id",
`timestamps_col_nm` = "timestamp_ms",
`preproc_metadata_col_nms` = c("thin_threshold_s", "data_stage", "date_pre_processed"),
`general_metadata_col_nms` = c("chamber_id", "sensor_id"),
`path` = path,
`data_dir` = file.path(data_dir, "processed"),
`out_dir` = file.path(data_dir, "processed"),
`out_file_nm` = "detection_clusters.csv",
`tz` = "America/New York",
`POSIXct_format` = "%Y-%m-%d %H:%M:%OS"
)
invisible(lapply(1:length(arg_nms), function(i){
args[arg_nms[i]] <- list(NULL)
expect_error(
find_detectionClusters(file_nms = args[["file_nms"]], threshold = args[["threshold"]], run_length = args[["run_length"]], sensor_id_col_nm = args[["sensor_id_col_nm"]], timestamps_col_nm = args[["timestamps_col_nm"]], PIT_tag_col_nm = "PIT_tag_ID", rfid_label = "RFID", camera_label = NULL, drop_tag = NULL, preproc_metadata_col_nms = args[["preproc_metadata_col_nms"]], general_metadata_col_nms = args[["general_metadata_col_nms"]], video_metadata_col_nms = NULL, path = args[["path"]], data_dir = args[["data_dir"]], out_dir = args[["out_dir"]], out_file_nm = args[["out_file_nm"]], tz = args[["tz"]], POSIXct_format = args[["POSIXct_format"]]),
regexp = paste("Expected a non-NULL value but the argument", arg_nms[i], "is NULL", sep = " ")
)
}))
# Arguments that cannot be NULL depending on which sensor is specified:
# When using RFID data, the following arguments cannot be NULL:
arg_nms <- c("PIT_tag_col_nm", "rfid_label")
args <- list(
`PIT_tag_col_nm` = "PIT_tag_ID",
`rfid_label` = "RFID"
)
invisible(lapply(1:length(arg_nms), function(i){
args[arg_nms[i]] <- list(NULL)
expect_error(
find_detectionClusters(file_nms = "pre_processed_data_RFID.csv", threshold = 2, run_length = 1, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = args[["PIT_tag_col_nm"]], rfid_label = args[["rfid_label"]], camera_label = NULL, drop_tag = NULL, preproc_metadata_col_nms = c("thin_threshold_s", "data_stage", "date_pre_processed"), general_metadata_col_nms = c("chamber_id", "year", "month", "day"), video_metadata_col_nms = NULL, path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "detection_clusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS"),
regexp = paste("Expected a non-NULL value but the argument", arg_nms[i], "is NULL", sep = " ")
)
}))
# When using Video data, the following arguments cannot be NULL:
write.csv(sim_ts, file.path(tmp_path, "processed", "pre_processed_data_Video.csv"), row.names = FALSE)
arg_nms <- c("camera_label", "video_metadata_col_nms")
args <- list(
`camera_label` = "Video",
`video_metadata_col_nms` = c("total_pixels_motionTrigger", "pixel_threshold")
)
invisible(lapply(1:length(arg_nms), function(i){
args[arg_nms[i]] <- list(NULL)
expect_error(
find_detectionClusters(file_nms = "pre_processed_data_Video.csv", threshold = 2, run_length = 1, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = NULL, rfid_label = NULL, camera_label = args[["camera_label"]], drop_tag = NULL, preproc_metadata_col_nms = c("thin_threshold_s", "data_stage", "date_pre_processed"), general_metadata_col_nms = c("chamber_id", "year", "month", "day"), video_metadata_col_nms = args[["video_metadata_col_nms"]], path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "detection_clusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS"),
regexp = paste("Expected a non-NULL value but the argument", arg_nms[i], "is NULL", sep = " ")
)
}))
# When using RFID and Video data, the following arguments cannot be NULL:
arg_nms <- c("PIT_tag_col_nm", "rfid_label", "camera_label", "video_metadata_col_nms")
args <- list(
`PIT_tag_col_nm` = "PIT_tag_ID",
`rfid_label` = "RFID",
`camera_label` = "Video",
`video_metadata_col_nms` = c("total_pixels_motionTrigger", "pixel_threshold")
)
invisible(lapply(1:length(arg_nms), function(i){
args[arg_nms[i]] <- list(NULL)
expect_error(
find_detectionClusters(file_nms = c("pre_processed_data_RFID.csv", "pre_processed_data_Video.csv"), threshold = 2, run_length = 1, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = args[["PIT_tag_col_nm"]], rfid_label = args[["rfid_label"]], camera_label = args[["camera_label"]], drop_tag = NULL, preproc_metadata_col_nms = c("thin_threshold_s", "data_stage", "date_pre_processed"), general_metadata_col_nms = c("chamber_id", "year", "month", "day"), video_metadata_col_nms = args[["video_metadata_col_nms"]], path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "detection_clusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS"),
regexp = paste("Expected a non-NULL value but the argument", arg_nms[i], "is NULL", sep = " ")
)
}))
# Remove the temporary directory and all files within it
if(tmp_path == file.path(path, data_dir)){
unlink(tmp_path, recursive = TRUE)
}
})
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/find_detectionClusters.R")
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/utilities.R")
test_that("the function catches when non-NULL arguments are NULL", {
# Avoid library calls and other changes to the virtual environment
# See https://r-pkgs.org/testing-design.html
withr::local_package("tidyverse")
withr::local_package("dplyr")
withr::local_package("lubridate")
withr::local_package("tidyquant")
# Just for code development
# library(tidyverse)
# library(lubridate)
# library(testthat)
# Create a temporary directory for testing. Files will be written and read here
path <- "/home/gsvidaurre/Desktop"
data_dir <- "tmp_tests"
tmp_path <- file.path(path, data_dir)
if(!dir.exists(tmp_path)){
dir.create(tmp_path)
}
# Create the input data directory that the function expects
if(!dir.exists(file.path(tmp_path, "processed"))){
dir.create(file.path(tmp_path, "processed"))
}
# Generate a file with pre-processed timestamps for one sensor
# Create 4 clusters of detections: each cluster consists of 2 detections spaced 1 second apart
starts <- as.POSIXct(c(
"2023-01-01 01:00:00 EST",
"2023-01-01 02:00:00 EST",
"2023-01-01 01:05:00 EST",
"2023-01-01 02:05:00 EST"
))
ends <- starts + 1
# Write out a spreadsheet with these timestamps that will be used as input data for the function
sim_ts <- data.frame(timestamp_ms = c(starts, ends)) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(timestamp_ms),
month = month(timestamp_ms),
day = day(timestamp_ms),
sensor_id = "RFID",
PIT_tag_ID = "test",
thin_threshold_s = 1,
data_stage = "pre-processing",
date_pre_processed = Sys.Date()
)
write.csv(sim_ts, file.path(tmp_path, "processed", "pre_processed_data_RFID.csv"), row.names = FALSE)
# General arguments that cannot ever be NULL:
arg_nms <- c("file_nms", "threshold", "run_length", "sensor_id_col_nm", "timestamps_col_nm", "preproc_metadata_col_nms", "general_metadata_col_nms", "path", "data_dir", "out_dir", "out_file_nm", "tz", "POSIXct_format")
args <- list(
`file_nms` = "pre_processed_data_RFID.csv",
`threshold` = 2,
`run_length` = 1,
`sensor_id_col_nm` = "sensor_id",
`timestamps_col_nm` = "timestamp_ms",
`preproc_metadata_col_nms` = c("thin_threshold_s", "data_stage", "date_pre_processed"),
`general_metadata_col_nms` = c("chamber_id", "sensor_id"),
`path` = path,
`data_dir` = file.path(data_dir, "processed"),
`out_dir` = file.path(data_dir, "processed"),
`out_file_nm` = "detection_clusters.csv",
`tz` = "America/New York",
`POSIXct_format` = "%Y-%m-%d %H:%M:%OS"
)
invisible(lapply(1:length(arg_nms), function(i){
args[arg_nms[i]] <- list(NULL)
expect_error(
find_detectionClusters(file_nms = args[["file_nms"]], threshold = args[["threshold"]], run_length = args[["run_length"]], sensor_id_col_nm = args[["sensor_id_col_nm"]], timestamps_col_nm = args[["timestamps_col_nm"]], PIT_tag_col_nm = "PIT_tag_ID", rfid_label = "RFID", camera_label = NULL, drop_tag = NULL, preproc_metadata_col_nms = args[["preproc_metadata_col_nms"]], general_metadata_col_nms = args[["general_metadata_col_nms"]], video_metadata_col_nms = NULL, path = args[["path"]], data_dir = args[["data_dir"]], out_dir = args[["out_dir"]], out_file_nm = args[["out_file_nm"]], tz = args[["tz"]], POSIXct_format = args[["POSIXct_format"]]),
regexp = paste("Expected a non-NULL value but the argument", arg_nms[i], "is NULL", sep = " ")
)
}))
# Arguments that cannot be NULL depending on which sensor is specified:
# When using RFID data, the following arguments cannot be NULL:
arg_nms <- c("PIT_tag_col_nm", "rfid_label")
args <- list(
`PIT_tag_col_nm` = "PIT_tag_ID",
`rfid_label` = "RFID"
)
invisible(lapply(1:length(arg_nms), function(i){
args[arg_nms[i]] <- list(NULL)
expect_error(
find_detectionClusters(file_nms = "pre_processed_data_RFID.csv", threshold = 2, run_length = 1, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = args[["PIT_tag_col_nm"]], rfid_label = args[["rfid_label"]], camera_label = NULL, drop_tag = NULL, preproc_metadata_col_nms = c("thin_threshold_s", "data_stage", "date_pre_processed"), general_metadata_col_nms = c("chamber_id", "year", "month", "day"), video_metadata_col_nms = NULL, path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "detection_clusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS"),
regexp = paste("Expected a non-NULL value but the argument", arg_nms[i], "is NULL", sep = " ")
)
}))
# When using Video data, the following arguments cannot be NULL:
write.csv(sim_ts, file.path(tmp_path, "processed", "pre_processed_data_Video.csv"), row.names = FALSE)
arg_nms <- c("camera_label", "video_metadata_col_nms")
args <- list(
`camera_label` = "Video",
`video_metadata_col_nms` = c("total_pixels_motionTrigger", "pixel_threshold")
)
invisible(lapply(1:length(arg_nms), function(i){
args[arg_nms[i]] <- list(NULL)
expect_error(
find_detectionClusters(file_nms = "pre_processed_data_Video.csv", threshold = 2, run_length = 1, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = NULL, rfid_label = NULL, camera_label = args[["camera_label"]], drop_tag = NULL, preproc_metadata_col_nms = c("thin_threshold_s", "data_stage", "date_pre_processed"), general_metadata_col_nms = c("chamber_id", "year", "month", "day"), video_metadata_col_nms = args[["video_metadata_col_nms"]], path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "detection_clusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS"),
regexp = paste("Expected a non-NULL value but the argument", arg_nms[i], "is NULL", sep = " ")
)
}))
# When using RFID and Video data, the following arguments cannot be NULL:
arg_nms <- c("PIT_tag_col_nm", "rfid_label", "camera_label", "video_metadata_col_nms")
args <- list(
`PIT_tag_col_nm` = "PIT_tag_ID",
`rfid_label` = "RFID",
`camera_label` = "Video",
`video_metadata_col_nms` = c("total_pixels_motionTrigger", "pixel_threshold")
)
invisible(lapply(1:length(arg_nms), function(i){
args[arg_nms[i]] <- list(NULL)
expect_error(
find_detectionClusters(file_nms = c("pre_processed_data_RFID.csv", "pre_processed_data_Video.csv"), threshold = 2, run_length = 1, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = args[["PIT_tag_col_nm"]], rfid_label = args[["rfid_label"]], camera_label = args[["camera_label"]], drop_tag = NULL, preproc_metadata_col_nms = c("thin_threshold_s", "data_stage", "date_pre_processed"), general_metadata_col_nms = c("chamber_id", "year", "month", "day"), video_metadata_col_nms = args[["video_metadata_col_nms"]], path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "detection_clusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS"),
regexp = paste("Expected a non-NULL value but the argument", arg_nms[i], "is NULL", sep = " ")
)
}))
# Remove the temporary directory and all files within it
if(tmp_path == file.path(path, data_dir)){
unlink(tmp_path, recursive = TRUE)
}
})
# When using RFID data, the following arguments should be NULL:
arg_nms <- c("camera_label", "video_metadata_col_nms")
args <- list(
`camera_label` = "Video",
`video_metadata_col_nms` = c("total_pixels_motiontrigger", "pixel_threshold")
)
invisible(lapply(1:length(arg_nms), function(i){
args[arg_nms[i]] <- list(NULL)
expect_error(
find_detectionClusters(file_nms = "pre_processed_data_RFID.csv", threshold = 2, run_length = 1, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = "PIT_tag_ID", rfid_label = "RFID", camera_label = args[["camera_label"]], drop_tag = NULL, preproc_metadata_col_nms = c("thin_threshold_s", "data_stage", "date_pre_processed"), general_metadata_col_nms = c("chamber_id", "year", "month", "day"), video_metadata_col_nms = args[["video_metadata_col_nms"]], path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "detection_clusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS"),
regexp = paste("Expected a non-NULL value but the argument", arg_nms[i], "is NULL", sep = " ")
)
}))
expect_error(
find_detectionClusters(file_nms = "pre_processed_data_RFID.csv", threshold = 2, run_length = 1, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = "PIT_tag_ID", rfid_label = "RFID", camera_label = args[["camera_label"]], drop_tag = NULL, preproc_metadata_col_nms = c("thin_threshold_s", "data_stage", "date_pre_processed"), general_metadata_col_nms = c("chamber_id", "year", "month", "day"), video_metadata_col_nms = args[["video_metadata_col_nms"]], path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "detection_clusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS"),
regexp = paste("Expected a NULL value but the argument", arg_nms[i], "is not NULL", sep = " ")
)
# When using RFID data, the following arguments should be NULL:
arg_nms <- c("camera_label", "video_metadata_col_nms")
args <- list(
`camera_label` = "Video",
`video_metadata_col_nms` = c("total_pixels_motiontrigger", "pixel_threshold")
)
invisible(lapply(1:length(arg_nms), function(i){
args[arg_nms[i]] <- list(NULL)
expect_error(
find_detectionClusters(file_nms = "pre_processed_data_RFID.csv", threshold = 2, run_length = 1, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = "PIT_tag_ID", rfid_label = "RFID", camera_label = args[["camera_label"]], drop_tag = NULL, preproc_metadata_col_nms = c("thin_threshold_s", "data_stage", "date_pre_processed"), general_metadata_col_nms = c("chamber_id", "year", "month", "day"), video_metadata_col_nms = args[["video_metadata_col_nms"]], path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "detection_clusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS"),
regexp = paste("Expected a NULL value but the argument", arg_nms[i], "is not NULL", sep = " ")
)
}))
# When using RFID data, the following arguments should be NULL:
arg_nms <- c("camera_label", "video_metadata_col_nms")
args <- list(
`camera_label` = "Video",
`video_metadata_col_nms` = c("total_pixels_motiontrigger", "pixel_threshold")
)
i <- 2
args[arg_nms[i]] <- list(NULL)
expect_error(
find_detectionClusters(file_nms = "pre_processed_data_RFID.csv", threshold = 2, run_length = 1, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = "PIT_tag_ID", rfid_label = "RFID", camera_label = args[["camera_label"]], drop_tag = NULL, preproc_metadata_col_nms = c("thin_threshold_s", "data_stage", "date_pre_processed"), general_metadata_col_nms = c("chamber_id", "year", "month", "day"), video_metadata_col_nms = args[["video_metadata_col_nms"]], path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "detection_clusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS"),
regexp = paste("Expected a NULL value but the argument", arg_nms[i], "is not NULL", sep = " ")
)
# When using RFID data, the following arguments should be NULL:
arg_nms <- c("camera_label", "video_metadata_col_nms")
args <- list(
`camera_label` = "Video",
`video_metadata_col_nms` = c("total_pixels_motiontrigger", "pixel_threshold")
)
i <- 2
args[arg_nms[i]] <- list(NULL)
args
# When using RFID data, the following arguments should be NULL:
arg_nms <- c("camera_label", "video_metadata_col_nms")
args <- list(
`camera_label` = NULL,
`video_metadata_col_nms` = NULL
)
# i <- 2
invisible(lapply(1:length(arg_nms), function(i){
args[arg_nms[i]] <- "test"
find_detectionClusters(file_nms = "pre_processed_data_RFID.csv", threshold = 2, run_length = 1, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = "PIT_tag_ID", rfid_label = "RFID", camera_label = args[["camera_label"]], drop_tag = NULL, preproc_metadata_col_nms = c("thin_threshold_s", "data_stage", "date_pre_processed"), general_metadata_col_nms = c("chamber_id", "year", "month", "day"), video_metadata_col_nms = args[["video_metadata_col_nms"]], path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "detection_clusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
expect_error(
,
regexp = paste("Expected a NULL value but the argument", arg_nms[i], "is not NULL", sep = " ")
)
}))
# When using RFID data, the following arguments should be NULL:
arg_nms <- c("camera_label", "video_metadata_col_nms")
args <- list(
`camera_label` = NULL,
`video_metadata_col_nms` = NULL
)
# i <- 2
invisible(lapply(1:length(arg_nms), function(i){
args[arg_nms[i]] <- "test"
expect_error(
find_detectionClusters(file_nms = "pre_processed_data_RFID.csv", threshold = 2, run_length = 1, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = "PIT_tag_ID", rfid_label = "RFID", camera_label = args[["camera_label"]], drop_tag = NULL, preproc_metadata_col_nms = c("thin_threshold_s", "data_stage", "date_pre_processed"), general_metadata_col_nms = c("chamber_id", "year", "month", "day"), video_metadata_col_nms = args[["video_metadata_col_nms"]], path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "detection_clusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS"),
regexp = paste("Expected a NULL value but the argument", arg_nms[i], "is not NULL", sep = " ")
)
}))
# When using Video data, the following arguments should be NULL:
arg_nms <- c("PIT_tag_col_nm", "rfid_label", "drop_tag")
args <- list(
`PIT_tag_col_nm` = NULL,
`rfid_label` = NULL,
`drop_tag` = NUL
)
