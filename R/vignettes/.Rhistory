files
length(files)
# The argument X is an iterating variable, or the number of times that the loop will run. In this case, X is a numeric vector from 1 to the length of the files vector and contains the numbers 1 and 2. The loop will run twice, and each value in X will be used per iteration of the loop to write out one file at a time
# The argument FUN is a custom function, written using the function(x){} notation. All of the code inside of the curly brackets {} will be run for each iteration of the loop. The argument x inside of the function() call is the iterating variable, or the variable that will take on a different value in each iteration of the loop
lapply(X = 1:length(files), FUN = function(x){
x
})
# In this loop, the iterating variable x will take on each value in the vector supplied to the X argument. This means that in the first loop iteration, x will take on the numeric value 1. In the second loop iteration, x will hold the numeric value 2. To test that this is true, you can run the loop below, which will print the value of x per iteration to the console
lapply(X = 1:length(files), FUN = function(x){
x
})
x
# In this loop, the iterating variable x will take on each value in the vector supplied to the X argument. This means that in the first loop iteration, x will take on the numeric value 1. In the second loop iteration, x will hold the numeric value 2. To test that this is true, you can run the loop below, which will print the value of x per iteration to the console
lapply(X = 1:length(files), FUN = function(mmmm){
mmm
})
# In this loop, the iterating variable x will take on each value in the vector supplied to the X argument. This means that in the first loop iteration, x will take on the numeric value 1. In the second loop iteration, x will hold the numeric value 2. To test that this is true, you can run the loop below, which will print the value of x per iteration to the console
lapply(X = 1:length(files), FUN = function(m){
m
})
# In this loop, the iterating variable x will take on each value in the vector supplied to the X argument. This means that in the first loop iteration, x will take on the numeric value 1. In the second loop iteration, x will hold the numeric value 2. To test that this is true, you can run the loop below, which will print the value of x per iteration to the console
lapply(X = 1:length(files), FUN = function(pm){
pm
})
# In this loop, the iterating variable x will take on each value in the vector supplied to the X argument. This means that in the first loop iteration, x will take on the numeric value 1. In the second loop iteration, x will hold the numeric value 2. To test that this is true, you can run the loop below, which will print the value of x per iteration to the console
lapply(X = 1:length(files), FUN = function(pmm){
pmm
})
# In this loop, the iterating variable x will take on each value in the vector supplied to the X argument. This means that in the first loop iteration, x will take on the numeric value 1. In the second loop iteration, x will hold the numeric value 2. To test that this is true, you can run the loop below, which will print the value of x per iteration to the console
lapply(X = 1:length(files), FUN = function(mmm){
mmm
})
?function
class(function)
function()
?make.names
# In this loop, the iterating variable x will take on each value in the vector supplied to the X argument. This means that in the first loop iteration, x will take on the numeric value 1. In the second loop iteration, x will hold the numeric value 2. To test that this is true, you can run the loop below, which will print the value of x per iteration to the console
lapply(X = 1:length(files), FUN = function(pm2){
pm2
})
# In this loop, the iterating variable x will take on each value in the vector supplied to the X argument. This means that in the first loop iteration, x will take on the numeric value 1. In the second loop iteration, x will hold the numeric value 2. To test that this is true, you can run the loop below, which will print the value of x per iteration to the console
lapply(X = 1:length(files), FUN = function(x){
x
})
# In this loop, the iterating variable x will take on each value in the vector supplied to the X argument. This means that in the first loop iteration, x will take on the numeric value 1. In the second loop iteration, x will hold the numeric value 2. To test that this is true, you can run the loop below, which will print the value of x per iteration to the console
lapply(X = 1:length(files), FUN = function(x_x){
x_x
})
# In this loop, the iterating variable x will take on each value in the vector supplied to the X argument. This means that in the first loop iteration, x will take on the numeric value 1. In the second loop iteration, x will hold the numeric value 2. To test that this is true, you can run the loop below, which will print the value of x per iteration to the console
lapply(X = 1:length(files), FUN = function(2x){
lapply(X = 1:length(files), FUN = function(x){
files[x]
})
lapply(X = 1:length(files), FUN = function(x){
sim_dats_rfid %>%
write.csv(file = files[x], row.names = FALSE)
})
list.files(file.path(path, "RFID"))
# Pull out one day at a time
days[x]
days <- c(1, 2)
lapply(X = 1:length(files), FUN = function(x){
sim_dats_rfid %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days[x])
write.csv(file = files[x], row.names = FALSE)
})
sim_dats_rfid %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days[x]) %>%
write.csv(file = files[x], row.names = FALSE)
days <- c(1, 2)
lapply(X = 1:length(files), FUN = function(x){
sim_dats_rfid %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days[x]) %>%
write.csv(file = files[x], row.names = FALSE)
})
# Make a vector of the files to write out
files <- c("RFID_simulated_Pair-01_2023_08_01.csv", "RFID_simulated_Pair-01_2023_08_02.csv")
files
length(files)
files <- file.path(path, "RFID", files)
files
# Make a vector of the custom file names to write out
files <- c("RFID_simulated_Pair-01_2023_08_01.csv", "RFID_simulated_Pair-01_2023_08_02.csv")
# Add the file path for the correct directory
files <- file.path(path, "RFID", files)
files
list.files(file.path(path, "RFID"))
rem_files <- list.files(file.path(path, "RFID"), pattern = "^test")
rem_files <- list.files(file.path(path, "RFID"), pattern = "^test")
rem_files
rem_files <- list.files(file.path(path, "RFID"), pattern = "^test")
rem_files
rem_files <- list.files(file.path(path, "RFID"), pattern = "^test", full.names = TRUE)
rem_files
rem_files <- list.files(file.path(path, "RFID"), pattern = "^test", full.names = TRUE)
rem_files
file.remove(rem_files)
# Make a vector of the custom file names to write out
files <- c("RFID_simulated_Pair-01_2023_08_01.csv", "RFID_simulated_Pair-01_2023_08_02.csv")
# Add the file path for the correct directory
files <- file.path(path, "RFID", files)
files
# Make a vector of the days to write out (1 day per iteration of the loop)
days <- c(1, 2)
days
# You can drop the lapply() argument names, since you're supplying the arguments in the order that the function expects
lapply(1:length(files), function(x){
sim_dats_rfid %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days[x]) %>%
write.csv(file = files[x], row.names = FALSE)
})
# You can drop the lapply() argument names, since you're supplying the arguments in the order that the function expects
invisible(lapply(1:length(files), function(x){
sim_dats_rfid %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days[x]) %>%
write.csv(file = files[x], row.names = FALSE)
}))
list.files(file.path(path, "RFID"))
# Make a vector of the custom file names to write out
files <- list(
`RFID` = c("RFID_simulated_Pair-01_2023_08_01.csv", "RFID_simulated_Pair-01_2023_08_02.csv"),
`IRBB` = c("IRBB_simulated_Pair-01_2023_08_01.csv", "IRBB_simulated_Pair-01_2023_08_02.csv")
)
glimpse(files)
# Make a vector of the custom file names to write out
files <- list(
`RFID` = c("RFID_simulated_Pair-01_2023_08_01.csv", "RFID_simulated_Pair-01_2023_08_02.csv"),
`IRBB` = c("IRBB_simulated_Pair-01_2023_08_01.csv", "IRBB_simulated_Pair-01_2023_08_02.csv")
)
glimpse(files)
# Make a list of the custom file names to write out
files <- list(
c("RFID_simulated_Pair-01_2023_08_01.csv", "RFID_simulated_Pair-01_2023_08_02.csv"),
c("IRBB_simulated_Pair-01_2023_08_01.csv", "IRBB_simulated_Pair-01_2023_08_02.csv")
)
glimpse(files)
files[1]
# Using a single square bracket to filter a list returns the first list element in list format
files[1]
glimpse(files[1])
# Using double square brackets returns the first list element only, so it removes the list structure and shows the original data structure of that element (here a vector)
files[[1]]
glimpse(files[[1]])
# Make a named list of the custom file names to write out
files <- list(
`RFID` = c("RFID_simulated_Pair-01_2023_08_01.csv", "RFID_simulated_Pair-01_2023_08_02.csv"),
`IRBB` = c("IRBB_simulated_Pair-01_2023_08_01.csv", "IRBB_simulated_Pair-01_2023_08_02.csv")
)
glimpse(files)
files$RFID
files$RFID
files[["RFID"]]
files["RFID"]
# Make a named list of the custom file names to write out
files <- list(
`RFID` = c("RFID_simulated_Pair-01_2023_08_01.csv", "RFID_simulated_Pair-01_2023_08_02.csv"),
`IRBB` = c("IRBB_simulated_Pair-01_2023_08_01.csv", "IRBB_simulated_Pair-01_2023_08_02.csv")
)
# Add the file path for the correct directory
files <- file.path(path, "RFID", files)
files
# Make a list of file paths per sensor that will be used inside of the loop
file_dirs <- list(
`RFID` = file.path(path, "RFID"),
`IRBB` = file.path(path, "IRBB")
)
file_dirs
# Make a named list of the custom file names to write out
files <- list(
`RFID` = c("RFID_simulated_Pair-01_2023_08_01.csv", "RFID_simulated_Pair-01_2023_08_02.csv"),
`IRBB` = c("IRBB_simulated_Pair-01_2023_08_01.csv", "IRBB_simulated_Pair-01_2023_08_02.csv")
)
files
# Make a list of file paths per sensor that will be used inside of the loop
file_dirs <- list(
`RFID` = file.path(path, "RFID"),
`IRBB` = file.path(path, "IRBB")
)
file_dirs
# Make a list of the days to write out for each sensor
# This could be a single vector rather than a list since you want to write out the same days per sensor, but a list is useful in case you wanted to change the days (and number of days) to write out per sensor
days <- list(
`RFID` = c(1, 2),
`IRBB` = c(1, 2)
)
days
# Make a vector of sensors
sensors <- c("RFID", "IRBB")
sensors
# Finally, you need to make a list of the data frames that you want to write out. Since you already know how to filter data frames by day, that code can go inside of the loop, and you only need to specify a data frame per sensor type here
dats <- list(
`RFID` = sim_dats_rfid,
`IRBB` = sim_dats_irbb
)
glimpse(dats)
# Testing
x <- 1
y <- 1
# Testing
x <- 1
y <- 1
# Testing
x <- 1
y <- 1
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- sensors[x]
days_tmp
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- sensors[x]
days_tmp
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- sensors[x]
days_tmp
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- days_tmp[x]
days_tmp
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- days_tmp[x]
days_tmp
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- days[x]
days_tmp
days_tmp <- days[[sensors[x]]]
days_tmp
# Index the named list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
sensors[x]
days_tmp <- days[[sensors[x]]]
days_tmp
# Use double bracket filtering to pull out the vector of file names for the given sensor from the overall list, then use y with single bracket filtering to pull a single file name from the resulting vector of names
files[[x]]
files[[x]][y]
# Testing
x <- 1
y <- 1
sensors[x] # This is a string with the sensor name
# Place the string with the sensor name inside of double square brackets to extract the vector of days for that sensor
days_tmp <- days[[sensors[x]]]
days_tmp
# Get the data frame per sensor type using x inside of double square brackets to extract the given data frame from the list
dats[[x]] %>%
# Filter the data frame by one day at a time by using y to index the temporary vector of days (e.g. to extract a single element from that vector)
dplyr::filter(day == days_tmp[y]) %>%
glimpse()
# Use double bracket filtering to pull out the vector of file names for the given sensor from the overall list, then use y with single bracket filtering to pull a single file name from the resulting vector of names
files[[x]]
files[[x]][y]
# Start by iterating over sensors
invisible(lapply(1:length(sensors), function(x){
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- sensors[x]
# For each sensor, iterate over days
lapply(1:length(days_tmp), function(y){
# Get the data frame per sensor type using x and then filter by day using y
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y]) %>%
# Use double and single bracket filtering to pull out the right file name
write.csv(file = files[[x]][y], row.names = FALSE)
})
}))
# Make a vector of sensor labels
sensors <- c("RFID", "IRBB")
sensors
# Make a named list of the custom file names to write out
files <- list(
`RFID` = c("RFID_simulated_Pair-01_2023_08_01.csv", "RFID_simulated_Pair-01_2023_08_02.csv"),
`IRBB` = c("IRBB_simulated_Pair-01_2023_08_01.csv", "IRBB_simulated_Pair-01_2023_08_02.csv")
)
files
# Make a list of file paths per sensor that will be used inside of the loop
file_dirs <- list(
`RFID` = file.path(path, "RFID"),
`IRBB` = file.path(path, "IRBB")
)
file_dirs
# Make a list of the days to write out for each sensor
# This could be a single vector rather than a list since you want to write out the same days per sensor, but a list is useful in case you wanted to change the days (and number of days) to write out per sensor
days <- list(
`RFID` = c(1, 2),
`IRBB` = c(1, 2)
)
days
# Finally, you need to make a list of the data frames that you want to write out. Since you already know how to filter data frames by day, that code can go inside of the loop, and you only need to specify a data frame per sensor type here
dats <- list(
`RFID` = sim_dats_rfid,
`IRBB` = sim_dats_irbb
)
glimpse(dats)
# Start by iterating over sensors
invisible(lapply(1:length(sensors), function(x){
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- sensors[x]
# For each sensor, iterate over days
lapply(1:length(days_tmp), function(y){
# Get the data frame per sensor type using x and then filter by day using y
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y]) %>%
# Use double and single bracket filtering to pull out the right file name
write.csv(file = files[[x]][y], row.names = FALSE)
})
}))
# Testing
x <- 2
y <- 1
sensors[x] # This is a string with the sensor name
# Place the string with the sensor name inside of double square brackets to extract the vector of days for that sensor
days_tmp <- days[[sensors[x]]]
days_tmp
# Get the data frame per sensor type using x inside of double square brackets to extract the given data frame from the list
dats[[x]] %>%
# Filter the data frame by one day at a time by using y to index the temporary vector of days (e.g. to extract a single element from that vector)
dplyr::filter(day == days_tmp[y]) %>%
glimpse()
# Use double bracket filtering to pull out the vector of file names for the given sensor from the overall list, then use y with single bracket filtering to pull a single file name from the resulting vector of names
files[[x]]
files[[x]][y]
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- sensors[x]
# Get the data frame per sensor type using x and then filter by day using y
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y]) %>%
# Use double and single bracket filtering to pull out the right file name
write.csv(file = files[[x]][y], row.names = FALSE)
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y])
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- sensors[x]
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- days[[sensors[x]]]
# Get the data frame per sensor type using x and then filter by day using y
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y]) %>%
# Use double and single bracket filtering to pull out the right file name
write.csv(file = files[[x]][y], row.names = FALSE)
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y])
files[[x]][y]
file.path(path, "IRBB")
dir.create(file.path(path, "IRBB"))
# Testing
x <- 1
y <- 1
# Start by iterating over sensors
invisible(lapply(1:length(sensors), function(x){
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- days[[sensors[x]]]
# For each sensor, iterate over days
lapply(1:length(days_tmp), function(y){
# Get the data frame per sensor type using x and then filter by day using y
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y]) %>%
# Use double and single bracket filtering to pull out the right file name
write.csv(file = files[[x]][y], row.names = FALSE)
})
}))
# Make a vector of sensor labels
sensors <- c("RFID", "IRBB")
sensors
# Make a named list of the custom file names to write out
files <- list(
`RFID` = c("RFID_simulated_Pair-01_2023_08_01.csv", "RFID_simulated_Pair-01_2023_08_02.csv"),
`IRBB` = c("IRBB_simulated_Pair-01_2023_08_01.csv", "IRBB_simulated_Pair-01_2023_08_02.csv")
)
files
# Make a list of file paths per sensor that will be used inside of the loop
file_dirs <- list(
`RFID` = file.path(path, "RFID"),
`IRBB` = file.path(path, "IRBB")
)
file_dirs
# Make a list of the days to write out for each sensor
# This could be a single vector rather than a list since you want to write out the same days per sensor, but a list is useful in case you wanted to change the days (and number of days) to write out per sensor
days <- list(
`RFID` = c(1, 2),
`IRBB` = c(1, 2)
)
days
# Finally, you need to make a list of the data frames that you want to write out. Since you already know how to filter data frames by day, that code can go inside of the loop, and you only need to specify a data frame per sensor type here
dats <- list(
`RFID` = sim_dats_rfid,
`IRBB` = sim_dats_irbb
)
glimpse(dats)
x <- 2
y <- 1
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- days[[sensors[x]]]
days_tmp
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- days[[sensors[x]]]
# Get the data frame per sensor type using x and then filter by day using y
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y]) %>%
# Use double and single bracket filtering to pull out the right file name
write.csv(file = files[[x]][y], row.names = FALSE)
dats[[x]]
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y]) %>%
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y])
files[[x]][y]
# Get the data frame per sensor type using x and then filter by day using y
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y]) %>%
# Use double and single bracket filtering to pull out the right file name
write.csv(file = file.path(file_dirs, files[[x]][y]), row.names = FALSE)
# Get the data frame per sensor type using x and then filter by day using y
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y]) %>%
# Use double and single bracket filtering to pull out the right file name
write.csv(file = file.path(file_dirs[[x]], files[[x]][y]), row.names = FALSE)
# Testing
x <- 1
y <- 1
sensors[x] # This is a string with the sensor name
# Place the string with the sensor name inside of double square brackets to extract the vector of days for that sensor
days_tmp <- days[[sensors[x]]]
days_tmp
# Get the data frame per sensor type using x inside of double square brackets to extract the given data frame from the list
dats[[x]] %>%
# Filter the data frame by one day at a time by using y to index the temporary vector of days (e.g. to extract a single element from that vector)
dplyr::filter(day == days_tmp[y]) %>%
glimpse()
# Use double bracket filtering to pull out the vector of file names for the given sensor from the overall list, then use y with single bracket filtering to pull a single file name from the resulting vector of names
files[[x]]
files[[x]][y]
# You'll also combine the file name with the right path:
file.path(file_dirs[[x]], files[[x]][y])
files <- c("RFID_simulated_Pair-01_2023_08_01.csv", "RFID_simulated_Pair-01_2023_08_02.csv")
# Add the file path for the correct directory
files <- file.path(path, "RFID", files)
files
file.remove(files)
# Make a vector of sensor labels
sensors <- c("RFID", "IRBB")
sensors
# Make a named list of the custom file names to write out
files <- list(
`RFID` = c("RFID_simulated_Pair-01_2023_08_01.csv", "RFID_simulated_Pair-01_2023_08_02.csv"),
`IRBB` = c("IRBB_simulated_Pair-01_2023_08_01.csv", "IRBB_simulated_Pair-01_2023_08_02.csv")
)
files
# Make a list of file paths per sensor that will be used inside of the loop
file_dirs <- list(
`RFID` = file.path(path, "RFID"),
`IRBB` = file.path(path, "IRBB")
)
file_dirs
# Make a list of the days to write out for each sensor
# This could be a single vector rather than a list since you want to write out the same days per sensor, but a list is useful in case you wanted to change the days (and number of days) to write out per sensor
days <- list(
`RFID` = c(1, 2),
`IRBB` = c(1, 2)
)
days
# Finally, you need to make a list of the data frames that you want to write out. Since you already know how to filter data frames by day, that code can go inside of the loop, and you only need to specify a data frame per sensor type here
dats <- list(
`RFID` = sim_dats_rfid,
`IRBB` = sim_dats_irbb
)
glimpse(dats)
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- days[[sensors[x]]]
# Start by iterating over sensors
invisible(lapply(1:length(sensors), function(x){
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- days[[sensors[x]]]
# For each sensor, iterate over days
lapply(1:length(days_tmp), function(y){
# Get the data frame per sensor type using x and then filter by day using y
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y]) %>%
# Use double and single bracket filtering to pull out the right file name
write.csv(file = file.path(file_dirs[[x]], files[[x]][y]), row.names = FALSE)
})
}))
list.files(file.path(path, "RFID"))
list.files(file.path(path, "IRBB"))
