legend.position = "top"
)
ggplot() +
# Add a vertical line for each RFID timestamp
# Use the new version of this data frame with the new day_label column
# Make sure to use the new timestamp column
geom_segment(
data = rfid_raw3,
aes(x = timestamp, xend = timestamp, y = 0, yend = 0.45),
color = "blue",
linewidth = 0.3
) +
# Add a vertical line for each beam breaker timestamp
# Use the new version of this data frame with the new day_label column
# Make sure to use the new timestamp column
geom_segment(
data = irbb_raw3,
aes(x = timestamp, xend = timestamp, y = 0.5, yend = 1),
color = "orange",
linewidth = 0.3
) +
# Add the fake layer of lines so that you can create a legend
geom_line(data = all_sensors, aes(x = timestamp, y = 1, color = sensor_id), linewidth = 0) +
# Set the colors that will be used to color the lines in the legend itself
scale_color_manual(values = c("blue", "orange")) +
# Specify that you want to create a color legend, and override the linewidth of 0 above so that the lines show up in the legend. You can also customize the legend title, otherwise it will use the column name linked to the color encoding
guides(color = guide_legend(override.aes = list(linewidth = 2), title = "Sensor type")) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 2, strip.position = "left") +
# Change the x and y axis labels
xlab("Time") +
# Now you can add a y-axis label
ylab("Day of data collection") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
) +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top"
)
ggplot() +
# Add a vertical line for each RFID timestamp
# Use the new version of this data frame with the new day_label column
# Make sure to use the new timestamp column
geom_segment(
data = rfid_raw3,
aes(x = timestamp, xend = timestamp, y = 0, yend = 0.45),
color = "blue",
linewidth = 0.3
) +
# Add a vertical line for each beam breaker timestamp
# Use the new version of this data frame with the new day_label column
# Make sure to use the new timestamp column
geom_segment(
data = irbb_raw3,
aes(x = timestamp, xend = timestamp, y = 0.5, yend = 1),
color = "orange",
linewidth = 0.3
) +
# Add the fake layer of lines so that you can create a legend
# The argument color here must be supplied with the name of a column that is the data type "factor" in R
geom_line(data = all_sensors, aes(x = timestamp, y = 1, color = sensor_id), linewidth = 0) +
# Set the colors that will be used to color the lines in the legend itself
# The length of the vector of color values that you supply here must be the same length as the number of "levels" (or unique values) in the factor column
scale_color_manual(values = c("blue", "orange")) +
# Specify that you want to create a color legend, and override the linewidth of 0 above so that the lines show up in the legend. You can also customize the legend title, otherwise it will use the column name linked to the color encoding
guides(color = guide_legend(override.aes = list(linewidth = 2), title = "Sensor type")) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 2, strip.position = "left") +
# Change the x and y axis labels
xlab("Time") +
# Now you can add a y-axis label
ylab("Day of data collection") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
) +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top"
)
rm(list = ls()) # Clean global environment
library(tidyverse) # Load the set of tidyverse packages
library(data.table) # Load other packages that the ABISSMAL functions require
# Initialize an object with the path that is your working directory
path <- "/home/gsvidaurre/Desktop/ABISSMAL_vignettes"
# Load the function that combines raw data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/combine_raw_data.R")
# Load the function that detects perching events in the raw data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/detect_perching_events.R")
# Load the function that pre-processes raw data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/preprocess_detections.R")
# Load a script with utility functions that each function above requires
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/utilities.R")
list.files(file.path(path, "Data/raw_combined"), pattern = ".csv$")
rfid_data <- read.csv(file.path(path, "Data/raw_combined", "combined_raw_data_RFID.csv"))
glimpse(rfid_data)
rfid_pp <- read.csv(file.path(path, "Data/processed/pre_processed_data_RFID.csv"))
glimpse(rfid_pp)
irbb_pp <- read.csv(file.path(path, "Data/processed/pre_processed_data_IRBB.csv"))
glimpse(irbb_pp)
rfid_raw <- read.csv(file.path(path, "Data/raw_combined", "combined_raw_data_RFID.csv")) %>%
# The timestamps must be converted to POSIX format every time that the data is read back into R for plotting
dplyr::mutate(
timestamp_ms = as.POSIXct(format(as.POSIXct(timestamp_ms, tz = "America/New York"), "%Y-%m-%d %H:%M:%OS6"))
)
# You should see that the timestamp_ms is in "dttm" format, which means that the POSIX conversion was done correctly
glimpse(rfid_raw)
irbb_raw <- read.csv(file.path(path, "Data/raw_combined", "combined_raw_data_IRBB.csv")) %>%
# The timestamps must be converted to POSIX format every time that the data is read back into R for plotting
dplyr::mutate(
timestamp_ms = as.POSIXct(format(as.POSIXct(timestamp_ms, tz = "America/New York"), "%Y-%m-%d %H:%M:%OS6"))
)
glimpse(irbb_raw)
ggplot() +
# Add a vertical line for each RFID timestamp
geom_segment(
data = rfid_raw,
aes(x = timestamp_ms, y = 0, xend = timestamp_ms, yend = 1),
color = "blue",
linewidth = 0.3
)
ggplot() +
# Add a vertical line for each RFID timestamp
geom_segment(
data = rfid_raw,
aes(x = timestamp_ms, xend = timestamp_ms, y = 0, yend = 1),
color = "blue",
linewidth = 0.3
) +
# Add a vertical line for each beam breaker timestamp
geom_segment(
data = irbb_raw,
aes(x = timestamp_ms, xend = timestamp_ms, y = 0, yend = 1),
color = "orange",
linewidth = 0.3
)
ggplot() +
# Add a vertical line for each RFID timestamp
geom_segment(
data = rfid_raw,
aes(x = timestamp_ms, xend = timestamp_ms, y = 0, yend = 0.45),
color = "blue",
linewidth = 0.3
) +
# Add a vertical line for each beam breaker timestamp
geom_segment(
data = irbb_raw,
aes(x = timestamp_ms, xend = timestamp_ms, y = 0.5, yend = 1),
color = "orange",
linewidth = 0.3
)
ggplot() +
# Add a vertical line for each RFID timestamp
geom_segment(
data = rfid_raw,
aes(x = timestamp_ms, xend = timestamp_ms, y = 0, yend = 0.45),
color = "blue",
linewidth = 0.3
) +
# Add a vertical line for each beam breaker timestamp
geom_segment(
data = irbb_raw,
aes(x = timestamp_ms, xend = timestamp_ms, y = 0.5, yend = 1),
color = "orange",
linewidth = 0.3
) +
# Facet the plot by day (e.g. create a panel per day)
facet_wrap(~ day, nrow = 2, strip.position = "left")
ifelse(test = rfid_raw$day == 1, yes = "Day 1", no = "Day 2")
# Create a new column in the raw data for the date of data collection
rfid_raw2 <- rfid_raw %>%
dplyr::mutate(
day_label = ifelse(day == 1, "Day 1", "Day 2")
)
# You should see that the new column "day_label" was created
# You'll see that a new year, month, and day were appended to the updated timestamps, but this is expected (see above)
glimpse(rfid_raw2)
# Repeat this process for the beam breaker data
irbb_raw2 <- irbb_raw %>%
dplyr::mutate(
day_label = ifelse(day == 1, "Day 1", "Day 2")
)
glimpse(irbb_raw2)
ggplot() +
# Add a vertical line for each RFID timestamp
# Use the new version of this data frame with the new day_label column
# Make sure to use the new timestamp column
geom_segment(
data = rfid_raw2,
aes(x = timestamp_ms, xend = timestamp_ms, y = 0, yend = 0.45),
color = "blue",
linewidth = 0.3
) +
# Add a vertical line for each beam breaker timestamp
# Use the new version of this data frame with the new day_label column
# Make sure to use the new timestamp column
geom_segment(
data = irbb_raw2,
aes(x = timestamp_ms, xend = timestamp_ms, y = 0.5, yend = 1),
color = "orange",
linewidth = 0.3
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 2, strip.position = "left")
rfid_raw3 <- rfid_raw2 %>%
dplyr::mutate(
timestamp = as.POSIXct(strptime(format(as.POSIXct(timestamp_ms), "%H:%M:%S"), format = "%H:%M:%S"))
)
# You'll see that a new year, month, and day were appended to the updated timestamps, but this is expected (see above)
glimpse(rfid_raw3)
# Repeat this process for the beam breaker data
irbb_raw3 <- irbb_raw2 %>%
dplyr::mutate(
timestamp = as.POSIXct(strptime(format(as.POSIXct(timestamp_ms), "%H:%M:%S"), format = "%H:%M:%S"))
)
glimpse(irbb_raw3)
ggplot() +
# Add a vertical line for each RFID timestamp
# Use the new version of this data frame with the new day_label column
# Make sure to use the new timestamp column
geom_segment(
data = rfid_raw3,
aes(x = timestamp, xend = timestamp, y = 0, yend = 0.45),
color = "blue",
linewidth = 0.3
) +
# Add a vertical line for each beam breaker timestamp
# Use the new version of this data frame with the new day_label column
# Make sure to use the new timestamp column
geom_segment(
data = irbb_raw3,
aes(x = timestamp, xend = timestamp, y = 0.5, yend = 1),
color = "orange",
linewidth = 0.3
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 2, strip.position = "left") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
)
ggplot() +
# Add a vertical line for each RFID timestamp
# Use the new version of this data frame with the new day_label column
# Make sure to use the new timestamp column
geom_segment(
data = rfid_raw3,
aes(x = timestamp, xend = timestamp, y = 0, yend = 0.45),
color = "blue",
linewidth = 0.3
) +
# Add a vertical line for each beam breaker timestamp
# Use the new version of this data frame with the new day_label column
# Make sure to use the new timestamp column
geom_segment(
data = irbb_raw3,
aes(x = timestamp, xend = timestamp, y = 0.5, yend = 1),
color = "orange",
linewidth = 0.3
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 2, strip.position = "left") +
# Change the x and y axis labels
xlab("Time") +
# Now you can add a y-axis label
ylab("Day of data collection") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
) +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
)
all_sensors <- rfid_raw3 %>%
bind_rows(
irbb_raw3
) %>%
dplyr::mutate(
sensor_id = factor(sensor_id)
)
glimpse(all_sensors)
ggplot() +
# Add a vertical line for each RFID timestamp
# Use the new version of this data frame with the new day_label column
# Make sure to use the new timestamp column
geom_segment(
data = rfid_raw3,
aes(x = timestamp, xend = timestamp, y = 0, yend = 0.45),
color = "blue",
linewidth = 0.3
) +
# Add a vertical line for each beam breaker timestamp
# Use the new version of this data frame with the new day_label column
# Make sure to use the new timestamp column
geom_segment(
data = irbb_raw3,
aes(x = timestamp, xend = timestamp, y = 0.5, yend = 1),
color = "orange",
linewidth = 0.3
) +
# Add the fake layer of lines so that you can create a legend
# The argument color here must be supplied with the name of a column that is the data type "factor" in R. This will trigger automatic coding of the color values that you specify below
geom_line(data = all_sensors, aes(x = timestamp, y = 1, color = sensor_id), linewidth = 0) +
# Specify that you want to create a color legend, and override the linewidth of 0 above so that the lines show up in the legend. You can also customize the legend title, otherwise it will use the column name linked to the color encoding
guides(color = guide_legend(override.aes = list(linewidth = 2), title = "Sensor type")) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 2, strip.position = "left") +
# Change the x and y axis labels
xlab("Time") +
# Now you can add a y-axis label
ylab("Day of data collection") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
) +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top"
)
ggplot() +
# Add a vertical line for each RFID timestamp
# Use the new version of this data frame with the new day_label column
# Make sure to use the new timestamp column
geom_segment(
data = rfid_raw3,
aes(x = timestamp, xend = timestamp, y = 0, yend = 0.45),
color = "blue",
linewidth = 0.3
) +
# Add a vertical line for each beam breaker timestamp
# Use the new version of this data frame with the new day_label column
# Make sure to use the new timestamp column
geom_segment(
data = irbb_raw3,
aes(x = timestamp, xend = timestamp, y = 0.5, yend = 1),
color = "orange",
linewidth = 0.3
) +
# Add the fake layer of lines so that you can create a legend
# The argument color here must be supplied with the name of a column that is the data type "factor" in R. This will trigger automatic coding of the color values that you specify below
geom_line(data = all_sensors, aes(x = timestamp, y = 1, color = sensor_id), linewidth = 0) +
# Set the colors that will be used to color the lines in the legend itself
# The length of the vector of color values that you supply here must be the same length as the number of "levels" (or unique values) in the factor column
# If you do not supply your own color values, then R will assign default colors to each factor level
scale_color_manual(values = c("blue", "orange")) +
# Specify that you want to create a color legend, and override the linewidth of 0 above so that the lines show up in the legend. You can also customize the legend title, otherwise it will use the column name linked to the color encoding
guides(color = guide_legend(override.aes = list(linewidth = 2), title = "Sensor type")) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 2, strip.position = "left") +
# Change the x and y axis labels
xlab("Time") +
# Now you can add a y-axis label
ylab("Day of data collection") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
) +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top"
)
ggplot() +
# Add a vertical line for each RFID timestamp
geom_segment(
data = raw_rfid,
aes(x = timestamp, y = 0, xend = timestamp, yend = y_max/4),
color = cols[4],
linewidth = 0.3
) +
geom_segment(
data = raw_all2 %>%
dplyr::filter(sensor_id == "Inner Beam Breaker"),
aes(x = timestamp, xend = timestamp, y = y_max/4, yend = (y_max/4) * 2),
color = cols[3],
linewidth = 0.3
) +
geom_segment(
data = raw_all2 %>%
dplyr::filter(sensor_id == "RFID"),
aes(x = timestamp, xend = timestamp, y = (y_max/4) * 2, yend = (y_max/4) * 3),
color = cols[2],
linewidth = 0.3
) +
geom_segment(
data = raw_all2 %>%
dplyr::filter(sensor_id == "Outer Beam Breaker"),
aes(x = timestamp, xend = timestamp, y = (y_max/4) * 3, yend = y_max),
color = cols[1],
linewidth = 0.3
) +
# I removed switch = "y" because it's possible to rotate strip lables horizontally when they're on the right
facet_grid(rows = vars(new_date)) +
# Add shaded rectangles for the nocturnal periods
geom_rect(data = rect_df2, aes(xmin = time_xmin, xmax = time_xmax, ymin = -Inf, ymax = Inf), color = alpha("black", 0), fill = alpha("black", 0.08), inherit.aes = FALSE) +
scale_x_datetime(
breaks = seq(x_lims[1], x_lims[2], "1 hour"),
date_labels = "%H:%M",
expand = c(0, 0),
limits = x_lims
) +
scale_y_continuous(limits = c(0, y_max)) +
guides(color = "none") +
theme_bw() +
ylab("") +
xlab("") +
theme(
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(size = 7, angle = 90, vjust = 0.5, hjust = 0.5, color = "black"),
strip.text.y = element_text(size = 7, face = "bold", angle = 0),
strip.background = element_rect(fill = "white"),
legend.position = "top",
axis.ticks = element_line(linewidth = 0.25)
)
# Save the image file to your computer
ggsave(file.path(path, "raw_detections.tiff"), width = 4, height = 3, units = "inches", res = 300)
# Save the image file to your computer
ggsave(file.path(path, "raw_detections.tiff"), width = 4, height = 3, units = "in", res = 300)
# Save the image file to your computer
ggsave(file.path(path, "raw_detections.tiff"), width = 4, height = 3, units = "in", dpi = 300)
ggplot() +
# Add a vertical line for each RFID timestamp
# Use the new version of this data frame with the new day_label column
# Make sure to use the new timestamp column
geom_segment(
data = rfid_raw3,
aes(x = timestamp, xend = timestamp, y = 0, yend = 0.45),
color = "blue",
linewidth = 0.3
) +
# Add a vertical line for each beam breaker timestamp
# Use the new version of this data frame with the new day_label column
# Make sure to use the new timestamp column
geom_segment(
data = irbb_raw3,
aes(x = timestamp, xend = timestamp, y = 0.5, yend = 1),
color = "orange",
linewidth = 0.3
) +
# Add the fake layer of lines so that you can create a legend
# The argument color here must be supplied with the name of a column that is the data type "factor" in R. This will trigger automatic coding of the color values that you specify below
geom_line(data = all_sensors, aes(x = timestamp, y = 1, color = sensor_id), linewidth = 0) +
# Set the colors that will be used to color the lines in the legend itself
# The length of the vector of color values that you supply here must be the same length as the number of "levels" (or unique values) in the factor column
# If you do not supply your own color values, then R will assign default colors to each factor level
scale_color_manual(values = c("blue", "orange")) +
# Specify that you want to create a color legend, and override the linewidth of 0 above so that the lines show up in the legend. You can also customize the legend title, otherwise it will use the column name linked to the color encoding
guides(color = guide_legend(override.aes = list(linewidth = 2), title = "Sensor type")) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 2, strip.position = "left") +
# Change the x and y axis labels
xlab("Time") +
# Now you can add a y-axis label
ylab("Day of data collection") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
) +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top"
)
# Save the image file to your computer
ggsave(file.path(path, "raw_detections.tiff"), width = 4, height = 3, units = "in", dpi = 300)
# Save the image file to your computer
ggsave(file.path(path, "raw_detections.tiff"), width = 8, height = 6, units = "in", dpi = 300)
