rm(list = ls())
rm(list = ls())
rm(list = ls())
?ls
?remove
?rm
?ls
?rm
?ls
ls()
getwd()
getwd()
?dir.create
dir.create("/home/gsvidaurre/Desktop/ABISSMAL_vignettes")
?file.copy
file.copy(
from = "/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/vignettes/Vignette_01_Introduction.Rmd",
to = "/home/gsvidaurre/Desktop/ABISSMAL_vignettes/Vignette_01_Introduction_copy.Rmd"
)
list.files(path = "/home/gsvidaurre/Desktop/ABISSMAL_vignettes")
file.remove("/home/gsvidaurre/Desktop/ABISSMAL_vignettes/Vignette_01_Introduction_copy.Rmd")
file.copy(
from = "/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/vignettes/Vignette_01_Introduction.Rmd",
to = "/home/gsvidaurre/Desktop/ABISSMAL_vignettes/Vignette_01_Introduction_copy.Rmd"
)
list.files(path = "/home/gsvidaurre/Desktop/ABISSMAL_vignettes")
file.remove("/home/gsvidaurre/Desktop/ABISSMAL_vignettes/Vignette_01_Introduction_copy.Rmd")
path <- "/home/gsvidaurre/Desktop/ABISSMAL_vignettes"
path
rm(list = "path")
?c
rfid_ts # run the object name to see its contents
# Create a vector of 4 RFID timestamps in HH:MM:SS format
rfid_ts <- c("01:00:00", "02:00:00", "01:05:00", "02:05:00")
rfid_ts # run the object name to see its contents
class(rfid_ts)
length(rfid_ts)
is.vector(rfid_ts)
rfid_ts # run the object name to see its contents
is.vector(rfid_ts) # a binary value indicating that rfid_ts is a vector
class(rfid_ts) # a vector with character data
length(rfid_ts) # this vector has 4 elements
rm(list = ls()) # Clean global environment
library(tidyverse) # Load the set of tidyverse packages
path <- "/home/gsvidaurre/Desktop/ABISSMAL_vignettes"
path
# Create a vector of 4 RFID timestamps in HH:MM:SS format
rfid_ts <- c("10:00:00", "10:05:00", "11:00:00", "11:05:00")
rfid_ts # run the object name to see its contents
is.vector(rfid_ts) # a binary value indicating that rfid_ts is a vector
class(rfid_ts) # a vector with character data
length(rfid_ts) # this vector has 4 elements
# Simulate timestamps for an entrance, an exit, and then another entrance and exit
irbb_ts <- c("09:59:55", "10:05:05", "10:59:55", "11:05:05")
irbb_ts
rfid_ts
# Simulate timestamps for an entrance, an exit, and then another entrance and exit
irbb_ts <- c("09:59:59", "10:05:01", "10:59:59", "11:05:01")
rfid_ts <- c(rfid_ts, "08:00:00", "08:00:01", "08:00:02", "08:00:03", "11:30:00", "11:30:01", "11:30:02", "11:30:03", "11:30:04", "11:30:05")
glimpse(rfid_ts)
length(rfid_ts)
# See the object structure in a format that includes the data type ("chr"), the number of elements ([1:14]), and a preview of the first few elements
glimpse(rfid_ts)
irbb_ts
# Simulate some RFID detection failures
irbb_ts <- c(irbb_ts, "06:05:05", "06:35:08", "07:15:40", "11:10:25")
glimpse(irbb_ts)
# Simulate some stray beam breaker detections
irbb_ts <- c(irbb_ts, "09:45:01", "09:45:02", "09:45:03", "09:45:04", "09:45:05", "09:45:06", "09:45:07", "09:45:08", "09:45:09", "09:45:10", "09:45:11")
glimpse(irbb_ts)
c("1", 1)
# Create a vector with character, numeric, and binary data types
# Since you're not saving the output into an object, the result will print directly to the console
c("1", 1, TRUE)
c(1, 1, TRUE)
# Create a vector with numeric and binary data types
c(1, 1, TRUE, FALSE)
# Create a vector with character, numeric, and binary data types
# Since you're not saving the output into an object, the result will print directly to the console
c("1", 1, TRUE, FALSE)
# Create a vector with numeric and binary data types
c(1, 1, TRUE, FALSE)
?data.frame()
rfid_ts
?rep
# Create a vector with information about the experimental replicate
# The argument x contains the information that will be repeated
# The argument times specifies the number of times that the information will be repeated
exp_rep <- rep(x = "Pair_01", times = length(rfid_ts))
glimpse(exp_rep)
# You can run code like this without writing out the argument names, as long as the arguments are written in the same order that the function expects:
exp_rep <- rep("Pair_01", length(rfid_ts))
glimpse(exp_rep)
length(rfid_ts) == length(exp_rep)
# This statement should yield FALSE
length(rfid_ts) != length(exp_rep)
sim_dats <- data.frame(replicate = exp_rep, rfid_timestamps = rfid_ts)
glimpse(sim_dats)
sim_dats <- data.frame(exp_rep, rfid_ts)
glimpse(sim_dats)
sim_dats <- data.frame(exp_rep, rfid_ts)
glimpse(sim_dats)
sim_dats <- data.frame(replicate = exp_rep, rfid_timestamps = rfid_ts)
glimpse(sim_dats)
?cbind
sim_dats <- cbind(sim_dats, rep("2023"))
glimpse(sim_dats)
# You can use : to create a sequence of numbers to filter elements from indices 5 to 10, which will drop the firsrt 4 elements
rfid_ts[5:10]
length(rfid_ts)
# You can use : to create a sequence of numbers to filter elements from indices 5 to the length of rfid_ts, which will drop the first 4 elements
5:length(rfid_ts)
# You can use : to create a sequence of numbers from indices 5 to the length of rfid_ts
5:length(rfid_ts)
# You can also use the function `seq()` to create a sequence of numbers
seq(froom = 5, to = 10, by = 1)
# You can also use the function `seq()` to create a sequence of numbers
seq(from = 5, to = 10, by = 1)
# You can also use the function `seq()` to create a sequence of numbers
seq(from = 5, to = length(rfid_ts), by = 1)
# When you put any of the expressions above inside of square brackets after the object name you will pull out elements 5 to the length of rfid_ts and drop the first 4 elements
rfid_ts[5:length(rfid_ts)]
rfid_ts[seq(from = 5, to = length(rfid_ts), by = 1)]
# If you want to filter out non-consecutive elements, you can create a vector of indices with the function `c()`
c(1, 3, 6, 8)
# When you put any of the expressions above inside of square brackets after the object name you will pull out elements 5 to the length of rfid_ts and drop the first 4 elements
rfid_ts[5:length(rfid_ts)]
rfid_ts[seq(from = 5, to = length(rfid_ts), by = 1)]
rfid_ts[c(1, 3, 6, 8)]
# If you want to filter out non-consecutive elements, you can create a vector of indices with the function `c()`
c(1, 3, 5, 6, 8, 10, 11, 12, 13, 14)
# When you put any of the expressions above inside of square brackets after the object name you will pull out elements 5 to the length of rfid_ts and drop the first 4 elements
rfid_ts[5:length(rfid_ts)]
rfid_ts[seq(from = 5, to = length(rfid_ts), by = 1)]
rfid_ts[c(1, 3, 6, 8)]
rfid_ts[c(1, 3, 5, 6, 8, 10, 11, 12, 13, 14)]
# Finally, you can use any of the methods above to create a sequence of indices that you want to drop, and then use the `-` symbol inside of the square brackets to remove those indices. For instance:
rfid_ts[-1:4] # the numbers must be
# Finally, you can use any of the methods above to create a sequence of indices that you want to drop, and then use the `-` symbol inside of the square brackets to remove those indices. For instance:
rfid_ts[-c(1:4)] # the numbers must be wrapped in `c()` in order for this inverted filtering to work
sim_dats <- data.frame(exp_rep, rfid_ts[-c(1:4)])
glimpse(sim_dats)
sim_dats <- data.frame(exp_rep, rfid_ts[-c(1:4)])
sim_dats <- data.frame(replicate = exp_rep, timestamps = rfid_ts)
glimpse(sim_dats)
sim_dats <- cbind(sim_dats, rep("2023", length(rfid_ts)))
glimpse(sim_dats)
names(sim_dats)
# Use square bracket indexing and the function `ncol()` to find the last column name
ncol(sim_dats)
names(sim_dats)[ncol(sim_dats)]
# Then you can overwrite the last column name with a new name
names(sim_dats)[ncol(sim_dats)] <- "year"
# You can confirm that the name was changed correctly
names(sim_dats)
glimpse(sim_dats)
# Use the tidyverse to add the year as the 3rd column
sim_dats <- sim_dats %>%
dplyr::mutate(
year = rep("2023", length(rfid_ts))
)
glimpse(sim_dats)
?mutate
# Use the tidyverse to add the year as the 3rd column
sim_dats %>%
glimpse() %>%
dplyr::mutate(
# The nrow(.) expression means "get the number of rows for the current object", which in this case is sim_dats
year = rep(2023, nrow(.))
) %>%
glimpse() %>%
# Also add columns for the month and day
dplyr::mutate(
month = 08,
day = 01
) %>%
glimpse()
# Use the tidyverse to add the year as the 3rd column
sim_dats %>%
glimpse() %>% # See the structure of sim_dats
dplyr::mutate(
# The nrow(.) expression means "get the number of rows for the current object", which in this case is sim_dats
year = rep(2023, nrow(.))
) %>%
glimpse() # See the structure of sim_dats with the new column year
# Use the tidyverse to add the year as the 3rd column
sim_dats %>%
glimpse() %>% # See the structure of sim_dats
dplyr::mutate(
# The nrow(.) expression means "get the number of rows for the current object", which in this case is sim_dats
year = 2023
) %>%
glimpse() %>% # See the structure of sim_dats with the new column year
# Also add columns for the month and day
dplyr::mutate(
month = 08,
day = 01
) %>%
glimpse() # See the structure of sim_dats with the additional new columns month and day
sim_dats <- cbind(sim_dats, rep(2023, length(rfid_ts)))
glimpse(sim_dats)
sim_dats <- data.frame(replicate = exp_rep, timestamps = rfid_ts)
glimpse(sim_dats)
sim_dats <- cbind(sim_dats, rep(2023, length(rfid_ts)))
glimpse(sim_dats)
sim_dats <- cbind(sim_dats, rep(2023, length(rfid_ts)))
glimpse(sim_dats)
sim_dats <- data.frame(replicate = exp_rep, timestamps = rfid_ts)
glimpse(sim_dats)
sim_dats <- cbind(sim_dats, rep(2023, length(rfid_ts)))
glimpse(sim_dats)
# Make the data frame again with only 2 columns
sim_dats <- data.frame(replicate = exp_rep, timestamps = rfid_ts)
# Use the tidyverse to add the year as the 3rd column
sim_dats %>%
glimpse() %>% # See the structure of sim_dats
dplyr::mutate(
# The nrow(.) expression means "get the number of rows for the current object", which in this case is sim_dats
year = rep(2023, nrow(.))
) %>%
glimpse() # See the structure of sim_dats with the new column year
# Use the tidyverse to add the year as the 3rd column
sim_dats %>%
glimpse() %>% # See the structure of sim_dats
dplyr::mutate(
# The nrow(.) expression means "get the number of rows for the current object", which in this case is sim_dats
year = 2023
) %>%
glimpse() %>% # See the structure of sim_dats with the new column year
# Also add columns for the month and day
dplyr::mutate(
month = 08,
day = 01
) %>%
glimpse() # See the structure of sim_dats with the additional new columns month and day
sim_dats %>%
glimpse() %>%
dplyr::mutate(
year = c(2021, 2022, 2023)
) %>%
glimpse()
# Make the data frame again with only 2 columns
sim_dats <- data.frame(replicate = exp_rep, timestamps = rfid_ts)
sim_dats <- sim_dats %>%
dplyr::mutate(
year = 2023
) %>%
dplyr::mutate(
month = 08,
day = 01
)
glimpse(sim_dats)
# Make the data frame again with only 2 columns
sim_dats <- data.frame(replicate = exp_rep, timestamps = rfid_ts)
sim_dats <- sim_dats %>%
dplyr::mutate(
year = 2023
) %>%
dplyr::mutate(
month = 08,
day = 01
) %>%
dplyr::mutate(
c(rep("1357aabbcc", nrow(.)/2), rep("2468zzyyxx", nrow(.)/2))
)
glimpse(sim_dats)
# Make the data frame again with only 2 columns
sim_dats <- data.frame(replicate = exp_rep, timestamps = rfid_ts)
sim_dats <- sim_dats %>%
dplyr::mutate(
year = 2023
) %>%
dplyr::mutate(
month = 08,
day = 01
) %>%
dplyr::mutate(
PIT_tag = c(rep("1357aabbcc", nrow(.)/2), rep("2468zzyyxx", nrow(.)/2))
)
glimpse(sim_dats)
exp_rep <- rep(x = "Pair_01", times = length(irbb_ts))
# Overwrite the vector exp_rep with a new vector the same length as irbb_ts
exp_rep <- rep(x = "Pair_01", times = length(irbb_ts))
sim_dats_irbb <- data.frame(replicate = exp_rep, timestamps = irbb_ts)
# Overwrite the vector exp_rep with a new vector the same length as irbb_ts
exp_rep <- rep(x = "Pair_01", times = length(irbb_ts))
sim_dats_irbb <- data.frame(replicate = exp_rep, timestamps = irbb_ts)
sim_dats_irbb <- sim_dats_irbb %>%
dplyr::mutate(
year = 2023,
month = 08,
day = 01
)
glimpse(sim_dats_irbb)
?write.csv
?write.csv
# For the RFID data, create a vector of the working directory and the file name that you will use for the argument file in write.csv()
# The function file.path() will combine both pieces of information into a single file path
rfid_file <- file.path(path, "simulated_rfid_data.csv")
rfid_file
irbb_file <- file.path(path, "simulated_irbb_data.csv")
irbb_file
list.files(path)
# For the RFID data, create a vector of the working directory and the file name that you will use for the argument file in write.csv()
# The function file.path() will combine both pieces of information into a single file path
rfid_file <- file.path(path, "simulated_rfid_data.csv")
rfid_file
# Write out the data frame as a .csv spreadsheet. Do not include row names
write.csv(x = sim_dats_rfid, file = rfid_file, row.names = FALSE)
sim_dats_rfid <- data.frame(replicate = exp_rep, timestamps = rfid_ts)
# Overwrite the data frame with the modified version that has more columns
sim_dats_rfid <- sim_dats_rfid %>%
dplyr::mutate(
year = 2023
) %>%
dplyr::mutate(
month = 08,
day = 01
) %>%
# Allocate the first half of the detections to the first individual using nrow(.)/2, and the second half of the detctions to the second individual using nrow(.)/2 again. Both of the rep() expressions are combined into a single vector using the c() function
dplyr::mutate(
PIT_tag = c(rep("1357aabbcc", nrow(.)/2), rep("2468zzyyxx", nrow(.)/2))
)
exp_rep <- rep(x = "Pair_01", times = length(rfid_ts))
sim_dats_rfid <- data.frame(replicate = exp_rep, timestamps = rfid_ts)
# Overwrite the data frame with the modified version that has more columns
sim_dats_rfid <- sim_dats_rfid %>%
dplyr::mutate(
year = 2023
) %>%
dplyr::mutate(
month = 08,
day = 01
) %>%
# Allocate the first half of the detections to the first individual using nrow(.)/2, and the second half of the detctions to the second individual using nrow(.)/2 again. Both of the rep() expressions are combined into a single vector using the c() function
dplyr::mutate(
PIT_tag = c(rep("1357aabbcc", nrow(.)/2), rep("2468zzyyxx", nrow(.)/2))
)
glimpse(sim_dats_rfid)
# Make a vector for the experimental replicate
exp_rep <- rep(x = "Pair_01", times = length(rfid_ts))
# Make the data frame with the experimental replicate metadata and the timestamps
sim_dats_rfid <- data.frame(replicate = exp_rep, timestamps = rfid_ts)
# Overwrite the data frame with the modified version that has columns for the year, month, and day
sim_dats_rfid <- sim_dats_rfid %>%
dplyr::mutate(
year = 2023
) %>%
dplyr::mutate(
month = 08,
day = 01
) %>%
# Allocate the first half of the detections to the first individual using nrow(.)/2, and the second half of the detctions to the second individual using nrow(.)/2 again. Both of the rep() expressions are combined into a single vector using the c() function
dplyr::mutate(
PIT_tag = c(rep("1357aabbcc", nrow(.)/2), rep("2468zzyyxx", nrow(.)/2))
)
glimpse(sim_dats_rfid)
# Overwrite the vector exp_rep with a new vector the same length as irbb_ts
exp_rep <- rep(x = "Pair_01", times = length(irbb_ts))
sim_dats_irbb <- data.frame(replicate = exp_rep, timestamps = irbb_ts)
sim_dats_irbb <- sim_dats_irbb %>%
dplyr::mutate(
year = 2023,
month = 08,
day = 01
)
glimpse(sim_dats_irbb)
# For the RFID data, create a vector of the working directory and the file name that you will use for the argument file in write.csv()
# The function file.path() will combine both pieces of information into a single file path
rfid_file <- file.path(path, "simulated_rfid_data.csv")
rfid_file
# Write out the data frame as a .csv spreadsheet. Do not include row names
write.csv(x = sim_dats_rfid, file = rfid_file, row.names = FALSE)
irbb_file <- file.path(path, "simulated_irbb_data.csv")
irbb_file
write.csv(sim_dats_irbb, rfid_file, row.names = FALSE)
list.files(path)
irbb_file <- file.path(path, "simulated_irbb_data.csv")
irbb_file
write.csv(sim_dats_irbb, rfid_file, row.names = FALSE)
# For the RFID data, create a vector of the working directory and the file name that you will use for the argument file in write.csv()
# The function file.path() will combine both pieces of information into a single file path
rfid_file <- file.path(path, "simulated_rfid_data.csv")
rfid_file
# Write out the data frame as a .csv spreadsheet. Do not include row names
write.csv(x = sim_dats_rfid, file = rfid_file, row.names = FALSE)
irbb_file <- file.path(path, "simulated_irbb_data.csv")
irbb_file
write.csv(sim_dats_irbb, irbb_file, row.names = FALSE)
list.files(path)
