# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 3, strip.position = "left") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
) +
# Add an x-axis title
xlab("Time of day (HH:MM)") +
# Remove the y-axis grid lines (major and minor) inside of each panel
theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()
)
gg
gg <- gg +
# Add the perching events as rounded segments, and now encode color through the column individual_initiated
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(!is.na(perching_sensor)),
aes(x = start_gg, y = 1.2, xend = end_gg, yend = 1.2, color = individual_initiated),
linewidth = 2, lineend = "round"
) +
# Add the custom colors
scale_color_manual(values = cols)
gg
gg <- gg +
# Increase the legend text size and reduce white space between the plot and legend
theme(
legend.text = element_text(size = 10),
legend.margin = margin(-1, -1, -1, -1, unit = "pt")
) +
# Change the legend titles
guides(
linetype = guide_legend(title = "Direction"),
color = guide_legend(title = "Individual")
)
gg
gg
# Save the image file to your computer
ggsave(file.path(path, "behavioral_inferences.tiff"), width = 8, height = 6, units = "in", dpi = 300)
ggplot(data = scored_clusters_gg3) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "1357aabbcc"),
aes(x = start_gg, y = 0, xend = end_gg, yend = 0.5, linetype = direction_scored),
color = "orange",
linewidth = 0.5
) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "unassigned"),
aes(x = start_gg, y = 0.6, xend = end_gg, yend = 1.1, linetype = direction_scored),
color = "black",
linewidth = 0.5
) +
# Add the perching events as rounded segments, and now encode color through the column individual_initiated
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(!is.na(perching_sensor)),
aes(x = start_gg, y = 1.2, xend = end_gg, yend = 1.2, color = individual_initiated),
linewidth = 2, lineend = "round"
) +
# Add the custom linetype values to this plot
scale_linetype_manual(values = ltys) +
# Add the custom colors
scale_color_manual(values = cols) +
# Change the legend titles
guides(
linetype = guide_legend(title = "Direction"),
color = guide_legend(title = "Individual")
) +
# Add an x-axis title
xlab("Time of day (HH:MM)") +
# Remove the y-axis label
ylab("") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 3, strip.position = "left") +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
# Remove the y-axis grid lines (major and minor) inside of each panel
# Increase the legend text size and reduce white space between the plot and legend
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top",
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
legend.text = element_text(size = 10),
legend.margin = margin(-1, -1, -1, -1, unit = "pt")
)
dev.off()
ggplot(data = scored_clusters_gg3) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "1357aabbcc"),
aes(x = start_gg, y = 0, xend = end_gg, yend = 0.5, linetype = direction_scored),
color = "orange",
linewidth = 0.5
) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "unassigned"),
aes(x = start_gg, y = 0.6, xend = end_gg, yend = 1.1, linetype = direction_scored),
color = "black",
linewidth = 0.5
) +
# Add the perching events as rounded segments, and now encode color through the column individual_initiated
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(!is.na(perching_sensor)),
aes(x = start_gg, y = 1.2, xend = end_gg, yend = 1.2, color = individual_initiated),
linewidth = 2, lineend = "round"
) +
# Add the custom linetype values to this plot
scale_linetype_manual(values = ltys) +
# Add the custom colors
scale_color_manual(values = cols) +
# Change the legend titles
guides(
linetype = guide_legend(title = "Direction"),
color = guide_legend(title = "Individual")
) +
# Add an x-axis title
xlab("Time of day (HH:MM)") +
# Remove the y-axis label
ylab("") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 3, strip.position = "left") +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
# Remove the y-axis grid lines (major and minor) inside of each panel
# Increase the legend text size and reduce white space between the plot and legend
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top",
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
legend.text = element_text(size = 10),
legend.margin = margin(-1, -1, -1, -1, unit = "pt")
)
library(tidyverse
)
library(tidyverse
?is.na
is.na(x)
x <- c(1, NA, 2, 3, NA)
is.na(x)
!is.na(x)
?group_by()
group_by()
library(tidyverse)
group_by()
library(tidyverse
)
# Create a vector with character, numeric, and binary data types
# Since you're not saving the output into an object, the result will print directly to the console
c("1", 1, TRUE, FALSE)
# Create a vector with numeric and binary data types
c(1, 1, TRUE, FALSE)
# Create a vector with numeric and binary data types
c(1, 1, TRUE, FALSE)
# You can use : to create a sequence of numbers from indices 5 to the length of rfid_ts
5:length(rfid_ts)
rfid_ts <- c(rfid_ts, "08:00:00", "08:00:01", "08:00:02", "08:00:03", "11:30:00", "11:30:01", "11:30:02", "11:30:03", "11:30:04", "11:30:05")
# See the object structure in a format that includes the data type ("chr"), the number of elements ([1:14]), and a preview of the first few elements
glimpse(rfid_ts)
# Create a vector of 4 RFID timestamps or 4 elements in HH:MM:SS format
rfid_ts <- c("10:00:00", "10:05:00", "11:00:00", "11:05:00")
# Simulate outer and inner beam breaker timestamps for an entrance, an exit, and then another entrance and exit
o_irbb_ts <- c("09:59:59", "10:05:01", "10:59:59", "11:05:01")
i_irbb_ts <- c("10:00:01", "10:04:59", "11:00:01", "11:04:59")
rfid_ts <- c(rfid_ts, "08:00:00", "08:00:01", "08:00:02", "08:00:03", "11:30:00", "11:30:01", "11:30:02", "11:30:03", "11:30:04", "11:30:05")
# See the object structure in a format that includes the data type ("chr"), the number of elements ([1:14]), and a preview of the first few elements
glimpse(rfid_ts)
# Simulate some RFID detection failures across both beam breaker pairs
# These RFID detection failures occurred over 2 additional simulated entrances and 2 additional simulated exits
o_irbb_ts <- c(o_irbb_ts, "06:05:05", "06:35:08", "07:15:40", "11:10:25")
i_irbb_ts <- c(i_irbb_ts, "06:05:04", "06:35:09", "07:15:41", "11:10:24")
glimpse(o_irbb_ts)
glimpse(i_irbb_ts)
# Simulate some stray detections for the outer beam breaker
o_irbb_ts <- c(o_irbb_ts, "09:45:01", "09:45:02", "09:45:03", "09:45:04", "09:45:05", "09:45:06", "09:45:07", "09:45:08", "09:45:09", "09:45:10", "09:45:11")
glimpse(o_irbb_ts)
# You can use : to create a sequence of numbers from indices 5 to the length of rfid_ts
5:length(rfid_ts)
# You can also use the function `seq()` to create the same sequence of numeric indices
seq(from = 5, to = length(rfid_ts), by = 1)
# If you want to filter out non-consecutive elements, you can create a vector of indices with the function `c()`
c(1, 3, 5, 6, 8, 10, 11, 12, 13, 14)
# When you put any of the expressions above inside of square brackets after the object name you will pull out elements 5 to the length of rfid_ts and drop the first 4 elements
rfid_ts[5:length(rfid_ts)]
rfid_ts[seq(from = 5, to = length(rfid_ts), by = 1)]
rfid_ts[c(1, 3, 5, 6, 8, 10, 11, 12, 13, 14)]
# Finally, you can use any of the methods above to create a sequence of indices that you want to drop, and then use the `-` symbol inside of the square brackets to remove those indices. For instance:
rfid_ts[-c(1:4)] # the numbers must be wrapped in `c()` in order for this inverted filtering to work
# This statement should yield TRUE, because these vectors are not the same length
length(rfid_ts[-c(1:4)]) != length(exp_rep)
# Create a vector with information about the experimental replicate
# The argument `x` contains the metadata information that will be repeated
# The argument `times` specifies the number of times that the information will be repeated
exp_rep <- rep(x = "Pair_01", times = length(rfid_ts))
glimpse(exp_rep)
# This statement should yield TRUE, because these vectors are not the same length
length(rfid_ts[-c(1:4)]) != length(exp_rep)
sim_dats <- data.frame(exp_rep, rfid_ts[-c(1:4)])
sim_dats <- data.frame(exp_rep, rfid_ts)
glimpse(sim_dats)
sim_dats <- data.frame(replicate = exp_rep, timestamps = rfid_ts)
glimpse(sim_dats)
sim_dats <- cbind(sim_dats, rep(2023, length(rfid_ts)))
glimpse(sim_dats)
# This function returns a vector of the column names of the data frame
names(sim_dats)
# Use square bracket indexing and the function `ncol()` to find the last column name
ncol(sim_dats) # 3 columns in this data frame
# This expression gets you the name of the last column
names(sim_dats)[ncol(sim_dats)]
# Then you can overwrite the last column name with a new name
names(sim_dats)[ncol(sim_dats)] <- "year"
# Confirm that the name was changed correctly
names(sim_dats)
glimpse(sim_dats)
# Make the data frame again with only 2 columns
sim_dats <- data.frame(replicate = exp_rep, timestamps = rfid_ts)
# Use the tidyverse to add the year as the 3rd column
sim_dats %>%
glimpse() %>% # See the structure of sim_dats
dplyr::mutate(
# The nrow(.) expression means "get the number of rows for the current object", which in this case is sim_dats
year = rep(2023, nrow(.))
) %>%
glimpse() # See the structure of sim_dats with the new column year
# The name of a data frame object, followed by a $ sign and then the name of a column allows you to pull out one column at a time from a data frame. A data frame column is a vector, so when you run this code you will see a vector of values print to the console
sim_dats_rfid$day
# Load the function that combines raw data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/combine_raw_data.R")
# Load the function that detects perching events in the raw data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/detect_perching_events.R")
# Load the function that pre-processes raw data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/preprocess_detections.R")
# Load a script with utility functions that each function above requires
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/utilities.R")
View(preprocess_detections)
rm(list = ls()) # Clean global environment
library(tidyverse) # Load the set of tidyverse packages
library(data.table) # Load other packages that the ABISSMAL functions require
# Initialize an object with the path that is your working directory
path <- "/home/gsvidaurre/Desktop/ABISSMAL_vignettes"
# Load the function that detects clusters in the pre-processed data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/detect_clusters.R")
# Load the function that scores behavioral inferences about clusters
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/score_clusters.R")
# Load a script with utility functions that each function above requires
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/utilities.R")
scored_clusters <- read.csv(file.path(path, "Data/processed", "scored_detectionClusters.csv")) %>%
# The timestamps must be converted to POSIX format every time that the data is read back into R for plotting
dplyr::mutate(
start = as.POSIXct(format(as.POSIXct(start, tz = "America/New York"), "%Y-%m-%d %H:%M:%OS6")),
end = as.POSIXct(format(as.POSIXct(end, tz = "America/New York"), "%Y-%m-%d %H:%M:%OS6"))
) %>%
# Arrange the rows by increasing timestamps
dplyr::arrange(-desc(start))
glimpse(scored_clusters)
scored_clusters %>%
# Extract the day from each timestamp and make a new column with this information
dplyr::mutate(
day = lubridate::day(start)
) %>%
# Here you're using the function is.na(), which will return TRUE when it finds an NA (missing) value in the given column. By placing the ! before is.na(), you're inverting the output, so that all TRUE values are converted to FALSE. As a result, dplyr::filter will drop all rows that return the value FALSE (e.g. all rows with missing values in the column direction_scored)
dplyr::filter(!is.na(direction_scored)) %>%
# Group the data frame by both columns for which you want to count rows
group_by(day, direction_scored) %>%
# Then summarize the data: the number of rows here is the number of exits or entrances scored per day
dplyr::summarise(
n = n()
)
# is.na() returns TRUE when it encounters NAs inside of a vector (or column), and FALSE when a value inside of the vector is not NA
is.na(scored_clusters$individual_initiated)
# All NAs in this column are converted to "unassigned", but all other values were not changed
ifelse(test = is.na(scored_clusters$individual_initiated), yes = "unassigned", no = scored_clusters$individual_initiated)
# is.na() returns TRUE when it encounters NAs inside of a vector (or column), and FALSE when a value inside of the vector is not NA
is.na(scored_clusters$individual_initiated)
# All NAs in this column are converted to "unassigned", but all other values were not changed
ifelse(test = is.na(scored_clusters$individual_initiated), yes = "unassigned", no = scored_clusters$individual_initiated)
scored_clusters_gg <- scored_clusters %>%
dplyr::mutate(
# If this column has an NA value, then convert it to "unassigned"
# Else, do not change the given value
individual_initiated = ifelse(is.na(individual_initiated), "unassigned", individual_initiated),
# Repeat this process for the direction_scored column but with a different value
# Also, in the conditional statement below, you added is.na(perching_sensor) to only convert values of direction_scored when they were not labeled as perching events
direction_scored = ifelse(is.na(direction_scored) & is.na(perching_sensor), "not scored", direction_scored)
) %>%
# Next, you'll convert each of these columns to type factor and arrange the levels in order for plotting
dplyr::mutate(
individual_initiated = factor(individual_initiated, levels = c("1357aabbcc", "2468zzyyxx", "unassigned")),
direction_scored = factor(direction_scored, levels = c("entrance", "exit", "not scored"))
)
# Check the resulting changes using the function distinct() to see all of the unique values for both columns that were modified
# The NA values in the direction_scored column are expected since these refer to perching events
scored_clusters_gg %>%
distinct(individual_initiated, direction_scored)
# is.na() returns TRUE when it encounters NAs inside of a vector (or column), and FALSE when a value inside of the vector is not NA
is.na(scored_clusters$individual_initiated)
# All NAs in this column are converted to "unassigned", but all other values were not changed
ifelse(test = is.na(scored_clusters$individual_initiated), yes = "unassigned", no = scored_clusters$individual_initiated)
scored_clusters_gg <- scored_clusters %>%
dplyr::mutate(
# If this column has an NA value, then convert it to "unassigned"
# Else, do not change the given value
individual_initiated = ifelse(is.na(individual_initiated), "unassigned", individual_initiated),
# Repeat this process for the direction_scored column but with a different value
# Also, in the conditional statement below, you added is.na(perching_sensor) to only convert values of direction_scored when they were not labeled as perching events
direction_scored = ifelse(is.na(direction_scored) & is.na(perching_sensor), "not scored", direction_scored)
) %>%
# Next, you'll convert each of these columns to type factor and arrange the levels in order for plotting
dplyr::mutate(
individual_initiated = factor(individual_initiated, levels = c("1357aabbcc", "2468zzyyxx", "unassigned")),
direction_scored = factor(direction_scored, levels = c("entrance", "exit", "not scored"))
)
# Check the resulting changes using the function distinct() to see all of the unique values for both columns that were modified
# The NA values in the direction_scored column are expected since these refer to perching events
scored_clusters_gg %>%
distinct(individual_initiated, direction_scored)
# Colors will be encoded in the same order as the levels of the column individual_initiated, so orange will encode "1357aabbcc"
levels(scored_clusters_gg$individual_initiated)
cols <- c("orange", "darkgreen", "black")
# Line types will be encoded in the same order as the levels of the column direction_scored, so dotted will encode "not scored"
levels(scored_clusters_gg$direction_scored)
ltys <- c("solid", "longdash", "dotted")
ggplot() +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg %>%
dplyr::filter(individual_initiated == "1357aabbcc"),
aes(x = start, y = 0, xend = end, yend = 0.5, linetype = direction_scored),
color = "orange",
linewidth = 0.5
) +
# Add a vertical line for each non-perching event that was not assigned to either individual
geom_segment(
data = scored_clusters_gg %>%
dplyr::filter(individual_initiated == "unassigned"),
aes(x = start, y = 0.6, xend = end, yend = 1.1, linetype = direction_scored),
color = "black",
linewidth = 0.5
) +
# Add the custom linetype values to this plot
scale_linetype_manual(values = ltys) +
# Remove the y-axis label
ylab("") +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top"
)
# Create a new column in the raw data for the date of data collection
scored_clusters_gg2 <- scored_clusters_gg %>%
# First you need to create a column with information about the day
dplyr::mutate(
day = lubridate::day(start)
) %>%
dplyr::mutate(
# Then recode the label for each day and save this in a new column
day_label = ifelse(day == 1, "Day 1", day), # Here the last argument is day because the column day_label does not exist yet
day_label = ifelse(day == 2, "Day 2", day_label),
day_label = ifelse(day == 3, "Day 3", day_label)
)
# Looks good
glimpse(scored_clusters_gg2)
scored_clusters_gg2 %>%
distinct(day_label)
# Add the data frame as the default dataset for the base layer plot, so that the facet_wrap() layer below has data to plot
ggplot(data = scored_clusters_gg2) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg2 %>%
dplyr::filter(individual_initiated == "1357aabbcc"),
aes(x = start, y = 0, xend = end, yend = 0.5, linetype = direction_scored),
color = "orange",
linewidth = 0.5
) +
# Add a vertical line for each non-perching event that was not assigned to either individual
geom_segment(
data = scored_clusters_gg2 %>%
dplyr::filter(individual_initiated == "unassigned"),
aes(x = start, y = 0.6, xend = end, yend = 1.1, linetype = direction_scored),
color = "black",
linewidth = 0.5
) +
# Add the custom linetype values to this plot
scale_linetype_manual(values = ltys) +
# Remove the y-axis label
ylab("") +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top"
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 3, strip.position = "left")
scored_clusters_gg3 <- scored_clusters_gg2 %>%
dplyr::mutate(
start_gg = as.POSIXct(strptime(format(as.POSIXct(start), "%H:%M:%S"), format = "%H:%M:%S")),
end_gg = as.POSIXct(strptime(format(as.POSIXct(end), "%H:%M:%S"), format = "%H:%M:%S"))
)
# You'll see that a new year, month, and day were appended to the updated timestamps, but this is expected (see above)
glimpse(scored_clusters_gg3)
gg <- ggplot(data = scored_clusters_gg3) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "1357aabbcc"),
aes(x = start_gg, y = 0, xend = end_gg, yend = 0.5, linetype = direction_scored),
color = "orange",
linewidth = 0.5
) +
# Add a vertical line for each non-perching event that was not assigned to either individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "unassigned"),
aes(x = start_gg, y = 0.6, xend = end_gg, yend = 1.1, linetype = direction_scored),
color = "black",
linewidth = 0.5
) +
# Add the custom linetype values to this plot
scale_linetype_manual(values = ltys) +
# Remove the y-axis label
ylab("") +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top"
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 3, strip.position = "left") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
) +
# Add an x-axis title
xlab("Time of day (HH:MM)") +
# Remove the y-axis grid lines (major and minor) inside of each panel
theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()
)
gg
gg <- gg +
# Add the perching events as rounded segments, and now encode color through the column individual_initiated
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(!is.na(perching_sensor)),
aes(x = start_gg, y = 1.2, xend = end_gg, yend = 1.2, color = individual_initiated),
linewidth = 2, lineend = "round"
) +
# Add the custom colors
scale_color_manual(values = cols)
gg
gg <- gg +
# Increase the legend text size and reduce white space between the plot and legend
theme(
legend.text = element_text(size = 10),
legend.margin = margin(-1, -1, -1, -1, unit = "pt")
) +
# Change the legend titles
guides(
linetype = guide_legend(title = "Direction"),
color = guide_legend(title = "Individual")
)
gg
gg
# Save the image file to your computer
ggsave(file.path(path, "behavioral_inferences.tiff"), width = 8, height = 6, units = "in", dpi = 300)
