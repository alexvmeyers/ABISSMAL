data = scored_clusters_gg2 %>%
dplyr::filter(individual_initiated == "1357aabbcc"),
aes(x = start, y = 0, xend = end, yend = 0.5, linetype = direction_scored),
color = "orange",
linewidth = 0.5
) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg2 %>%
dplyr::filter(individual_initiated == "unassigned"),
aes(x = start, y = 0.6, xend = end, yend = 1.1, linetype = direction_scored),
color = "black",
linewidth = 0.5
) +
# Add the custom linetype values to this plot
scale_linetype_manual(values = ltys) +
# Remove the y-axis label
ylab("") +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top"
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 3, strip.position = "left")
scored_clusters_gg3 <- scored_clusters_gg2 %>%
dplyr::mutate(
start_gg = as.POSIXct(strptime(format(as.POSIXct(start), "%H:%M:%S"), format = "%H:%M:%S")),
end_gg = as.POSIXct(strptime(format(as.POSIXct(end), "%H:%M:%S"), format = "%H:%M:%S"))
)
# You'll see that a new year, month, and day were appended to the updated timestamps, but this is expected (see above)
glimpse(scored_clusters_gg3)
gg <- ggplot(data = scored_clusters_gg3) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "1357aabbcc"),
aes(x = start_gg, y = 0, xend = end_gg, yend = 0.5, linetype = direction_scored),
color = "orange",
linewidth = 0.5
) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "unassigned"),
aes(x = start_gg, y = 0.6, xend = end_gg, yend = 1.1, linetype = direction_scored),
color = "black",
linewidth = 0.5
) +
# Add the custom linetype values to this plot
scale_linetype_manual(values = ltys) +
# Remove the y-axis label
ylab("") +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top"
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 3, strip.position = "left") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
) +
# Remove the y-axis grid lines (major and minor) inside of each panel
theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()
)
gg
gg <- gg +
# Add the perching events as rounded segments, and now encode color through the column individual_initiated
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(!is.na(perching_sensor)),
aes(x = start_gg, y = 1.2, xend = end_gg, yend = 1.2, color = individual_initiated),
linewidth = 2, lineend = "round"
) +
# Add the custom colors
scale_color_manual(values = cols)
gg
gg <- gg +
# Increase the legend text size and reduce white space between the plot and legend
theme(
legend.text = element_text(size = 10),
legend.margin = margin(-1, -1, -1, -1, unit = "pt")
) +
# Change the legend titles
guides(
linetype = guide_legend(title = "Direction"),
color = guide_legend(title = "Individual")
)
gg
# Remove the y-axis label
ylab("") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 3, strip.position = "left") +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
# Remove the y-axis grid lines (major and minor) inside of each panel
# Increase the legend text size and reduce white space between the plot and legend
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top",
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
legend.text = element_text(size = 10),
legend.margin = margin(-1, -1, -1, -1, unit = "pt"),
)
# Remove the y-axis label
ylab("") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 3, strip.position = "left") +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
# Remove the y-axis grid lines (major and minor) inside of each panel
# Increase the legend text size and reduce white space between the plot and legend
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top",
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
legend.text = element_text(size = 10),
legend.margin = margin(-1, -1, -1, -1, unit = "pt")
)
ggplot(data = scored_clusters_gg3) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "1357aabbcc"),
aes(x = start_gg, y = 0, xend = end_gg, yend = 0.5, linetype = direction_scored),
color = "orange",
linewidth = 0.5
) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "unassigned"),
aes(x = start_gg, y = 0.6, xend = end_gg, yend = 1.1, linetype = direction_scored),
color = "black",
linewidth = 0.5
) +
# Add the perching events as rounded segments, and now encode color through the column individual_initiated
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(!is.na(perching_sensor)),
aes(x = start_gg, y = 1.2, xend = end_gg, yend = 1.2, color = individual_initiated),
linewidth = 2, lineend = "round"
) +
# Add the custom linetype values to this plot
scale_linetype_manual(values = ltys) +
# Add the custom colors
scale_color_manual(values = cols) +
# Change the legend titles
guides(
linetype = guide_legend(title = "Direction"),
color = guide_legend(title = "Individual")
) +
# Remove the y-axis label
ylab("") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 3, strip.position = "left") +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
# Remove the y-axis grid lines (major and minor) inside of each panel
# Increase the legend text size and reduce white space between the plot and legend
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top",
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
legend.text = element_text(size = 10),
legend.margin = margin(-1, -1, -1, -1, unit = "pt")
)
dev.off()
ggplot(data = scored_clusters_gg3) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "1357aabbcc"),
aes(x = start_gg, y = 0, xend = end_gg, yend = 0.5, linetype = direction_scored),
color = "orange",
linewidth = 0.5
) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "unassigned"),
aes(x = start_gg, y = 0.6, xend = end_gg, yend = 1.1, linetype = direction_scored),
color = "black",
linewidth = 0.5
) +
# Add the perching events as rounded segments, and now encode color through the column individual_initiated
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(!is.na(perching_sensor)),
aes(x = start_gg, y = 1.2, xend = end_gg, yend = 1.2, color = individual_initiated),
linewidth = 2, lineend = "round"
) +
# Add the custom linetype values to this plot
scale_linetype_manual(values = ltys) +
# Add the custom colors
scale_color_manual(values = cols) +
# Change the legend titles
guides(
linetype = guide_legend(title = "Direction"),
color = guide_legend(title = "Individual")
) +
# Remove the y-axis label
ylab("") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 3, strip.position = "left") +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
# Remove the y-axis grid lines (major and minor) inside of each panel
# Increase the legend text size and reduce white space between the plot and legend
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top",
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
legend.text = element_text(size = 10),
legend.margin = margin(-1, -1, -1, -1, unit = "pt")
)
gg <- ggplot(data = scored_clusters_gg3) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "1357aabbcc"),
aes(x = start_gg, y = 0, xend = end_gg, yend = 0.5, linetype = direction_scored),
color = "orange",
linewidth = 0.5
) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "unassigned"),
aes(x = start_gg, y = 0.6, xend = end_gg, yend = 1.1, linetype = direction_scored),
color = "black",
linewidth = 0.5
) +
# Add the custom linetype values to this plot
scale_linetype_manual(values = ltys) +
# Remove the y-axis label
ylab("") +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top"
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 3, strip.position = "left") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
) +
# Add an x-axis title
xlab("Time of day (HH:MM)")
gg <- ggplot(data = scored_clusters_gg3) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "1357aabbcc"),
aes(x = start_gg, y = 0, xend = end_gg, yend = 0.5, linetype = direction_scored),
color = "orange",
linewidth = 0.5
) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "unassigned"),
aes(x = start_gg, y = 0.6, xend = end_gg, yend = 1.1, linetype = direction_scored),
color = "black",
linewidth = 0.5
) +
# Add the custom linetype values to this plot
scale_linetype_manual(values = ltys) +
# Remove the y-axis label
ylab("") +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top"
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 3, strip.position = "left") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
) +
# Add an x-axis title
xlab("Time of day (HH:MM)") +
# Remove the y-axis grid lines (major and minor) inside of each panel
theme(
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()
)
gg
gg <- gg +
# Add the perching events as rounded segments, and now encode color through the column individual_initiated
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(!is.na(perching_sensor)),
aes(x = start_gg, y = 1.2, xend = end_gg, yend = 1.2, color = individual_initiated),
linewidth = 2, lineend = "round"
) +
# Add the custom colors
scale_color_manual(values = cols)
gg
gg <- gg +
# Increase the legend text size and reduce white space between the plot and legend
theme(
legend.text = element_text(size = 10),
legend.margin = margin(-1, -1, -1, -1, unit = "pt")
) +
# Change the legend titles
guides(
linetype = guide_legend(title = "Direction"),
color = guide_legend(title = "Individual")
)
gg
gg
# Save the image file to your computer
ggsave(file.path(path, "behavioral_inferences.tiff"), width = 8, height = 6, units = "in", dpi = 300)
ggplot(data = scored_clusters_gg3) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "1357aabbcc"),
aes(x = start_gg, y = 0, xend = end_gg, yend = 0.5, linetype = direction_scored),
color = "orange",
linewidth = 0.5
) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "unassigned"),
aes(x = start_gg, y = 0.6, xend = end_gg, yend = 1.1, linetype = direction_scored),
color = "black",
linewidth = 0.5
) +
# Add the perching events as rounded segments, and now encode color through the column individual_initiated
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(!is.na(perching_sensor)),
aes(x = start_gg, y = 1.2, xend = end_gg, yend = 1.2, color = individual_initiated),
linewidth = 2, lineend = "round"
) +
# Add the custom linetype values to this plot
scale_linetype_manual(values = ltys) +
# Add the custom colors
scale_color_manual(values = cols) +
# Change the legend titles
guides(
linetype = guide_legend(title = "Direction"),
color = guide_legend(title = "Individual")
) +
# Add an x-axis title
xlab("Time of day (HH:MM)") +
# Remove the y-axis label
ylab("") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 3, strip.position = "left") +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
# Remove the y-axis grid lines (major and minor) inside of each panel
# Increase the legend text size and reduce white space between the plot and legend
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top",
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
legend.text = element_text(size = 10),
legend.margin = margin(-1, -1, -1, -1, unit = "pt")
)
dev.off()
ggplot(data = scored_clusters_gg3) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "1357aabbcc"),
aes(x = start_gg, y = 0, xend = end_gg, yend = 0.5, linetype = direction_scored),
color = "orange",
linewidth = 0.5
) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "unassigned"),
aes(x = start_gg, y = 0.6, xend = end_gg, yend = 1.1, linetype = direction_scored),
color = "black",
linewidth = 0.5
) +
# Add the perching events as rounded segments, and now encode color through the column individual_initiated
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(!is.na(perching_sensor)),
aes(x = start_gg, y = 1.2, xend = end_gg, yend = 1.2, color = individual_initiated),
linewidth = 2, lineend = "round"
) +
# Add the custom linetype values to this plot
scale_linetype_manual(values = ltys) +
# Add the custom colors
scale_color_manual(values = cols) +
# Change the legend titles
guides(
linetype = guide_legend(title = "Direction"),
color = guide_legend(title = "Individual")
) +
# Add an x-axis title
xlab("Time of day (HH:MM)") +
# Remove the y-axis label
ylab("") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 3, strip.position = "left") +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
# Remove the y-axis grid lines (major and minor) inside of each panel
# Increase the legend text size and reduce white space between the plot and legend
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top",
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
legend.text = element_text(size = 10),
legend.margin = margin(-1, -1, -1, -1, unit = "pt")
)
library(tidyverse
)
library(tidyverse
?is.na
is.na(x)
x <- c(1, NA, 2, 3, NA)
is.na(x)
!is.na(x)
