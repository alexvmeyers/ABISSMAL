sim_dats_rfid %>%
pull(day) %>%
unique()
sim_dats_rfid %>%
pull(day) %>%
unique()
# Overwrite the vector exp_rep with a new vector the same length as irbb_ts
exp_rep <- rep(x = "Pair_01", times = length(irbb_ts))
sim_dats_irbb <- data.frame(replicate = exp_rep, timestamps = irbb_ts)
sim_dats_irbb <- sim_dats_irbb %>%
dplyr::mutate(
year = 2023,
month = 08,
day = 01
)
glimpse(sim_dats_irbb)
sim_dats_irbb <- sim_dats_irbb %>%
bind_rows(
sim_dats_irbb %>%
dplyr::mutate(
day = 02
)
)
glimpse(sim_dats_irbb) # Double the number of rows, looks good
19*2
# Two days, looks good
sim_dats_irbb %>%
pull(day) %>%
unique()
# For the RFID data, create a vector of the working directory and the file name that you will use for the argument file in write.csv()
# The function file.path() will combine both pieces of information into a single file path
rfid_file <- file.path(path, "simulated_rfid_data.csv")
rfid_file
# Write out the data frame as a .csv spreadsheet. Do not include row names
write.csv(x = sim_dats_rfid, file = rfid_file, row.names = FALSE)
irbb_file <- file.path(path, "simulated_irbb_data.csv")
irbb_file
write.csv(sim_dats_irbb, irbb_file, row.names = FALSE)
list.files(path)
rm(list = ls()) # Clean global environment
library(tidyverse) # Load the set of tidyverse packages
path <- "/home/gsvidaurre/Desktop/ABISSMAL_vignettes" # Initialize an object with the path that is your working directory
# Load the function that combines raw data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/combine_raw_data.R")
# Load the function that detects perching events in the raw data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/detect_perching_events.R")
# Load the function that pre-processes raw data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/preprocess_detections.R")
# Load a script with utility functions that each function above requires
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/utilities.R")
?combine_raw_data
# For the RFID data, create a vector of the working directory and the file name that you will use for the argument file in write.csv()
# The function file.path() will combine both pieces of information into a single file path
rfid_file <- file.path(path, "simulated_rfid_data_2023_08_01.csv")
rfid_file
sim_dats_rfid %>%
dplyr::filter(day == 1) %>%
glimpse()
rm(list = ls()) # Clean global environment
library(tidyverse) # Load the set of tidyverse packages
path <- "/home/gsvidaurre/Desktop/ABISSMAL_vignettes"
# Create a vector of 4 RFID timestamps in HH:MM:SS format
rfid_ts <- c("10:00:00", "10:05:00", "11:00:00", "11:05:00")
# Simulate timestamps for an entrance, an exit, and then another entrance and exit
irbb_ts <- c("09:59:59", "10:05:01", "10:59:59", "11:05:01")
rfid_ts <- c(rfid_ts, "08:00:00", "08:00:01", "08:00:02", "08:00:03", "11:30:00", "11:30:01", "11:30:02", "11:30:03", "11:30:04", "11:30:05")
# Simulate some RFID detection failures
irbb_ts <- c(irbb_ts, "06:05:05", "06:35:08", "07:15:40", "11:10:25")
glimpse(irbb_ts)
# Simulate some stray beam breaker detections
irbb_ts <- c(irbb_ts, "09:45:01", "09:45:02", "09:45:03", "09:45:04", "09:45:05", "09:45:06", "09:45:07", "09:45:08", "09:45:09", "09:45:10", "09:45:11")
glimpse(irbb_ts)
# Make a vector for the experimental replicate
exp_rep <- rep(x = "Pair_01", times = length(rfid_ts))
# Make the data frame with the experimental replicate metadata and the timestamps
sim_dats_rfid <- data.frame(replicate = exp_rep, timestamps = rfid_ts)
# Overwrite the data frame with the modified version that has columns for the year, month, and day
sim_dats_rfid <- sim_dats_rfid %>%
dplyr::mutate(
year = 2023
) %>%
dplyr::mutate(
month = 08,
day = 01
) %>%
# Allocate the first half of the detections to the first individual using nrow(.)/2, and the second half of the detctions to the second individual using nrow(.)/2 again. Both of the rep() expressions are combined into a single vector using the c() function
dplyr::mutate(
PIT_tag = c(rep("1357aabbcc", nrow(.)/2), rep("2468zzyyxx", nrow(.)/2))
)
glimpse(sim_dats_rfid)
sim_dats_rfid <- sim_dats_rfid %>%
bind_rows(
sim_dats_rfid %>%
dplyr::mutate(
day = 02
)
)
glimpse(sim_dats_rfid) # Double the number of rows, looks good
# Two days, looks good
sim_dats_rfid %>%
pull(day) %>%
unique()
# Overwrite the vector exp_rep with a new vector the same length as irbb_ts
exp_rep <- rep(x = "Pair_01", times = length(irbb_ts))
sim_dats_irbb <- data.frame(replicate = exp_rep, timestamps = irbb_ts)
sim_dats_irbb <- sim_dats_irbb %>%
dplyr::mutate(
year = 2023,
month = 08,
day = 01
)
glimpse(sim_dats_irbb)
sim_dats_irbb <- sim_dats_irbb %>%
bind_rows(
sim_dats_irbb %>%
dplyr::mutate(
day = 02
)
)
glimpse(sim_dats_irbb) # Double the number of rows, looks good
# Two days, looks good
sim_dats_irbb %>%
pull(day) %>%
unique()
sim_dats_rfid %>%
dplyr::filter(day == 1) %>%
glimpse()
# One day, looks good
sim_dats_rfid %>%
pull(day) %>%
unique()
# For the RFID data, create a vector of the working directory and the file name that you will use for the argument file in write.csv()
# The function file.path() will combine both pieces of information into a single file path
rfid_file <- file.path(path, "simulated_rfid_data_2023_08_01.csv")
rfid_file
sim_dats_rfid %>%
dplyr::filter(day == 1) %>%
# Write out the data frame as a .csv spreadsheet. Do not include row names
write.csv(x = ., file = rfid_file, row.names = FALSE)
rfid_file <- file.path(path, "simulated_rfid_data_2023_08_02.csv")
rfid_file
sim_dats_rfid %>%
dplyr::filter(day == 2) %>%
write.csv(x = ., file = rfid_file, row.names = FALSE)
irbb_file <- file.path(path, "simulated_irbb_data_2023_08_01.csv")
irbb_file
sim_dats_irbb %>%
dplyr::filter(day == 1) %>%
# By default, write.csv() will write out the object that is piped in, so you don't need to specify "x = ."
write.csv(irbb_file, row.names = FALSE)
irbb_file <- file.path(path, "simulated_irbb_data_2023_08_02.csv")
irbb_file
sim_dats_irbb %>%
dplyr::filter(day == 2) %>%
# By default, write.csv() will write out the object that is piped in, so you don't need to specify "x = ."
write.csv(irbb_file, row.names = FALSE)
# Make a vector for the experimental replicate
exp_rep <- rep(x = "Pair_01", times = length(rfid_ts))
# Make the data frame with the experimental replicate metadata and the timestamps
sim_dats_rfid <- data.frame(replicate = exp_rep, timestamps = rfid_ts)
# Overwrite the data frame with the modified version that has columns for the year, month, and day
sim_dats_rfid <- sim_dats_rfid %>%
dplyr::mutate(
year = 2023
) %>%
dplyr::mutate(
month = 08,
day = 01
) %>%
# Allocate the first half of the detections to the first individual using nrow(.)/2, and the second half of the detctions to the second individual using nrow(.)/2 again. Both of the rep() expressions are combined into a single vector using the c() function
dplyr::mutate(
PIT_tag = c(rep("1357aabbcc", nrow(.)/2), rep("2468zzyyxx", nrow(.)/2))
) %>%
dplyr::mutate(
sensor_id = "RFID"
)
glimpse(sim_dats_rfid)
sim_dats_rfid <- sim_dats_rfid %>%
bind_rows(
sim_dats_rfid %>%
dplyr::mutate(
day = 02
)
)
glimpse(sim_dats_rfid) # Double the number of rows, looks good
# Two days, looks good
sim_dats_rfid %>%
pull(day) %>%
unique()
# Overwrite the vector exp_rep with a new vector the same length as irbb_ts
exp_rep <- rep(x = "Pair_01", times = length(irbb_ts))
sim_dats_irbb <- data.frame(replicate = exp_rep, timestamps = irbb_ts)
sim_dats_irbb <- sim_dats_irbb %>%
dplyr::mutate(
year = 2023,
month = 08,
day = 01,
sensor_id = "Beam breakers"
)
glimpse(sim_dats_irbb)
sim_dats_irbb <- sim_dats_irbb %>%
bind_rows(
sim_dats_irbb %>%
dplyr::mutate(
day = 02
)
)
glimpse(sim_dats_irbb) # Double the number of rows, looks good
# Two days, looks good
sim_dats_irbb %>%
pull(day) %>%
unique()
# Pipe the data frame into the filter() function
sim_dats_rfid %>%
# Filter the data frame by pulling out all rows in which the day column was equal to 1
dplyr::filter(day == 1) %>%
glimpse()
# One day, looks good
sim_dats_rfid %>%
pull(day) %>%
unique()
# Pipe the data frame into the filter() function
sim_dats_rfid %>%
# Filter the data frame by pulling out all rows in which the day column was equal to 1
dplyr::filter(day == 1) %>%
glimpse()
# One day, looks good
sim_dats_rfid %>%
pull(day) %>%
unique()
# One day, looks good
sim_dats_rfid %>%
dplyr::filter(day == 1) %>%
pull(day) %>%
unique()
# For the RFID data, create a vector of the working directory and the file name that you will use for the argument file in write.csv()
# The function file.path() will combine both pieces of information into a single file path
rfid_file <- file.path(path, "simulated_rfid_data_2023_08_01.csv")
rfid_file
sim_dats_rfid %>%
dplyr::filter(day == 1) %>%
# Write out the data frame as a .csv spreadsheet. Do not include row names
# Remember that the "." means the function will use the object that is piped in, which here is the data frame filtered by day 1
write.csv(x = ., file = rfid_file, row.names = FALSE)
# For the RFID data, create a vector of the working directory and the file name that you will use for the argument file in write.csv()
# The function file.path() will combine both pieces of information into a single file path
rfid_file <- file.path(path, "RFID_simulated_Pair-01_2023_08_01.csv")
rfid_file
sim_dats_rfid %>%
dplyr::filter(day == 1) %>%
# Write out the data frame as a .csv spreadsheet. Do not include row names
# Remember that the "." means the function will use the object that is piped in, which here is the data frame filtered by day 1
write.csv(x = ., file = rfid_file, row.names = FALSE)
rfid_file <- file.path(path, "RFID_simulated_Pair-01_2023_08_02.csv")
rfid_file
sim_dats_rfid %>%
dplyr::filter(day == 2) %>%
write.csv(x = ., file = rfid_file, row.names = FALSE)
irbb_file <- file.path(path, "IRBB_simulated_Pair-01_2023_08_01.csv")
irbb_file
sim_dats_irbb %>%
dplyr::filter(day == 1) %>%
# By default, write.csv() will write out the object that is piped in, so you don't need to specify "x = ."
write.csv(irbb_file, row.names = FALSE)
irbb_file <- file.path(path, "IRBB_simulated_Pair-01_2023_08_02.csv")
irbb_file
sim_dats_irbb %>%
dplyr::filter(day == 2) %>%
# By default, write.csv() will write out the object that is piped in, so you don't need to specify "x = ."
write.csv(irbb_file, row.names = FALSE)
list.files(path)
rm(list = ls()) # Clean global environment
library(tidyverse) # Load the set of tidyverse packages
path <- "/home/gsvidaurre/Desktop/ABISSMAL_vignettes" # Initialize an object with the path that is your working directory
# Create a vector of 4 RFID timestamps in HH:MM:SS format
rfid_ts <- c("10:00:00", "10:05:00", "11:00:00", "11:05:00")
# Add perching events to the RFID data
rfid_ts <- c(rfid_ts, "08:00:00", "08:00:01", "08:00:02", "08:00:03", "11:30:00", "11:30:01", "11:30:02", "11:30:03", "11:30:04", "11:30:05")
glimpse(rfid_ts)
# For the beam breakers, simulate timestamps for an entrance, an exit, and then another entrance and exit
irbb_ts <- c("09:59:59", "10:05:01", "10:59:59", "11:05:01")
# Simulate some RFID detection failures for the beam breaker data
irbb_ts <- c(irbb_ts, "06:05:05", "06:35:08", "07:15:40", "11:10:25")
# Simulate some stray beam breaker detections
irbb_ts <- c(irbb_ts, "09:45:01", "09:45:02", "09:45:03", "09:45:04", "09:45:05", "09:45:06", "09:45:07", "09:45:08", "09:45:09", "09:45:10", "09:45:11")
glimpse(irbb_ts)
# Make a vector for the experimental replicate
exp_rep <- rep(x = "Pair_01", times = length(rfid_ts))
# Make the data frame with the experimental replicate metadata and the timestamps
sim_dats_rfid <- data.frame(replicate = exp_rep, timestamps = rfid_ts)
# Overwrite the data frame with the modified version that has columns for the year, month, and day
sim_dats_rfid <- sim_dats_rfid %>%
dplyr::mutate(
year = 2023
) %>%
dplyr::mutate(
month = 08,
day = 01
) %>%
# Allocate the first half of the detections to the first individual using nrow(.)/2, and the second half of the detctions to the second individual using nrow(.)/2 again. Both of the rep() expressions are combined into a single vector using the c() function
dplyr::mutate(
PIT_tag = c(rep("1357aabbcc", nrow(.)/2), rep("2468zzyyxx", nrow(.)/2))
) %>%
dplyr::mutate(
sensor_id = "RFID"
)
glimpse(sim_dats_rfid)
sim_dats_rfid <- sim_dats_rfid %>%
bind_rows(
sim_dats_rfid %>%
dplyr::mutate(
day = 02
)
)
glimpse(sim_dats_rfid) # Double the number of rows, looks good
# The name of a data frame object, followed by a $ sign and then the name of a column allows you to pull out one column at a time from a data frame. A data frame column is a vector, so when you run this code you will see a vector of values print to the console
sim_dats_rfid$day
# You can also access a column in a data frame by using double square brackets after the name of the data frame, and placing the column name in quotes inside of the inner brackets
sim_dats_rfid[["day"]]
# You can use the function unique() to see the unique values of any vector, including a column of a data frame
unique(sim_dats_rfid$day) # Two days, looks good
unique(sim_dats_rfid[["day"]]) # Two days, looks good
# Two days, looks good
sim_dats_rfid %>%
pull(day) %>%
unique()
# Overwrite the vector exp_rep with a new vector the same length as irbb_ts
exp_rep <- rep(x = "Pair_01", times = length(irbb_ts))
sim_dats_irbb <- data.frame(replicate = exp_rep, timestamps = irbb_ts)
sim_dats_irbb <- sim_dats_irbb %>%
dplyr::mutate(
year = 2023,
month = 08,
day = 01,
sensor_id = "Beam breakers"
)
glimpse(sim_dats_irbb)
sim_dats_irbb <- sim_dats_irbb %>%
bind_rows(
sim_dats_irbb %>%
dplyr::mutate(
day = 02
)
)
glimpse(sim_dats_irbb) # Double the number of rows, looks good
# Two days, looks good
sim_dats_irbb %>%
pull(day) %>%
unique()
# Pipe the data frame into the filter() function
sim_dats_rfid %>%
# Filter the data frame by pulling out all rows in which the day column was equal to 1
dplyr::filter(day == 1) %>%
glimpse()
# One day, looks good
sim_dats_rfid %>%
dplyr::filter(day == 1) %>%
pull(day) %>%
unique()
# For the RFID data, create a vector of the working directory and the file name that you will use for the argument file in write.csv()
# The function file.path() will combine both pieces of information into a single file path
rfid_file <- file.path(path, "RFID_simulated_Pair-01_2023_08_01.csv")
rfid_file
sim_dats_rfid %>%
dplyr::filter(day == 1) %>%
# Write out the data frame as a .csv spreadsheet. Do not include row names
# Remember that the "." means the function will use the object that is piped in, which here is the data frame filtered by day 1
write.csv(x = ., file = rfid_file, row.names = FALSE)
rfid_file <- file.path(path, "RFID_simulated_Pair-01_2023_08_02.csv")
rfid_file
sim_dats_rfid %>%
dplyr::filter(day == 2) %>%
write.csv(x = ., file = rfid_file, row.names = FALSE)
irbb_file <- file.path(path, "IRBB_simulated_Pair-01_2023_08_01.csv")
irbb_file
sim_dats_irbb %>%
dplyr::filter(day == 1) %>%
# By default, write.csv() will write out the object that is piped in, so you don't need to specify "x = ."
write.csv(irbb_file, row.names = FALSE)
irbb_file <- file.path(path, "IRBB_simulated_Pair-01_2023_08_02.csv")
irbb_file
sim_dats_irbb %>%
dplyr::filter(day == 2) %>%
# By default, write.csv() will write out the object that is piped in, so you don't need to specify "x = ."
write.csv(irbb_file, row.names = FALSE)
list.files(path)
read.csv(file.path(path, "IRBB_simulated_Pair-01_2023_08_02.csv"))
read.csv(file.path(path, "IRBB_simulated_Pair-01_2023_08_02.csv")) %>%
glimpse()
# Load the function that combines raw data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/combine_raw_data.R")
# Load the function that detects perching events in the raw data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/detect_perching_events.R")
# Load the function that pre-processes raw data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/preprocess_detections.R")
# Load a script with utility functions that each function above requires
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/utilities.R")
rm(list = ls()) # Clean global environment
library(tidyverse) # Load the set of tidyverse packages
path <- "/home/gsvidaurre/Desktop/ABISSMAL_vignettes" # Initialize an object with the path that is your working directory
# Create a vector of 4 RFID timestamps in HH:MM:SS format
rfid_ts <- c("10:00:00", "10:05:00", "11:00:00", "11:05:00")
# Add perching events to the RFID data
rfid_ts <- c(rfid_ts, "08:00:00", "08:00:01", "08:00:02", "08:00:03", "11:30:00", "11:30:01", "11:30:02", "11:30:03", "11:30:04", "11:30:05")
glimpse(rfid_ts)
# For the beam breakers, simulate timestamps for an entrance, an exit, and then another entrance and exit
irbb_ts <- c("09:59:59", "10:05:01", "10:59:59", "11:05:01")
# Simulate some RFID detection failures for the beam breaker data
irbb_ts <- c(irbb_ts, "06:05:05", "06:35:08", "07:15:40", "11:10:25")
# Simulate some stray beam breaker detections
irbb_ts <- c(irbb_ts, "09:45:01", "09:45:02", "09:45:03", "09:45:04", "09:45:05", "09:45:06", "09:45:07", "09:45:08", "09:45:09", "09:45:10", "09:45:11")
glimpse(irbb_ts)
# Make a vector for the experimental replicate
exp_rep <- rep(x = "Pair_01", times = length(rfid_ts))
# Make the data frame with the experimental replicate metadata and the timestamps
sim_dats_rfid <- data.frame(replicate = exp_rep, timestamps = rfid_ts)
# Overwrite the data frame with the modified version that has columns for the year, month, and day
sim_dats_rfid <- sim_dats_rfid %>%
dplyr::mutate(
year = 2023
) %>%
dplyr::mutate(
month = 08,
day = 01
) %>%
# Allocate the first half of the detections to the first individual using nrow(.)/2, and the second half of the detctions to the second individual using nrow(.)/2 again. Both of the rep() expressions are combined into a single vector using the c() function
dplyr::mutate(
PIT_tag = c(rep("1357aabbcc", nrow(.)/2), rep("2468zzyyxx", nrow(.)/2))
) %>%
dplyr::mutate(
sensor_id = "RFID"
)
glimpse(sim_dats_rfid)
sim_dats_rfid <- sim_dats_rfid %>%
bind_rows(
sim_dats_rfid %>%
dplyr::mutate(
day = 02
)
)
glimpse(sim_dats_rfid) # Double the number of rows, looks good
# Overwrite the vector exp_rep with a new vector the same length as irbb_ts
exp_rep <- rep(x = "Pair_01", times = length(irbb_ts))
sim_dats_irbb <- data.frame(replicate = exp_rep, timestamps = irbb_ts)
sim_dats_irbb <- sim_dats_irbb %>%
dplyr::mutate(
year = 2023,
month = 08,
day = 01,
sensor_id = "Beam breakers"
)
glimpse(sim_dats_irbb)
sim_dats_irbb <- sim_dats_irbb %>%
bind_rows(
sim_dats_irbb %>%
dplyr::mutate(
day = 02
)
)
glimpse(sim_dats_irbb) # Double the number of rows, looks good
# Two days, looks good
sim_dats_irbb %>%
pull(day) %>%
unique()
# Pipe the data frame into the filter() function
sim_dats_rfid %>%
# Filter the data frame by pulling out all rows in which the day column was equal to 1
dplyr::filter(day == 1) %>%
glimpse()
# One day, looks good
sim_dats_rfid %>%
dplyr::filter(day == 1) %>%
pull(day) %>%
unique()
?write.csv
# For the RFID data, create a vector of the working directory and the file name that you will use for the argument file in write.csv()
# The function file.path() will combine both pieces of information into a single file path
rfid_file <- file.path(path, "RFID_simulated_Pair-01_2023_08_01.csv")
rfid_file
sim_dats_rfid %>%
dplyr::filter(day == 1) %>%
# Write out the data frame as a .csv spreadsheet. Do not include row names
# Remember that the "." means the function will use the object that is piped in, which here is the data frame filtered by day 1
write.csv(x = ., file = rfid_file, row.names = FALSE)
rfid_file <- file.path(path, "RFID_simulated_Pair-01_2023_08_02.csv")
rfid_file
sim_dats_rfid %>%
dplyr::filter(day == 2) %>%
write.csv(x = ., file = rfid_file, row.names = FALSE)
irbb_file <- file.path(path, "IRBB_simulated_Pair-01_2023_08_01.csv")
irbb_file
sim_dats_irbb %>%
dplyr::filter(day == 1) %>%
# By default, write.csv() will write out the object that is piped in, so you don't need to specify "x = ."
write.csv(irbb_file, row.names = FALSE)
irbb_file <- file.path(path, "IRBB_simulated_Pair-01_2023_08_02.csv")
irbb_file
sim_dats_irbb %>%
dplyr::filter(day == 2) %>%
# By default, write.csv() will write out the object that is piped in, so you don't need to specify "x = ."
write.csv(irbb_file, row.names = FALSE)
list.files(path)
read.csv(file.path(path, "IRBB_simulated_Pair-01_2023_08_02.csv")) %>%
glimpse()
# Load the function that combines raw data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/combine_raw_data.R")
# Load the function that detects perching events in the raw data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/detect_perching_events.R")
# Load the function that pre-processes raw data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/preprocess_detections.R")
# Load a script with utility functions that each function above requires
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/utilities.R")
