glimpse(rfid_ts)
# Simulate outer and inner beam breaker timestamps for an entrance, an exit, and then another entrance and exit
o_irbb_ts <- c("09:59:59", "10:05:01", "10:59:59", "11:05:01")
i_irbb_ts <- c("10:00:01", "10:04:59", "11:00:01", "11:04:59")
# Simulate some RFID detection failures across both beam breaker pairs
o_irbb_ts <- c(o_irbb_ts, "06:05:05", "06:35:08", "07:15:40", "11:10:25")
i_irbb_ts <- c(i_irbb_ts, "06:05:04", "06:35:09", "07:15:41", "11:10:24")
# Simulate some stray detections for the outer beam breaker
o_irbb_ts <- c(o_irbb_ts, "09:45:01", "09:45:02", "09:45:03", "09:45:04", "09:45:05", "09:45:06", "09:45:07", "09:45:08", "09:45:09", "09:45:10", "09:45:11")
glimpse(o_irbb_ts)
glimpse(i_irbb_ts)
# Make a vector for the experimental replicate
exp_rep <- rep(x = "Nest_01", times = length(rfid_ts))
# Make a vector of the PIT tag codes
# Allocate the first 4 RFID detections to the first individual, the first perching event (4 detections) to the first individual, and the second perching event (6 detections) to the second individual
# The 3 rep() expressions are combined into a single vector using the c() function
PIT_tag <- c(rep("1357aabbcc", 4), rep("1357aabbcc", 4), rep("2468zzyyxx", 6))
# Make the data frame with the experimental replicate metadata and the timestamps
sim_dats_rfid <- data.frame(chamber_id = exp_rep, timestamps = rfid_ts)
# Overwrite the data frame with the modified version that has columns for the year, month, and day
sim_dats_rfid <- sim_dats_rfid %>%
dplyr::mutate(
year = 2023
) %>%
dplyr::mutate(
month = 08,
day = 01
) %>%
# Add the PIT tag metadata as a new column
dplyr::mutate(
PIT_tag = PIT_tag
) %>%
dplyr::mutate(
sensor_id = "RFID"
)
glimpse(sim_dats_rfid)
sim_dats_rfid <- sim_dats_rfid %>%
bind_rows(
sim_dats_rfid %>%
dplyr::mutate(
day = 02
)
) %>%
bind_rows(
sim_dats_rfid %>%
dplyr::mutate(
day = 03
)
)
glimpse(sim_dats_rfid) # Triple the number of rows, looks good
# Overwrite the vector exp_rep with a new vector the same length as o_irbb_ts and i_irbb_ts together
exp_rep <- rep(x = "Nest_01", times = length(o_irbb_ts) + length(i_irbb_ts))
# Here the timestamps of both beam breaker pairs have been added to the same column using c()
sim_dats_irbb <- data.frame(chamber_id = exp_rep, timestamps = c(o_irbb_ts, i_irbb_ts))
sim_dats_irbb <- sim_dats_irbb %>%
dplyr::mutate(
year = 2023,
month = 08,
day = 01,
# Add a unique sensor identifier by beam breaker pair
# Each unique label is repeated for the length of the vector of timestamps of each beam breaker pair
sensor_id = c(rep("Outer Beam Breakers", length(o_irbb_ts)), rep("Inner Beam Breakers", length(i_irbb_ts)))
)
glimpse(sim_dats_irbb)
sim_dats_irbb <- sim_dats_irbb %>%
bind_rows(
sim_dats_irbb %>%
dplyr::mutate(
day = 02
)
) %>%
bind_rows(
sim_dats_irbb %>%
dplyr::mutate(
day = 03
)
)
glimpse(sim_dats_irbb) # Triple the number of rows, looks good
# Three days, looks good
sim_dats_irbb %>%
pull(day) %>%
unique()
View(sim_dats_irbb)
# Start by iterating over sensors
invisible(lapply(1:length(sensors), function(x){
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- days[[sensors[x]]]
# For each sensor, iterate over days
lapply(1:length(days_tmp), function(y){
# Get the data frame per sensor type using x and then filter by day using y
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y]) %>%
# Use double and single bracket filtering to pull out the right file name
write.csv(file = file.path(file_dirs[[x]], files[[x]][y]), row.names = FALSE)
})
}))
# Make a vector of sensor labels
sensors <- c("RFID", "IRBB")
sensors
# Make a named list of the custom file names to write out
files <- list(
`RFID` = c("RFID_simulated_Pair-01_2023_08_01.csv", "RFID_simulated_Pair-01_2023_08_02.csv", "RFID_simulated_Pair-01_2023_08_03.csv"),
`IRBB` = c("IRBB_simulated_Pair-01_2023_08_01.csv", "IRBB_simulated_Pair-01_2023_08_02.csv", "IRBB_simulated_Pair-01_2023_08_03.csv")
)
files
# Make a list of file paths per sensor that will be used inside of the loop
file_dirs <- list(
`RFID` = file.path(path, "Data/RFID"),
`IRBB` = file.path(path, "Data/IRBB")
)
file_dirs
# Make a list of the days to write out for each sensor
# This could be a single vector rather than a list since you want to write out the same days per sensor, but a list is useful in case you wanted to change the days (and number of days) to write out per sensor
days <- list(
`RFID` = c(1, 2, 3),
`IRBB` = c(1, 2, 3)
)
days
# Finally, you need to make a list of the data frames that you want to write out. Since you already know how to filter data frames by day, that code can go inside of the loop, and you only need to specify a data frame per sensor type here
dats <- list(
`RFID` = sim_dats_rfid,
`IRBB` = sim_dats_irbb
)
glimpse(dats)
# Start by iterating over sensors
invisible(lapply(1:length(sensors), function(x){
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- days[[sensors[x]]]
# For each sensor, iterate over days
lapply(1:length(days_tmp), function(y){
# Get the data frame per sensor type using x and then filter by day using y
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y]) %>%
# Use double and single bracket filtering to pull out the right file name
write.csv(file = file.path(file_dirs[[x]], files[[x]][y]), row.names = FALSE)
})
}))
rm(list = ls()) # Clean global environment
library(tidyverse) # Load the set of tidyverse packages
library(data.table) # Load other packages that the ABISSMAL functions require
# Initialize an object with the path that is your working directory
path <- "/home/gsvidaurre/Desktop/ABISSMAL_vignettes"
# Load the function that combines raw data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/combine_raw_data.R")
# Load the function that detects perching events in the raw data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/detect_perching_events.R")
# Load the function that pre-processes raw data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/preprocess_detections.R")
# Load a script with utility functions that each function above requires
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/utilities.R")
combine_raw_data(sensors = "RFID", path = path, data_dir = "Data", out_dir = "Data/raw_combined", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
list.files(file.path(path, "Data/raw_combined"), pattern = ".csv$")
rfid_data <- read.csv(file.path(path, "Data/raw_combined", "combined_raw_data_RFID.csv"))
glimpse(rfid_data)
combine_raw_data(sensors = c("RFID", "IRBB"), path = path, data_dir = "Data", out_dir = "Data/raw_combined", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
list.files(file.path(path, "Data/raw_combined"), pattern = ".csv$")
detect_perching_events(file_nm = "combined_raw_data_RFID.csv", threshold = 2, run_length = 2, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = "PIT_tag", rfid_label = "RFID", general_metadata_cols = c("chamber_id", "sensor_id"), path = file.path(path, "Data"), data_dir = "raw_combined", out_dir = "processed", out_file_prefix = "perching_events", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
perching <- read.csv(file.path(path, "Data", "processed", "perching_events_RFID.csv"))
glimpse(perching)
# The timestamps when each perching event started
perching$perching_start
# The timestamps when each perching event ended
perching$perching_end
# The timestamps when each perching event ended
perching$perching_end
# The unique PIT tag identifier that tells you which individual was perched on the RFID antenna
perching$PIT_tag
View(perching)
preprocess_detections(sensor = "RFID", timestamps_col_nm = "timestamp_ms", group_col_nm = "PIT_tag", mode = "thin", thin_threshold = 2, drop_tag = NULL, path = file.path(path, "Data"), data_dir = "raw_combined", out_dir = "processed", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
rfid_pp <- read.csv(file.path(path, "Data/processed/pre_processed_data_RFID.csv"))
glimpse(rfid_pp)
preprocess_detections(sensor = "IRBB", timestamps_col_nm = "timestamp_ms", group_col_nm = "sensor_id", mode = "thin", thin_threshold = 2, drop_tag = NULL, path = file.path(path, "Data"), data_dir = "raw_combined", out_dir = "processed", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
list.files(file.path(path, "Data/processed"))
irbb_pp <- read.csv(file.path(path, "Data/processed/pre_processed_data_IRBB.csv"))
glimpse(irbb_pp)
rfid_raw <- read.csv(file.path(path, "Data/raw_combined", "combined_raw_data_RFID.csv")) %>%
# The timestamps must be converted to POSIX format every time that the data is read back into R for plotting
dplyr::mutate(
timestamp_ms = as.POSIXct(format(as.POSIXct(timestamp_ms, tz = "America/New York"), "%Y-%m-%d %H:%M:%OS6"))
) %>%
dplyr::arrange(-desc(timestamp_ms))
# You should see that the timestamp_ms is in "dttm" format, which means that the POSIX conversion was done correctly
glimpse(rfid_raw)
rfid_pp <- read.csv(file.path(path, "Data/processed/pre_processed_data_RFID.csv")) %>%
# The timestamps must be converted to POSIX format every time that the data is read back into R for plotting
dplyr::mutate(
timestamp_ms = as.POSIXct(format(as.POSIXct(timestamp_ms, tz = "America/New York"), "%Y-%m-%d %H:%M:%OS6"))
) %>%
dplyr::arrange(-desc(timestamp_ms))
glimpse(rfid_pp)
rfid_perch <- read.csv(file.path(path, "Data/processed/perching_events_RFID.csv")) %>%
# The start and end timestamps must be converted to POSIX format every time that the data is read back into R for plotting
dplyr::mutate(
perching_start = as.POSIXct(format(as.POSIXct(perching_start, tz = "America/New York"), "%Y-%m-%d %H:%M:%OS6")),
perching_end = as.POSIXct(format(as.POSIXct(perching_end, tz = "America/New York"), "%Y-%m-%d %H:%M:%OS6"))
) %>%
dplyr::arrange(-desc(perching_start))
glimpse(rfid_perch)
rfid_combined <- rfid_raw %>%
dplyr::select(sensor_id, day, timestamp_ms) %>%
dplyr::mutate(
dataset = "raw"
) %>%
bind_rows(
rfid_pp %>%
dplyr::select(sensor_id, day, timestamp_ms) %>%
dplyr::mutate(
dataset = "pre-processed"
)
)
glimpse(rfid_combined)
ggplot(data = rfid_combined) +
# Add a vertical line for each timestamp
geom_segment(
aes(x = timestamp_ms, y = 0, xend = timestamp_ms, yend = 1, color = dataset),
linewidth = 0.3
)
ggplot(data = rfid_combined) +
# Add a vertical line for each timestamp
geom_segment(
aes(x = timestamp_ms, y = 0, xend = timestamp_ms, yend = 1, color = dataset),
linewidth = 0.3
) +
scale_color_manual(values = c("orange", "darkgreen"))
# Change the column dataset to data type "factor"
# By specifying "raw" first in the argument levels, you are reordering the factor levels so that "raw" comes first
rfid_combined <- rfid_combined %>%
dplyr::mutate(
dataset = factor(dataset, levels = c("raw", "pre-processed"))
)
# The dataset column is now type "fct", or "factor"
glimpse(rfid_combined)
# The levels of the factor column are ordered with "raw" first, rather than in alphabetical order
levels(rfid_combined$dataset)
ggplot(data = rfid_combined) +
# Add a vertical line for each timestamp
geom_segment(
aes(x = timestamp_ms, y = 0, xend = timestamp_ms, yend = 1, color = dataset),
linewidth = 0.3
) +
scale_color_manual(values = c("orange", "darkgreen"))
ggplot(data = rfid_combined) +
# Add a vertical line for each timestamp
geom_segment(
aes(x = timestamp_ms, y = 0, xend = timestamp_ms, yend = 1, color = dataset),
linewidth = 0.3
) +
scale_color_manual(values = c("orange", "darkgreen")) +
# ~ is equivalent to "by", so that you're creating panels by the unique values in the column dataset
facet_wrap(~ dataset, nrow = 2, strip.position = "left")
ggplot(data = rfid_combined %>%
group_by(dataset) %>%
slice(1:3) %>%
ungroup()
) +
# Add a vertical line for each timestamp
geom_segment(
aes(x = timestamp_ms, y = 0, xend = timestamp_ms, yend = 1, color = dataset),
linewidth = 0.3
) +
scale_color_manual(values = c("orange", "darkgreen")) +
# ~ is equivalent to "by", so that you're creating panels by the unique values in the column dataset
facet_wrap(~ dataset, nrow = 2, strip.position = "left")
ggplot(data = rfid_combined %>%
group_by(dataset) %>%
slice(1:4) %>%
ungroup()
) +
# Add a vertical line for each timestamp
geom_segment(
aes(x = timestamp_ms, y = 0, xend = timestamp_ms, yend = 1, color = dataset),
linewidth = 0.3
) +
scale_color_manual(values = c("orange", "darkgreen")) +
# ~ is equivalent to "by", so that you're creating panels by the unique values in the column dataset
facet_wrap(~ dataset, nrow = 2, strip.position = "left")
ggplot(data = rfid_combined %>%
group_by(dataset) %>%
slice(1:6) %>%
ungroup()
) +
# Add a vertical line for each timestamp
geom_segment(
aes(x = timestamp_ms, y = 0, xend = timestamp_ms, yend = 1, color = dataset),
linewidth = 0.3
) +
scale_color_manual(values = c("orange", "darkgreen")) +
# ~ is equivalent to "by", so that you're creating panels by the unique values in the column dataset
facet_wrap(~ dataset, nrow = 2, strip.position = "left")
ggplot(data = rfid_combined %>%
group_by(dataset) %>%
slice(1:3) %>%
ungroup()
) +
# Add a vertical line for each timestamp
geom_segment(
aes(x = timestamp_ms, y = 0, xend = timestamp_ms, yend = 1, color = dataset),
linewidth = 0.3
) +
scale_color_manual(values = c("orange", "darkgreen")) +
# ~ is equivalent to "by", so that you're creating panels by the unique values in the column dataset
facet_wrap(~ dataset, nrow = 2, strip.position = "left")
rfid_combined <- rfid_raw %>%
dplyr::select(sensor_id, day, timestamp_ms) %>%
dplyr::mutate(
dataset = "raw"
) %>%
bind_rows(
rfid_pp %>%
dplyr::select(sensor_id, day, timestamp_ms) %>%
dplyr::mutate(
dataset = "pre-processed"
)
) %>%
# Order the data frame by timestamps. The -desc() inside of arrange() means that the timestamps will be arranged in increasing order
dplyr::arrange(-desc(timestammp_ms))
glimpse(rfid_combined)
rfid_combined <- rfid_raw %>%
dplyr::select(sensor_id, day, timestamp_ms) %>%
dplyr::mutate(
dataset = "raw"
) %>%
bind_rows(
rfid_pp %>%
dplyr::select(sensor_id, day, timestamp_ms) %>%
dplyr::mutate(
dataset = "pre-processed"
)
) %>%
# Order the data frame by timestamps. The -desc() inside of arrange() means that the timestamps will be arranged in increasing order
dplyr::arrange(-desc(timestamp_ms))
glimpse(rfid_combined)
# Change the column dataset to data type "factor"
# By specifying "raw" first in the argument levels, you are reordering the factor levels so that "raw" comes first
rfid_combined <- rfid_combined %>%
dplyr::mutate(
dataset = factor(dataset, levels = c("raw", "pre-processed"))
)
# The dataset column is now type "fct", or "factor"
glimpse(rfid_combined)
# The levels of the factor column are ordered with "raw" first, rather than in alphabetical order
levels(rfid_combined$dataset)
ggplot(data = rfid_combined) +
# Add a vertical line for each timestamp
geom_segment(
aes(x = timestamp_ms, y = 0, xend = timestamp_ms, yend = 1, color = dataset),
linewidth = 0.3
) +
scale_color_manual(values = c("orange", "darkgreen"))
ggplot(data = rfid_combined) +
# Add a vertical line for each timestamp
geom_segment(
aes(x = timestamp_ms, y = 0, xend = timestamp_ms, yend = 1, color = dataset),
linewidth = 0.3
) +
scale_color_manual(values = c("orange", "darkgreen")) +
# ~ is equivalent to "by", so that you're creating panels by the unique values in the column dataset
facet_wrap(~ dataset, nrow = 2, strip.position = "left")
ggplot(data = rfid_combined %>%
group_by(dataset) %>%
slice(1:3) %>%
ungroup()
) +
# Add a vertical line for each timestamp
geom_segment(
aes(x = timestamp_ms, y = 0, xend = timestamp_ms, yend = 1, color = dataset),
linewidth = 0.3
) +
scale_color_manual(values = c("orange", "darkgreen")) +
# ~ is equivalent to "by", so that you're creating panels by the unique values in the column dataset
facet_wrap(~ dataset, nrow = 2, strip.position = "left")
rfid_combined %>%
group_by(dataset) %>%
slice(1:3)
ggplot(data = rfid_combined %>%
group_by(dataset) %>%
slice(1:2) %>%
ungroup()
) +
# Add a vertical line for each timestamp
geom_segment(
aes(x = timestamp_ms, y = 0, xend = timestamp_ms, yend = 1, color = dataset),
linewidth = 0.3
) +
scale_color_manual(values = c("orange", "darkgreen")) +
# ~ is equivalent to "by", so that you're creating panels by the unique values in the column dataset
facet_wrap(~ dataset, nrow = 2, strip.position = "left")
ggplot(data = rfid_combined %>%
group_by(dataset) %>%
slice(1:2) %>%
ungroup()
) +
# Add a vertical line for each timestamp
geom_segment(
aes(x = timestamp_ms, y = 0, xend = timestamp_ms, yend = 1, color = dataset),
linewidth = 0.3
) +
scale_color_manual(values = c("orange", "darkgreen")) +
# ~ is equivalent to "by", so that you're creating panels by the unique values in the column dataset
facet_wrap(~ dataset, nrow = 2, strip.position = "left")
ggplot(data = rfid_combined %>%
group_by(dataset) %>%
slice(1:2) %>%
ungroup()
) +
# Add a vertical line for each timestamp
geom_segment(
aes(x = timestamp_ms, y = 0, xend = timestamp_ms, yend = 1, color = dataset),
linewidth = 0.3
) +
scale_color_manual(values = c("orange", "darkgreen")) +
# ~ is equivalent to "by", so that you're creating panels by the unique values in the column dataset
facet_wrap(~ dataset, nrow = 2, strip.position = "left")
ggplot(data = rfid_combined) +
# Add a vertical line for each timestamp
geom_segment(
aes(x = timestamp_ms, y = 0, xend = timestamp_ms, yend = 1, color = dataset),
linewidth = 0.3
) +
scale_color_manual(values = c("orange", "darkgreen")) +
# ~ is equivalent to "by", so that you're creating panels by the unique values in the column dataset
facet_wrap(~ dataset, nrow = 2, strip.position = "left") +
# Add the perching events to the plot
geom_segment(
data = rfid_perch,
aes(x = perching_start, xend = perching_end, y = 1.2, yend = 1.5),
color = "blue",
linewidth = 0.3
)
gg <- ggplot(data = rfid_combined) +
# Add a vertical line for each timestamp
geom_segment(
aes(x = timestamp_ms, y = 0, xend = timestamp_ms, yend = 1, color = dataset),
linewidth = 0.3
) +
scale_color_manual(values = c("orange", "darkgreen")) +
# ~ is equivalent to "by", so that you're creating panels by the unique values in the column dataset
facet_wrap(~ dataset, nrow = 2, strip.position = "left") +
# Add the perching events to the plot
geom_segment(
data = rfid_perch,
aes(x = perching_start, xend = perching_end, y = 1.2, yend = 1.5),
color = "blue",
linewidth = 0.3
) +
theme(
legend.position = "top"
)
gg
gg <- gg +
# Change the x and y axis labels
xlab("Date and time") +
# The y-axis does not contain information right now, so it can be blank
ylab("") +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top"
)
gg
gg
# Save the image file to your computer
ggsave(file.path(path, "raw_processed_perching.tiff"), width = 8, height = 6, units = "in", dpi = 300)
rm(list = ls()) # Clean global environment
library(tidyverse) # Load the set of tidyverse packages
library(data.table) # Load other packages that the ABISSMAL functions require
# Initialize an object with the path that is your working directory
path <- "/home/gsvidaurre/Desktop/ABISSMAL_vignettes"
# Load the function that detects clusters in the pre-processed data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/detect_clusters.R")
# Load the function that scores behavioral inferences about clusters
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/score_clusters.R")
# Load a script with utility functions that each function above requires
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/utilities.R")
# The run length needs to be set to 1 in order to correctly detect detection clusters of length 2
detect_clusters(file_nms = c("pre_processed_data_RFID.csv", "pre_processed_data_IRBB.csv"), threshold = 2, run_length = 1, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = "PIT_tag", rfid_label = "RFID", preproc_metadata_col_nms = c("thin_threshold_s", "data_stage", "date_pre_processed"), general_metadata_col_nms = c("chamber_id", "year", "month", "day"), path = path, data_dir = "Data/processed", out_dir = "Data/processed", out_file_nm = "detection_clusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
score_clusters(file_nm = "detection_clusters.csv", rfid_label = "RFID", camera_label = NULL, outer_irbb_label = "Outer Beam Breakers", inner_irbb_label = "Inner Beam Breakers", video_metadata_col_nms = NULL, integrate_perching = TRUE, perching_dataset = "RFID", perching_prefix = "perching_events_", sensor_id_col_nm = "sensor_id", PIT_tag_col_nm = "PIT_tag", pixel_col_nm = NULL, video_width = NULL, video_height = NULL, integrate_preproc_video = FALSE, video_file_nm = NULL, timestamps_col_nm = NULL, path = path, data_dir = "Data/processed", out_dir = "Data/processed", out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
scored_clusters <- read.csv(file.path(path, "Data/processed", "scored_detectionClusters.csv"))
glimpse(scored_clusters)
scored_clusters %>%
group_by(day, direction_scored) %>%
dplyr::summarise(
n = n()
)
scored_clusters %>%
dplyr::mutate(
day = lubridate::day(start)
) %>%
group_by(day, direction_scored) %>%
dplyr::summarise(
n = n()
)
scored_clusters %>%
# Extract the day from each timestamp and make a new column with this information
dplyr::mutate(
day = lubridate::day(start)
) %>%
# Drop rows with missing values for direction_scored
dplyr::filter(!is.na(direction_scored)) %>%
# Group the data frame by both columns for which you want to count rows
group_by(day, direction_scored) %>%
# The number of rows here is the number of exits or entrances scored per day
dplyr::summarise(
n = n()
)
