scale_x_datetime(
date_breaks = "1 hour",
date_labels = "%H:%M"
)
# Update the dataset in the base layer of the plot, which will be used by all layers that do not have a specific data argument themselves
ggplot(data = scored_clusters_gg3) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "1357aabbcc"),
aes(x = start, y = 0, xend = end, yend = 0.5, linetype = direction_scored),
color = "orange",
linewidth = 0.3
) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "unassigned"),
aes(x = start, y = 0.6, xend = end, yend = 1.1, linetype = direction_scored),
color = "black",
linewidth = 0.3
) +
# Add the custom linetype values to this plot
scale_linetype_manual(values = ltys) +
# Remove the y-axis legend
ylab("") +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top"
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 3, strip.position = "left") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
)
# Update the dataset in the base layer of the plot, which will be used by all layers that do not have a specific data argument themselves
ggplot(data = scored_clusters_gg3) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "1357aabbcc"),
aes(x = start_gg, y = 0, xend = end_gg, yend = 0.5, linetype = direction_scored),
color = "orange",
linewidth = 0.3
) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "unassigned"),
aes(x = start_gg, y = 0.6, xend = end_gg, yend = 1.1, linetype = direction_scored),
color = "black",
linewidth = 0.3
) +
# Add the custom linetype values to this plot
scale_linetype_manual(values = ltys) +
# Remove the y-axis legend
ylab("") +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top"
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 3, strip.position = "left") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
)
# Update the dataset in the base layer of the plot, which will be used by all layers that do not have a specific data argument themselves
ggplot(data = scored_clusters_gg3) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "1357aabbcc"),
aes(x = start_gg, y = 0, xend = end_gg, yend = 0.5, linetype = direction_scored),
color = "orange",
linewidth = 0.3
) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "unassigned"),
aes(x = start_gg, y = 0.6, xend = end_gg, yend = 1.1, linetype = direction_scored),
color = "black",
linewidth = 0.3
) +
# Add the custom linetype values to this plot
scale_linetype_manual(values = ltys) +
# Remove the y-axis label
ylab("") +
# Add a y-axis label
ylab("Time") +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top"
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 3, strip.position = "left") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
)
levels(scored_clusters_gg$individual_initiated)
# Colors will be encoded in the same order as the levels of the column individual_initiated, so orange will encode "1357aabbcc"
levels(scored_clusters_gg$individual_initiated)
cols <- c("orange", "darkgreen", "black")
ggplot(data = scored_clusters_gg3) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "1357aabbcc"),
aes(x = start_gg, y = 0, xend = end_gg, yend = 0.5, linetype = direction_scored),
color = "orange",
linewidth = 0.3
) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "unassigned"),
aes(x = start_gg, y = 0.6, xend = end_gg, yend = 1.1, linetype = direction_scored),
color = "black",
linewidth = 0.3
) +
# Add the custom linetype values to this plot
scale_linetype_manual(values = ltys) +
# Remove the y-axis label
ylab("") +
# Add a y-axis label
ylab("Time") +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top"
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 3, strip.position = "left") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
) +
# Add the perching events, and now encode color through the column individual_initiated
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(!is.na(perching_sensor)),
aes(x = start_gg, y = 1.2, xend = end_gg, yend = 1.3, color = individual_initiated),
linewidth = 0.8
) +
# Add the custom colors
scale_color_manual(values = cols)
ggplot(data = scored_clusters_gg3) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "1357aabbcc"),
aes(x = start_gg, y = 0, xend = end_gg, yend = 0.5, linetype = direction_scored),
color = "orange",
linewidth = 0.3
) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "unassigned"),
aes(x = start_gg, y = 0.6, xend = end_gg, yend = 1.1, linetype = direction_scored),
color = "black",
linewidth = 0.3
) +
# Add the custom linetype values to this plot
scale_linetype_manual(values = ltys) +
# Remove the y-axis label
ylab("") +
# Add a y-axis label
ylab("Time") +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top"
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 3, strip.position = "left") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
) +
# Add the perching events, and now encode color through the column individual_initiated
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(!is.na(perching_sensor)),
aes(x = start_gg, y = 1.2, xend = end_gg, yend = 1.2, color = individual_initiated),
linewidth = 0.8
) +
# Add the custom colors
scale_color_manual(values = cols)
ggplot(data = scored_clusters_gg3) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "1357aabbcc"),
aes(x = start_gg, y = 0, xend = end_gg, yend = 0.5, linetype = direction_scored),
color = "orange",
linewidth = 0.3
) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "unassigned"),
aes(x = start_gg, y = 0.6, xend = end_gg, yend = 1.1, linetype = direction_scored),
color = "black",
linewidth = 0.3
) +
# Add the custom linetype values to this plot
scale_linetype_manual(values = ltys) +
# Remove the y-axis label
ylab("") +
# Add a y-axis label
ylab("Time") +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top"
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 3, strip.position = "left") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
) +
# Add the perching events, and now encode color through the column individual_initiated
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(!is.na(perching_sensor)),
aes(x = start_gg, y = 1.2, xend = end_gg, yend = 1.3, color = individual_initiated),
linewidth = 4
) +
# Add the custom colors
scale_color_manual(values = cols)
?geom_segment
ggplot(data = scored_clusters_gg3) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "1357aabbcc"),
aes(x = start_gg, y = 0, xend = end_gg, yend = 0.5, linetype = direction_scored),
color = "orange",
linewidth = 0.3
) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "unassigned"),
aes(x = start_gg, y = 0.6, xend = end_gg, yend = 1.1, linetype = direction_scored),
color = "black",
linewidth = 0.3
) +
# Add the custom linetype values to this plot
scale_linetype_manual(values = ltys) +
# Remove the y-axis label
ylab("") +
# Add a y-axis label
ylab("Time") +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top"
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 3, strip.position = "left") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
) +
# Add the perching events, and now encode color through the column individual_initiated
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(!is.na(perching_sensor)),
aes(x = start_gg, y = 1.2, xend = end_gg, yend = 1.3, color = individual_initiated),
linewidth = 4, lineend = "round"
) +
# Add the custom colors
scale_color_manual(values = cols)
ggplot(data = scored_clusters_gg3) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "1357aabbcc"),
aes(x = start_gg, y = 0, xend = end_gg, yend = 0.5, linetype = direction_scored),
color = "orange",
linewidth = 0.3
) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "unassigned"),
aes(x = start_gg, y = 0.6, xend = end_gg, yend = 1.1, linetype = direction_scored),
color = "black",
linewidth = 0.3
) +
# Add the custom linetype values to this plot
scale_linetype_manual(values = ltys) +
# Remove the y-axis label
ylab("") +
# Add a y-axis label
ylab("Time") +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top"
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 3, strip.position = "left") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
) +
# Add the perching events, and now encode color through the column individual_initiated
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(!is.na(perching_sensor)),
aes(x = start_gg, y = 1.2, xend = end_gg, yend = 1.2, color = individual_initiated),
linewidth = 4, lineend = "round"
) +
# Add the custom colors
scale_color_manual(values = cols)
ggplot(data = scored_clusters_gg3) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "1357aabbcc"),
aes(x = start_gg, y = 0, xend = end_gg, yend = 0.5, linetype = direction_scored),
color = "orange",
linewidth = 0.3
) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "unassigned"),
aes(x = start_gg, y = 0.6, xend = end_gg, yend = 1.1, linetype = direction_scored),
color = "black",
linewidth = 0.3
) +
# Add the custom linetype values to this plot
scale_linetype_manual(values = ltys) +
# Remove the y-axis label
ylab("") +
# Add a y-axis label
ylab("Time") +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top"
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 3, strip.position = "left") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
) +
# Add the perching events as rounded segments, and now encode color through the column individual_initiated
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(!is.na(perching_sensor)),
aes(x = start_gg, y = 1.2, xend = end_gg, yend = 1.2, color = individual_initiated),
linewidth = 2, lineend = "round"
) +
# Add the custom colors
scale_color_manual(values = cols)
ggplot(data = scored_clusters_gg3) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "1357aabbcc"),
aes(x = start_gg, y = 0, xend = end_gg, yend = 0.5, linetype = direction_scored),
color = "orange",
linewidth = 0.3
) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "unassigned"),
aes(x = start_gg, y = 0.6, xend = end_gg, yend = 1.1, linetype = direction_scored),
color = "black",
linewidth = 0.3
) +
# Add the custom linetype values to this plot
scale_linetype_manual(values = ltys) +
# Remove the y-axis label
ylab("") +
# Add a y-axis label
xlab("Time") +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top"
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 3, strip.position = "left") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
) +
# Add the perching events as rounded segments, and now encode color through the column individual_initiated
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(!is.na(perching_sensor)),
aes(x = start_gg, y = 1.2, xend = end_gg, yend = 1.2, color = individual_initiated),
linewidth = 2, lineend = "round"
) +
# Add the custom colors
scale_color_manual(values = cols)
# Update the dataset in the base layer of the plot, which will be used by all layers that do not have a specific data argument themselves
ggplot(data = scored_clusters_gg3) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "1357aabbcc"),
aes(x = start_gg, y = 0, xend = end_gg, yend = 0.5, linetype = direction_scored),
color = "orange",
linewidth = 0.3
) +
# Add a vertical line for each non-perching event assigned to the first individual
geom_segment(
data = scored_clusters_gg3 %>%
dplyr::filter(individual_initiated == "unassigned"),
aes(x = start_gg, y = 0.6, xend = end_gg, yend = 1.1, linetype = direction_scored),
color = "black",
linewidth = 0.3
) +
# Add the custom linetype values to this plot
scale_linetype_manual(values = ltys) +
# Remove the y-axis label
ylab("") +
# Add a y-axis label
xlab("Time") +
# Use this function to convert the plot background to black and white
theme_bw() +
# Use aesthetics functions to remove the y-axis labels and ticks
# Add an argument to change where the legend is located in the plot
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top"
) +
# Facet the plot by day (e.g. create a panel per day)
# Use the new day labels here
facet_wrap(~ day_label, nrow = 3, strip.position = "left") +
# Change the aesthetics of the x-axis labels
scale_x_datetime(
date_breaks = "30 mins",
date_labels = "%H:%M"
)
