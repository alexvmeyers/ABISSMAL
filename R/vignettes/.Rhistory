# Use double and single bracket filtering to pull out the right file name
write.csv(file = files[[x]][y], row.names = FALSE)
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y])
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- sensors[x]
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- days[[sensors[x]]]
# Get the data frame per sensor type using x and then filter by day using y
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y]) %>%
# Use double and single bracket filtering to pull out the right file name
write.csv(file = files[[x]][y], row.names = FALSE)
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y])
files[[x]][y]
file.path(path, "IRBB")
dir.create(file.path(path, "IRBB"))
# Testing
x <- 1
y <- 1
# Start by iterating over sensors
invisible(lapply(1:length(sensors), function(x){
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- days[[sensors[x]]]
# For each sensor, iterate over days
lapply(1:length(days_tmp), function(y){
# Get the data frame per sensor type using x and then filter by day using y
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y]) %>%
# Use double and single bracket filtering to pull out the right file name
write.csv(file = files[[x]][y], row.names = FALSE)
})
}))
# Make a vector of sensor labels
sensors <- c("RFID", "IRBB")
sensors
# Make a named list of the custom file names to write out
files <- list(
`RFID` = c("RFID_simulated_Pair-01_2023_08_01.csv", "RFID_simulated_Pair-01_2023_08_02.csv"),
`IRBB` = c("IRBB_simulated_Pair-01_2023_08_01.csv", "IRBB_simulated_Pair-01_2023_08_02.csv")
)
files
# Make a list of file paths per sensor that will be used inside of the loop
file_dirs <- list(
`RFID` = file.path(path, "RFID"),
`IRBB` = file.path(path, "IRBB")
)
file_dirs
# Make a list of the days to write out for each sensor
# This could be a single vector rather than a list since you want to write out the same days per sensor, but a list is useful in case you wanted to change the days (and number of days) to write out per sensor
days <- list(
`RFID` = c(1, 2),
`IRBB` = c(1, 2)
)
days
# Finally, you need to make a list of the data frames that you want to write out. Since you already know how to filter data frames by day, that code can go inside of the loop, and you only need to specify a data frame per sensor type here
dats <- list(
`RFID` = sim_dats_rfid,
`IRBB` = sim_dats_irbb
)
glimpse(dats)
x <- 2
y <- 1
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- days[[sensors[x]]]
days_tmp
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- days[[sensors[x]]]
# Get the data frame per sensor type using x and then filter by day using y
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y]) %>%
# Use double and single bracket filtering to pull out the right file name
write.csv(file = files[[x]][y], row.names = FALSE)
dats[[x]]
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y]) %>%
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y])
files[[x]][y]
# Get the data frame per sensor type using x and then filter by day using y
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y]) %>%
# Use double and single bracket filtering to pull out the right file name
write.csv(file = file.path(file_dirs, files[[x]][y]), row.names = FALSE)
# Get the data frame per sensor type using x and then filter by day using y
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y]) %>%
# Use double and single bracket filtering to pull out the right file name
write.csv(file = file.path(file_dirs[[x]], files[[x]][y]), row.names = FALSE)
# Testing
x <- 1
y <- 1
sensors[x] # This is a string with the sensor name
# Place the string with the sensor name inside of double square brackets to extract the vector of days for that sensor
days_tmp <- days[[sensors[x]]]
days_tmp
# Get the data frame per sensor type using x inside of double square brackets to extract the given data frame from the list
dats[[x]] %>%
# Filter the data frame by one day at a time by using y to index the temporary vector of days (e.g. to extract a single element from that vector)
dplyr::filter(day == days_tmp[y]) %>%
glimpse()
# Use double bracket filtering to pull out the vector of file names for the given sensor from the overall list, then use y with single bracket filtering to pull a single file name from the resulting vector of names
files[[x]]
files[[x]][y]
# You'll also combine the file name with the right path:
file.path(file_dirs[[x]], files[[x]][y])
files <- c("RFID_simulated_Pair-01_2023_08_01.csv", "RFID_simulated_Pair-01_2023_08_02.csv")
# Add the file path for the correct directory
files <- file.path(path, "RFID", files)
files
file.remove(files)
# Make a vector of sensor labels
sensors <- c("RFID", "IRBB")
sensors
# Make a named list of the custom file names to write out
files <- list(
`RFID` = c("RFID_simulated_Pair-01_2023_08_01.csv", "RFID_simulated_Pair-01_2023_08_02.csv"),
`IRBB` = c("IRBB_simulated_Pair-01_2023_08_01.csv", "IRBB_simulated_Pair-01_2023_08_02.csv")
)
files
# Make a list of file paths per sensor that will be used inside of the loop
file_dirs <- list(
`RFID` = file.path(path, "RFID"),
`IRBB` = file.path(path, "IRBB")
)
file_dirs
# Make a list of the days to write out for each sensor
# This could be a single vector rather than a list since you want to write out the same days per sensor, but a list is useful in case you wanted to change the days (and number of days) to write out per sensor
days <- list(
`RFID` = c(1, 2),
`IRBB` = c(1, 2)
)
days
# Finally, you need to make a list of the data frames that you want to write out. Since you already know how to filter data frames by day, that code can go inside of the loop, and you only need to specify a data frame per sensor type here
dats <- list(
`RFID` = sim_dats_rfid,
`IRBB` = sim_dats_irbb
)
glimpse(dats)
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- days[[sensors[x]]]
# Start by iterating over sensors
invisible(lapply(1:length(sensors), function(x){
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- days[[sensors[x]]]
# For each sensor, iterate over days
lapply(1:length(days_tmp), function(y){
# Get the data frame per sensor type using x and then filter by day using y
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y]) %>%
# Use double and single bracket filtering to pull out the right file name
write.csv(file = file.path(file_dirs[[x]], files[[x]][y]), row.names = FALSE)
})
}))
list.files(file.path(path, "RFID"))
list.files(file.path(path, "IRBB"))
rm(list = ls()) # Clean global environment
library(tidyverse) # Load the set of tidyverse packages
path <- "/home/gsvidaurre/Desktop/ABISSMAL_vignettes" # Initialize an object with the path that is your working directory
# Load the function that combines raw data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/combine_raw_data.R")
# Load the function that detects perching events in the raw data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/detect_perching_events.R")
# Load the function that pre-processes raw data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/preprocess_detections.R")
# Load a script with utility functions that each function above requires
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/utilities.R")
path
View(combine_raw_data)
# Make a new directory inside of your working directory for saving data
file.path(path, "Data")
# Make a new directory inside of your working directory for saving data
file.path(path, "Data") # Check the new path
dir.create(file.path(path, "Data")) # Create the new path
# Then make a new directory inside of the Data folder for the raw RFID data
file.path(path, "RFID") # Check the new path
dir.create(file.path(path, "Data", "RFID")) # Create the new path
file.path(path, "Data", "IRBB")
dir.create(file.path(path, "Data", "IRBB"))
rm(list = ls()) # Clean global environment
library(tidyverse) # Load the set of tidyverse packages
path <- "/home/gsvidaurre/Desktop/ABISSMAL_vignettes" # Initialize an object with the path that is your working directory
# Create a vector of 4 RFID timestamps in HH:MM:SS format
rfid_ts <- c("10:00:00", "10:05:00", "11:00:00", "11:05:00")
# Add perching events to the RFID data
rfid_ts <- c(rfid_ts, "08:00:00", "08:00:01", "08:00:02", "08:00:03", "11:30:00", "11:30:01", "11:30:02", "11:30:03", "11:30:04", "11:30:05")
glimpse(rfid_ts)
# For the beam breakers, simulate timestamps for an entrance, an exit, and then another entrance and exit
irbb_ts <- c("09:59:59", "10:05:01", "10:59:59", "11:05:01")
# Simulate some RFID detection failures for the beam breaker data
irbb_ts <- c(irbb_ts, "06:05:05", "06:35:08", "07:15:40", "11:10:25")
# Simulate some stray beam breaker detections
irbb_ts <- c(irbb_ts, "09:45:01", "09:45:02", "09:45:03", "09:45:04", "09:45:05", "09:45:06", "09:45:07", "09:45:08", "09:45:09", "09:45:10", "09:45:11")
glimpse(irbb_ts)
# Make a vector for the experimental replicate
exp_rep <- rep(x = "Pair_01", times = length(rfid_ts))
# Make the data frame with the experimental replicate metadata and the timestamps
sim_dats_rfid <- data.frame(replicate = exp_rep, timestamps = rfid_ts)
# Overwrite the data frame with the modified version that has columns for the year, month, and day
sim_dats_rfid <- sim_dats_rfid %>%
dplyr::mutate(
year = 2023
) %>%
dplyr::mutate(
month = 08,
day = 01
) %>%
# Allocate the first half of the detections to the first individual using nrow(.)/2, and the second half of the detctions to the second individual using nrow(.)/2 again. Both of the rep() expressions are combined into a single vector using the c() function
dplyr::mutate(
PIT_tag = c(rep("1357aabbcc", nrow(.)/2), rep("2468zzyyxx", nrow(.)/2))
) %>%
dplyr::mutate(
sensor_id = "RFID"
)
glimpse(sim_dats_rfid)
sim_dats_rfid <- sim_dats_rfid %>%
bind_rows(
sim_dats_rfid %>%
dplyr::mutate(
day = 02
)
)
glimpse(sim_dats_rfid) # Double the number of rows, looks good
# Overwrite the vector exp_rep with a new vector the same length as irbb_ts
exp_rep <- rep(x = "Pair_01", times = length(irbb_ts))
sim_dats_irbb <- data.frame(replicate = exp_rep, timestamps = irbb_ts)
sim_dats_irbb <- sim_dats_irbb %>%
dplyr::mutate(
year = 2023,
month = 08,
day = 01,
sensor_id = "Beam breakers"
)
glimpse(sim_dats_irbb)
sim_dats_irbb <- sim_dats_irbb %>%
bind_rows(
sim_dats_irbb %>%
dplyr::mutate(
day = 02
)
)
glimpse(sim_dats_irbb) # Double the number of rows, looks good
# Two days, looks good
sim_dats_irbb %>%
pull(day) %>%
unique()
# Create a custom file name by combining the path for your working directory with the file name that you want to write out
# The function file.path() will combine both pieces of information into a single file path
rfid_file <- file.path(path, "test_file.csv")
rfid_file
# Make a vector of sensor labels
sensors <- c("RFID", "IRBB")
sensors
# Make a named list of the custom file names to write out
files <- list(
`RFID` = c("RFID_simulated_Pair-01_2023_08_01.csv", "RFID_simulated_Pair-01_2023_08_02.csv"),
`IRBB` = c("IRBB_simulated_Pair-01_2023_08_01.csv", "IRBB_simulated_Pair-01_2023_08_02.csv")
)
files
# Make a list of file paths per sensor that will be used inside of the loop
file_dirs <- list(
`RFID` = file.path(path, "RFID"),
`IRBB` = file.path(path, "IRBB")
)
file_dirs
# Make a list of the days to write out for each sensor
# This could be a single vector rather than a list since you want to write out the same days per sensor, but a list is useful in case you wanted to change the days (and number of days) to write out per sensor
days <- list(
`RFID` = c(1, 2),
`IRBB` = c(1, 2)
)
days
# Finally, you need to make a list of the data frames that you want to write out. Since you already know how to filter data frames by day, that code can go inside of the loop, and you only need to specify a data frame per sensor type here
dats <- list(
`RFID` = sim_dats_rfid,
`IRBB` = sim_dats_irbb
)
glimpse(dats)
# Start by iterating over sensors
invisible(lapply(1:length(sensors), function(x){
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- days[[sensors[x]]]
# For each sensor, iterate over days
lapply(1:length(days_tmp), function(y){
# Get the data frame per sensor type using x and then filter by day using y
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y]) %>%
# Use double and single bracket filtering to pull out the right file name
write.csv(file = file.path(file_dirs[[x]], files[[x]][y]), row.names = FALSE)
})
}))
# Make a list of file paths per sensor that will be used inside of the loop
file_dirs <- list(
`RFID` = file.path(path, "Data/RFID"),
`IRBB` = file.path(path, "Data/IRBB")
)
file_dirs
# Start by iterating over sensors
invisible(lapply(1:length(sensors), function(x){
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- days[[sensors[x]]]
# For each sensor, iterate over days
lapply(1:length(days_tmp), function(y){
# Get the data frame per sensor type using x and then filter by day using y
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y]) %>%
# Use double and single bracket filtering to pull out the right file name
write.csv(file = file.path(file_dirs[[x]], files[[x]][y]), row.names = FALSE)
})
}))
?POSIXct
?
DateTimeClasses
?DateTimeClasses
list.files(file.path(path, "Data/raw_combined"), pattern = ".csv$")
combine_raw_data(sensors = "RFID", path = path, data_dir = "Data", out_dir = "raw_combined", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
# Load the function that combines raw data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/combine_raw_data.R")
# Load the function that detects perching events in the raw data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/detect_perching_events.R")
# Load the function that pre-processes raw data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/preprocess_detections.R")
# Load a script with utility functions that each function above requires
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/utilities.R")
combine_raw_data(sensors = "RFID", path = path, data_dir = "Data", out_dir = "raw_combined", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
library(data.table) # Load other packages that the ABISSMAL functions require
combine_raw_data(sensors = "RFID", path = path, data_dir = "Data", out_dir = "raw_combined", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
rm(list = ls()) # Clean global environment
library(tidyverse) # Load the set of tidyverse packages
path <- "/home/gsvidaurre/Desktop/ABISSMAL_vignettes" # Initialize an object with the path that is your working directory
# Create a vector of 4 RFID timestamps in HH:MM:SS format
rfid_ts <- c("10:00:00", "10:05:00", "11:00:00", "11:05:00")
# Add perching events to the RFID data
rfid_ts <- c(rfid_ts, "08:00:00", "08:00:01", "08:00:02", "08:00:03", "11:30:00", "11:30:01", "11:30:02", "11:30:03", "11:30:04", "11:30:05")
glimpse(rfid_ts)
# For the beam breakers, simulate timestamps for an entrance, an exit, and then another entrance and exit
irbb_ts <- c("09:59:59", "10:05:01", "10:59:59", "11:05:01")
# Simulate some RFID detection failures for the beam breaker data
irbb_ts <- c(irbb_ts, "06:05:05", "06:35:08", "07:15:40", "11:10:25")
# Simulate some stray beam breaker detections
irbb_ts <- c(irbb_ts, "09:45:01", "09:45:02", "09:45:03", "09:45:04", "09:45:05", "09:45:06", "09:45:07", "09:45:08", "09:45:09", "09:45:10", "09:45:11")
glimpse(irbb_ts)
# Make a vector for the experimental replicate
exp_rep <- rep(x = "Nest_01", times = length(rfid_ts))
# Make the data frame with the experimental replicate metadata and the timestamps
sim_dats_rfid <- data.frame(chamber_id = exp_rep, timestamps = rfid_ts)
# Overwrite the data frame with the modified version that has columns for the year, month, and day
sim_dats_rfid <- sim_dats_rfid %>%
dplyr::mutate(
year = 2023
) %>%
dplyr::mutate(
month = 08,
day = 01
) %>%
# Allocate the first half of the detections to the first individual using nrow(.)/2, and the second half of the detctions to the second individual using nrow(.)/2 again. Both of the rep() expressions are combined into a single vector using the c() function
dplyr::mutate(
PIT_tag = c(rep("1357aabbcc", nrow(.)/2), rep("2468zzyyxx", nrow(.)/2))
) %>%
dplyr::mutate(
sensor_id = "RFID"
)
glimpse(sim_dats_rfid)
sim_dats_rfid <- sim_dats_rfid %>%
bind_rows(
sim_dats_rfid %>%
dplyr::mutate(
day = 02
)
)
glimpse(sim_dats_rfid) # Double the number of rows, looks good
# Overwrite the vector exp_rep with a new vector the same length as irbb_ts
exp_rep <- rep(x = "Nest_01", times = length(irbb_ts))
sim_dats_irbb <- data.frame(chamber_id = exp_rep, timestamps = irbb_ts)
sim_dats_irbb <- sim_dats_irbb %>%
dplyr::mutate(
year = 2023,
month = 08,
day = 01,
sensor_id = "Beam breakers"
)
glimpse(sim_dats_irbb)
sim_dats_irbb <- sim_dats_irbb %>%
bind_rows(
sim_dats_irbb %>%
dplyr::mutate(
day = 02
)
)
glimpse(sim_dats_irbb) # Double the number of rows, looks good
# Two days, looks good
sim_dats_irbb %>%
pull(day) %>%
unique()
# Then make a new directory inside of the Data folder for the raw RFID data
file.path(path, "RFID") # Check the new path
dir.create(file.path(path, "Data", "RFID")) # Create the new path
dir.create(file.path(path, "Data", "IRBB"))
# Make a vector of sensor labels
sensors <- c("RFID", "IRBB")
sensors
# Make a named list of the custom file names to write out
files <- list(
`RFID` = c("RFID_simulated_Pair-01_2023_08_01.csv", "RFID_simulated_Pair-01_2023_08_02.csv"),
`IRBB` = c("IRBB_simulated_Pair-01_2023_08_01.csv", "IRBB_simulated_Pair-01_2023_08_02.csv")
)
files
# Make a list of file paths per sensor that will be used inside of the loop
file_dirs <- list(
`RFID` = file.path(path, "Data/RFID"),
`IRBB` = file.path(path, "Data/IRBB")
)
file_dirs
# Make a list of the days to write out for each sensor
# This could be a single vector rather than a list since you want to write out the same days per sensor, but a list is useful in case you wanted to change the days (and number of days) to write out per sensor
days <- list(
`RFID` = c(1, 2),
`IRBB` = c(1, 2)
)
days
# Finally, you need to make a list of the data frames that you want to write out. Since you already know how to filter data frames by day, that code can go inside of the loop, and you only need to specify a data frame per sensor type here
dats <- list(
`RFID` = sim_dats_rfid,
`IRBB` = sim_dats_irbb
)
glimpse(dats)
# Start by iterating over sensors
invisible(lapply(1:length(sensors), function(x){
# Index the list of days to get the right days per sensor
# This indexing is important to set up the next loop correctly
days_tmp <- days[[sensors[x]]]
# For each sensor, iterate over days
lapply(1:length(days_tmp), function(y){
# Get the data frame per sensor type using x and then filter by day using y
dats[[x]] %>%
# Filter the data frame by one day at a time
dplyr::filter(day == days_tmp[y]) %>%
# Use double and single bracket filtering to pull out the right file name
write.csv(file = file.path(file_dirs[[x]], files[[x]][y]), row.names = FALSE)
})
}))
list.files(file.path(path, "Data/RFID"))
list.files(file.path(path, "Data/IRBB"))
rm(list = ls()) # Clean global environment
library(tidyverse) # Load the set of tidyverse packages
library(data.table) # Load other packages that the ABISSMAL functions require
path <- "/home/gsvidaurre/Desktop/ABISSMAL_vignettes" # Initialize an object with the path that is your working directory
# Load the function that combines raw data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/combine_raw_data.R")
# Load the function that detects perching events in the raw data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/detect_perching_events.R")
# Load the function that pre-processes raw data
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/preprocess_detections.R")
# Load a script with utility functions that each function above requires
source("/home/gsvidaurre/Desktop/GitHub_repos/ABISSMAL/R/utilities.R")
combine_raw_data(sensors = "RFID", path = path, data_dir = "Data", out_dir = "raw_combined", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
combine_raw_data(sensors = "RFID", path = path, data_dir = "Data", out_dir = "Data/raw_combined", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
list.files(file.path(path, "Data/raw_combined"), pattern = ".csv$")
file.path(path, "Data/raw_combined")
list.files(file.path(path, "Data/raw_combined"), pattern = ".csv$")
rfid_data <- read.csv(file.path(path, "Data/raw_combined", "combined_raw_data_RFID.csv"))
glimpse(rfid_data)
combine_raw_data(sensors = c("RFID", "IRBB"), path = path, data_dir = "Data", out_dir = "Data/raw_combined", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
list.files(file.path(path, "Data/raw_combined"), pattern = ".csv$")
detect_perching_events(file_nm = "combined_raw_data_RFID.csv", threshold = 2, run_length = 2, PIT_tag_col_nm = "PIT_tag", rfid_label = "RFID", path = data_path, data_dir = "raw_combined", out_dir = "processed", out_file_prefix = "perching_events", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
detect_perching_events(file_nm = "combined_raw_data_RFID.csv", threshold = 2, run_length = 2, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = "PIT_tag", rfid_label = "RFID", path = data_path, data_dir = "raw_combined", out_dir = "processed", out_file_prefix = "perching_events", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
detect_perching_events(file_nm = "combined_raw_data_RFID.csv", threshold = 2, run_length = 2, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = "PIT_tag", rfid_label = "RFID", general_metadata_cols = c("chamber_id", "sensor_id"), path = data_path, data_dir = "raw_combined", out_dir = "processed", out_file_prefix = "perching_events", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
detect_perching_events(file_nm = "combined_raw_data_RFID.csv", threshold = 2, run_length = 2, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = "PIT_tag", rfid_label = "RFID", general_metadata_cols = c("chamber_id", "sensor_id"), path = path, data_dir = "raw_combined", out_dir = "processed", out_file_prefix = "perching_events", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
detect_perching_events(file_nm = "combined_raw_data_RFID.csv", threshold = 2, run_length = 2, sensor_id_col_nm = "sensor_id", timestamps_col_nm = "timestamp_ms", PIT_tag_col_nm = "PIT_tag", rfid_label = "RFID", general_metadata_cols = c("chamber_id", "sensor_id"), path = file.path(path, "Data"), data_dir = "raw_combined", out_dir = "processed", out_file_prefix = "perching_events", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
perching <- read.csv(file.path(path, "Data", "processed", "perching_events_RFID.csv"))
glimpse(perching)
perching$perching_start
perching$start
# The timestamps when each perching event started
perching$perching_start
perching$PIT_tag
View(preprocess_detections)
preprocess_detections(sensor = "RFID", timestamps_col_nm = "timestamp_ms", group_col_nm = "PIT_tag", mode = "thin", thin_threshold = 2, drop_tag = NULL, path = path, data_dir = "raw_combined", out_dir = "processed", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
preprocess_detections(sensor = "RFID", timestamps_col_nm = "timestamp_ms", group_col_nm = "PIT_tag", mode = "thin", thin_threshold = 2, drop_tag = NULL, path = file.path(path, "Data"), data_dir = "raw_combined", out_dir = "processed", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
list.files(file.path(path, "Data/processed"))
rfid_pp <- read.csv(file.path(path, "Data/processed/pre_processed_data_RFID.csv"))
glimpse(rfid_pp)
rfid_data <- read.csv(file.path(path, "Data/raw_combined", "combined_raw_data_RFID.csv"))
glimpse(rfid_data)
preprocess_detections(sensor = "IRBB", timestamps_col_nm = "timestamp_ms", group_col_nm = NULL, mode = "thin", thin_threshold = 2, drop_tag = NULL, path = file.path(path, "Data"), data_dir = "raw_combined", out_dir = "processed", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
preprocess_detections(sensor = "IRBB", timestamps_col_nm = "timestamp_ms", group_col_nm = "sensor_id", mode = "thin", thin_threshold = 2, drop_tag = NULL, path = file.path(path, "Data"), data_dir = "raw_combined", out_dir = "processed", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS")
list.files(file.path(path, "Data/processed"))
irbb_pp <- read.csv(file.path(path, "Data/processed/pre_processed_data_IRBB.csv"))
glimpse(rfid_pp)
library(ggplot2) # Load a package for making plots
