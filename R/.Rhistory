timestamp_ms = lubridate::ymd_hms(date_time_ms)
) %>%
dplyr::mutate(
# data_type = ifelse(data_type == "RFID", paste(data_type, PIT_tag_ID, sep = " : "), data_type),
data_stage = "raw_combined"
)
glimpse(raw_data2)
head(raw_data2$timestamp_ms)
second(raw_data2$timestamp_ms)
class(raw_data2$timestamp_ms)
diff(raw_data2$timestamp_ms)
# Add metadata and convert timestamps to a useful format for downstream pre-processing and analysis
raw_data2 <- raw_data %>%
dplyr::mutate(data_type = sensors[x]) %>%
# Make another timestamp column: keep the original timestamps and modify the copy to the useful format
dplyr::mutate(
original_timestamp = timestamp
) %>%
# Convert timestamps to the POSIX format with millisecond resolution (e.g. decimal seconds)
dplyr::mutate(
date_time_ms = paste(paste(year, month, day, sep = "-"), timestamp, sep = " "),
# date_time_ms = format(as.POSIXct(date_time_ms, tz = tz), POSIXct_format),
# timestamp_ms = lubridate::ymd_hms(date_time_ms)
timestamp_ms = as.POSIXct(format(as.POSIXct(date_time_ms, tz = tz)), POSIXct_format),
) %>%
dplyr::mutate(
# data_type = ifelse(data_type == "RFID", paste(data_type, PIT_tag_ID, sep = " : "), data_type),
data_stage = "raw_combined"
)
glimpse(raw_data2)
head(raw_data2$timestamp_ms)
second(raw_data2$timestamp_ms)
# Add metadata and convert timestamps to a useful format for downstream pre-processing and analysis
raw_data2 <- raw_data %>%
dplyr::mutate(data_type = sensors[x]) %>%
# Make another timestamp column: keep the original timestamps and modify the copy to the useful format
dplyr::mutate(
original_timestamp = timestamp
) %>%
# Convert timestamps to the POSIX format with millisecond resolution (e.g. decimal seconds)
dplyr::mutate(
date_time_ms = paste(paste(year, month, day, sep = "-"), timestamp, sep = " "),
# date_time_ms = format(as.POSIXct(date_time_ms, tz = tz), POSIXct_format),
# timestamp_ms = lubridate::ymd_hms(date_time_ms)
timestamp_ms = as.POSIXct(format(as.POSIXct(date_time_ms, tz = tz), POSIXct_format)),
) %>%
dplyr::mutate(
# data_type = ifelse(data_type == "RFID", paste(data_type, PIT_tag_ID, sep = " : "), data_type),
data_stage = "raw_combined"
)
glimpse(raw_data2)
head(raw_data2$timestamp_ms)
second(raw_data2$timestamp_ms)
# Add metadata and convert timestamps to a useful format for downstream pre-processing and analysis
raw_data2 <- raw_data %>%
dplyr::mutate(data_type = sensors[x]) %>%
# Make another timestamp column: keep the original timestamps and modify the copy to the useful format
dplyr::mutate(
original_timestamp = timestamp
) %>%
# Convert timestamps to the POSIX format with millisecond resolution (e.g. decimal seconds)
dplyr::mutate(
date_time_ms = paste(paste(year, month, day, sep = "-"), timestamp, sep = " "),
date_time_ms = format(as.POSIXct(date_time_ms, tz = tz), POSIXct_format),
timestamp_ms = lubridate::ymd_hms(date_time_ms),
timestamp_ms = as.POSIXct(format(as.POSIXct(date_time_ms, tz = tz), POSIXct_format)),
) %>%
dplyr::mutate(
# data_type = ifelse(data_type == "RFID", paste(data_type, PIT_tag_ID, sep = " : "), data_type),
data_stage = "raw_combined"
)
glimpse(raw_data2)
head(raw_data2$timestamp_ms)
second(raw_data2$timestamp_ms)
class(raw_data2$timestamp_ms)
diff(raw_data2$timestamp_ms)
# Add metadata and convert timestamps to a useful format for downstream pre-processing and analysis
raw_data2 <- raw_data %>%
dplyr::mutate(data_type = sensors[x]) %>%
# Make another timestamp column: keep the original timestamps and modify the copy to the useful format
dplyr::mutate(
original_timestamp = timestamp
) %>%
# Convert timestamps to the POSIX format with millisecond resolution (e.g. decimal seconds)
dplyr::mutate(
date_time_ms = paste(paste(year, month, day, sep = "-"), timestamp, sep = " "),
# date_time_ms = format(as.POSIXct(date_time_ms, tz = tz), POSIXct_format),
# timestamp_ms = lubridate::ymd_hms(date_time_ms),
timestamp_ms = as.POSIXct(format(as.POSIXct(date_time_ms, tz = tz), POSIXct_format)),
) %>%
dplyr::mutate(
# data_type = ifelse(data_type == "RFID", paste(data_type, PIT_tag_ID, sep = " : "), data_type),
data_stage = "raw_combined"
)
glimpse(raw_data2)
# Add metadata and convert timestamps to a useful format for downstream pre-processing and analysis
raw_data2 <- raw_data %>%
dplyr::mutate(data_type = sensors[x]) %>%
# Make another timestamp column: keep the original timestamps and modify the copy to the useful format
dplyr::mutate(
original_timestamp = timestamp
) %>%
# Convert timestamps to the POSIX format with millisecond resolution (e.g. decimal seconds)
dplyr::mutate(
date_time_ms = paste(paste(year, month, day, sep = "-"), timestamp, sep = " "),
# date_time_ms = format(as.POSIXct(date_time_ms, tz = tz), POSIXct_format),
timestamp_ms = lubridate::ymd_hms(date_time_ms),
# timestamp_ms = as.POSIXct(format(as.POSIXct(date_time_ms, tz = tz), POSIXct_format)),
) %>%
dplyr::mutate(
# data_type = ifelse(data_type == "RFID", paste(data_type, PIT_tag_ID, sep = " : "), data_type),
data_stage = "raw_combined"
)
glimpse(raw_data2)
options("digits" = 6)
# Add metadata and convert timestamps to a useful format for downstream pre-processing and analysis
raw_data2 <- raw_data %>%
dplyr::mutate(data_type = sensors[x]) %>%
# Make another timestamp column: keep the original timestamps and modify the copy to the useful format
dplyr::mutate(
original_timestamp = timestamp
) %>%
# Convert timestamps to the POSIX format with millisecond resolution (e.g. decimal seconds)
dplyr::mutate(
date_time_ms = paste(paste(year, month, day, sep = "-"), timestamp, sep = " "),
# date_time_ms = format(as.POSIXct(date_time_ms, tz = tz), POSIXct_format),
timestamp_ms = lubridate::ymd_hms(date_time_ms),
# timestamp_ms = as.POSIXct(format(as.POSIXct(date_time_ms, tz = tz), POSIXct_format)),
) %>%
dplyr::mutate(
# data_type = ifelse(data_type == "RFID", paste(data_type, PIT_tag_ID, sep = " : "), data_type),
data_stage = "raw_combined"
)
glimpse(raw_data2)
# Add metadata and convert timestamps to a useful format for downstream pre-processing and analysis
raw_data2 <- raw_data %>%
dplyr::mutate(data_type = sensors[x]) %>%
# Make another timestamp column: keep the original timestamps and modify the copy to the useful format
dplyr::mutate(
original_timestamp = timestamp
) %>%
# Convert timestamps to the POSIX format with millisecond resolution (e.g. decimal seconds)
dplyr::mutate(
date_time_ms = paste(paste(year, month, day, sep = "-"), timestamp, sep = " "),
# date_time_ms = format(as.POSIXct(date_time_ms, tz = tz), POSIXct_format),
# timestamp_ms = lubridate::ymd_hms(date_time_ms),
timestamp_ms = as.POSIXct(format(as.POSIXct(date_time_ms, tz = tz), POSIXct_format)),
) %>%
dplyr::mutate(
# data_type = ifelse(data_type == "RFID", paste(data_type, PIT_tag_ID, sep = " : "), data_type),
data_stage = "raw_combined"
)
glimpse(raw_data2)
head(raw_data2$timestamp_ms)
second(raw_data2$timestamp_ms)
# Add metadata and convert timestamps to a useful format for downstream pre-processing and analysis
raw_data2 <- raw_data %>%
dplyr::mutate(data_type = sensors[x]) %>%
# Make another timestamp column: keep the original timestamps and modify the copy to the useful format
dplyr::mutate(
original_timestamp = timestamp
) %>%
# Convert timestamps to the POSIX format with millisecond resolution (e.g. decimal seconds)
dplyr::mutate(
date_time_ms = paste(paste(year, month, day, sep = "-"), timestamp, sep = " "),
date_time_ms = format(as.POSIXct(date_time_ms, tz = tz), POSIXct_format),
# timestamp_ms = lubridate::ymd_hms(date_time_ms),
timestamp_ms = as.POSIXct(format(as.POSIXct(date_time_ms, tz = tz), POSIXct_format)),
) %>%
dplyr::mutate(
# data_type = ifelse(data_type == "RFID", paste(data_type, PIT_tag_ID, sep = " : "), data_type),
data_stage = "raw_combined"
)
glimpse(raw_data2)
POSIXct_format
# Add metadata and convert timestamps to a useful format for downstream pre-processing and analysis
raw_data2 <- raw_data %>%
dplyr::mutate(data_type = sensors[x]) %>%
# Make another timestamp column: keep the original timestamps and modify the copy to the useful format
dplyr::mutate(
original_timestamp = timestamp
) %>%
# Convert timestamps to the POSIX format with millisecond resolution (e.g. decimal seconds)
dplyr::mutate(
date_time_ms = paste(paste(year, month, day, sep = "-"), timestamp, sep = " "),
date_time_ms = format(as.POSIXct(date_time_ms, tz = tz), POSIXct_format)
) %>%
dplyr::mutate(
# timestamp_ms = lubridate::ymd_hms(date_time_ms),
timestamp_ms = as.POSIXct(format(as.POSIXct(date_time_ms, tz = tz), POSIXct_format)),
# data_type = ifelse(data_type == "RFID", paste(data_type, PIT_tag_ID, sep = " : "), data_type),
data_stage = "raw_combined"
)
glimpse(raw_data2)
# Add metadata and convert timestamps to a useful format for downstream pre-processing and analysis
raw_data2 <- raw_data %>%
dplyr::mutate(data_type = sensors[x]) %>%
# Make another timestamp column: keep the original timestamps and modify the copy to the useful format
dplyr::mutate(
original_timestamp = timestamp
) %>%
# Convert timestamps to the POSIX format with millisecond resolution (e.g. decimal seconds)
dplyr::mutate(
date_time_ms = paste(paste(year, month, day, sep = "-"), timestamp, sep = " "),
timestamp_ms = format(as.POSIXct(date_time_ms, tz = tz), POSIXct_format)
) %>%
dplyr::mutate(
# timestamp_ms = lubridate::ymd_hms(date_time_ms),
# timestamp_ms = as.POSIXct(format(as.POSIXct(date_time_ms, tz = tz), POSIXct_format)),
# data_type = ifelse(data_type == "RFID", paste(data_type, PIT_tag_ID, sep = " : "), data_type),
data_stage = "raw_combined"
)
glimpse(raw_data2)
# Add metadata and convert timestamps to a useful format for downstream pre-processing and analysis
raw_data2 <- raw_data %>%
dplyr::mutate(data_type = sensors[x]) %>%
# Make another timestamp column: keep the original timestamps and modify the copy to the useful format
dplyr::mutate(
original_timestamp = timestamp
) %>%
# Convert timestamps to the POSIX format with millisecond resolution (e.g. decimal seconds)
dplyr::mutate(
# date_time_ms = paste(paste(year, month, day, sep = "-"), timestamp, sep = " "),
timestamp_ms = format(as.POSIXct(paste(paste(year, month, day, sep = "-"), timestamp, sep = " "), tz = tz), POSIXct_format)
) %>%
dplyr::mutate(
# timestamp_ms = lubridate::ymd_hms(date_time_ms),
# timestamp_ms = as.POSIXct(format(as.POSIXct(date_time_ms, tz = tz), POSIXct_format)),
# data_type = ifelse(data_type == "RFID", paste(data_type, PIT_tag_ID, sep = " : "), data_type),
data_stage = "raw_combined"
)
glimpse(raw_data2)
# Add metadata and convert timestamps to a useful format for downstream pre-processing and analysis
raw_data2 <- raw_data %>%
dplyr::mutate(data_type = sensors[x]) %>%
# Make another timestamp column: keep the original timestamps and modify the copy to the useful format
dplyr::mutate(
original_timestamp = timestamp
) %>%
# Convert timestamps to the POSIX format with millisecond resolution (e.g. decimal seconds)
dplyr::mutate(
# date_time_ms = paste(paste(year, month, day, sep = "-"), timestamp, sep = " "),
timestamp_ms = as.POSIXct(format(as.POSIXct(paste(paste(year, month, day, sep = "-"), timestamp, sep = " "), tz = tz), POSIXct_format))
) %>%
dplyr::mutate(
# timestamp_ms = lubridate::ymd_hms(date_time_ms),
# timestamp_ms = as.POSIXct(format(as.POSIXct(date_time_ms, tz = tz), POSIXct_format)),
# data_type = ifelse(data_type == "RFID", paste(data_type, PIT_tag_ID, sep = " : "), data_type),
data_stage = "raw_combined"
)
glimpse(raw_data2)
options("digits" = 6)
# Add metadata and convert timestamps to a useful format for downstream pre-processing and analysis
raw_data2 <- raw_data %>%
dplyr::mutate(data_type = sensors[x]) %>%
# Make another timestamp column: keep the original timestamps and modify the copy to the useful format
dplyr::mutate(
original_timestamp = timestamp
) %>%
# Convert timestamps to the POSIX format with millisecond resolution (e.g. decimal seconds)
dplyr::mutate(
# date_time_ms = paste(paste(year, month, day, sep = "-"), timestamp, sep = " "),
timestamp_ms = as.POSIXct(format(as.POSIXct(paste(paste(year, month, day, sep = "-"), timestamp, sep = " "), tz = tz), POSIXct_format))
) %>%
dplyr::mutate(
# timestamp_ms = lubridate::ymd_hms(date_time_ms),
# timestamp_ms = as.POSIXct(format(as.POSIXct(date_time_ms, tz = tz), POSIXct_format)),
# data_type = ifelse(data_type == "RFID", paste(data_type, PIT_tag_ID, sep = " : "), data_type),
data_stage = "raw_combined"
)
glimpse(raw_data2)
head(raw_data2$timestamp_ms)
second(raw_data2$timestamp_ms)
# Add metadata and convert timestamps to a useful format for downstream pre-processing and analysis
raw_data2 <- raw_data %>%
dplyr::mutate(data_type = sensors[x]) %>%
# Make another timestamp column: keep the original timestamps and modify the copy to the useful format
# dplyr::mutate(
# original_timestamp = timestamp
# ) %>%
# Convert timestamps to the POSIX format with millisecond resolution (e.g. decimal seconds)
# dplyr::mutate(
#   timestamp_ms = as.POSIXct(format(as.POSIXct(paste(paste(year, month, day, sep = "-"), timestamp, sep = " "), tz = tz), POSIXct_format))
# ) %>%
# Make two timestamp columns, one will be separated below
dplyr::mutate(
timestamp2 = timestamp
) %>%
separate(
timestamp2, c("hour", "minute", "second"), sep = ":"
) %>%
dplyr::mutate(
event_datetime = lubridate::make_datetime(year, month, day, as.numeric(hour), as.numeric(minute), as.numeric(second), tz = "UTC"),
date_time_ms = paste(paste(year, month, day, sep = "-"), timestamp, sep = " "),
date_time_ms = format(as.POSIXct(date_time_ms, tz = "America/New York"), "%Y-%m-%d %H:%M:%OS6"),
event_datetime_ms = lubridate::ymd_hms(date_time_ms)
) %>%
dplyr::mutate(
data_stage = "raw_combined"
)
glimpse(raw_data2)
second(raw_data2$event_datetime_ms)
glimpse(raw_data2)
# Add metadata and convert timestamps to a useful format for downstream pre-processing and analysis
raw_data2 <- raw_data %>%
dplyr::mutate(data_type = sensors[x]) %>%
# Make another timestamp column: keep the original timestamps and modify the copy to the useful format
# dplyr::mutate(
# original_timestamp = timestamp
# ) %>%
# Convert timestamps to the POSIX format with millisecond resolution (e.g. decimal seconds)
# dplyr::mutate(
#   timestamp_ms = as.POSIXct(format(as.POSIXct(paste(paste(year, month, day, sep = "-"), timestamp, sep = " "), tz = tz), POSIXct_format))
# ) %>%
# Make two timestamp columns, one will be separated below
dplyr::mutate(
timestamp2 = timestamp
) %>%
separate(
timestamp2, c("hour", "minute", "second"), sep = ":"
) %>%
dplyr::mutate(
event_datetime = lubridate::make_datetime(year, month, day, as.numeric(hour), as.numeric(minute), as.numeric(second), tz = "UTC"),
date_time_ms = paste(paste(year, month, day, sep = "-"), timestamp, sep = " "),
date_time_ms = as.POSIXct(format(as.POSIXct(date_time_ms, tz = "America/New York"), "%Y-%m-%d %H:%M:%OS6")),
event_datetime_ms = lubridate::ymd_hms(date_time_ms)
) %>%
dplyr::mutate(
data_stage = "raw_combined"
)
glimpse(raw_data2)
?as.POSIXct
# Add metadata and convert timestamps to a useful format for downstream pre-processing and analysis
raw_data2 <- raw_data %>%
dplyr::mutate(data_type = sensors[x]) %>%
# Make another timestamp column: keep the original timestamps and modify the copy to the useful format
# dplyr::mutate(
# original_timestamp = timestamp
# ) %>%
# Convert timestamps to the POSIX format with millisecond resolution (e.g. decimal seconds)
# dplyr::mutate(
#   timestamp_ms = as.POSIXct(format(as.POSIXct(paste(paste(year, month, day, sep = "-"), timestamp, sep = " "), tz = tz), POSIXct_format))
# ) %>%
# Make two timestamp columns, one will be separated below
dplyr::mutate(
timestamp2 = timestamp
) %>%
separate(
timestamp2, c("hour", "minute", "second"), sep = ":"
) %>%
dplyr::mutate(
event_datetime = lubridate::make_datetime(year, month, day, as.numeric(hour), as.numeric(minute), as.numeric(second), tz = "UTC"),
date_time_ms = paste(paste(year, month, day, sep = "-"), timestamp, sep = " "),
# date_time_ms = format(as.POSIXct(date_time_ms, tz = "America/New York"), "%Y-%m-%d %H:%M:%OS6"),
date_time_ms = as.POSIXct(date_time_ms, format = "%Y-%m-%d %H:%M:%OS6", tz = "America/New York"),
event_datetime_ms = lubridate::ymd_hms(date_time_ms)
) %>%
dplyr::mutate(
data_stage = "raw_combined"
)
glimpse(raw_data2)
# Add metadata and convert timestamps to a useful format for downstream pre-processing and analysis
raw_data2 <- raw_data %>%
dplyr::mutate(data_type = sensors[x]) %>%
# Make another timestamp column: keep the original timestamps and modify the copy to the useful format
# dplyr::mutate(
# original_timestamp = timestamp
# ) %>%
# Convert timestamps to the POSIX format with millisecond resolution (e.g. decimal seconds)
# dplyr::mutate(
#   timestamp_ms = as.POSIXct(format(as.POSIXct(paste(paste(year, month, day, sep = "-"), timestamp, sep = " "), tz = tz), POSIXct_format))
# ) %>%
# Make two timestamp columns, one will be separated below
dplyr::mutate(
timestamp2 = timestamp
) %>%
separate(
timestamp2, c("hour", "minute", "second"), sep = ":"
) %>%
dplyr::mutate(
event_datetime = lubridate::make_datetime(year, month, day, as.numeric(hour), as.numeric(minute), as.numeric(second), tz = "UTC"),
date_time_ms = paste(paste(year, month, day, sep = "-"), timestamp, sep = " "),
# date_time_ms = format(as.POSIXct(date_time_ms, tz = "America/New York"), "%Y-%m-%d %H:%M:%OS6"),
date_time_ms2 = as.POSIXct(date_time_ms, format = "%Y-%m-%d %H:%M:%OS6", tz = "America/New York"),
event_datetime_ms = lubridate::ymd_hms(date_time_ms)
) %>%
dplyr::mutate(
data_stage = "raw_combined"
)
glimpse(raw_data2)
# Add metadata and convert timestamps to a useful format for downstream pre-processing and analysis
raw_data2 <- raw_data %>%
dplyr::mutate(data_type = sensors[x]) %>%
# Make another timestamp column: keep the original timestamps and modify the copy to the useful format
# dplyr::mutate(
# original_timestamp = timestamp
# ) %>%
# Convert timestamps to the POSIX format with millisecond resolution (e.g. decimal seconds)
# dplyr::mutate(
#   timestamp_ms = as.POSIXct(format(as.POSIXct(paste(paste(year, month, day, sep = "-"), timestamp, sep = " "), tz = tz), POSIXct_format))
# ) %>%
# Make two timestamp columns, one will be separated below
dplyr::mutate(
timestamp2 = timestamp
) %>%
separate(
timestamp2, c("hour", "minute", "second"), sep = ":"
) %>%
dplyr::mutate(
event_datetime = lubridate::make_datetime(year, month, day, as.numeric(hour), as.numeric(minute), as.numeric(second), tz = "UTC"),
date_time_ms = paste(paste(year, month, day, sep = "-"), timestamp, sep = " "),
# date_time_ms = format(as.POSIXct(date_time_ms, tz = "America/New York"), "%Y-%m-%d %H:%M:%OS6"),
date_time_ms2 = as.POSIXct(date_time_ms, format = "%Y-%m-%d %H:%M:%OS6"),
event_datetime_ms = lubridate::ymd_hms(date_time_ms)
) %>%
dplyr::mutate(
data_stage = "raw_combined"
)
glimpse(raw_data2)
# Add metadata and convert timestamps to a useful format for downstream pre-processing and analysis
raw_data2 <- raw_data %>%
dplyr::mutate(data_type = sensors[x]) %>%
# Make another timestamp column: keep the original timestamps and modify the copy to the useful format
# dplyr::mutate(
# original_timestamp = timestamp
# ) %>%
# Convert timestamps to the POSIX format with millisecond resolution (e.g. decimal seconds)
# dplyr::mutate(
#   timestamp_ms = as.POSIXct(format(as.POSIXct(paste(paste(year, month, day, sep = "-"), timestamp, sep = " "), tz = tz), POSIXct_format))
# ) %>%
# Make two timestamp columns, one will be separated below
dplyr::mutate(
timestamp2 = timestamp
) %>%
separate(
timestamp2, c("hour", "minute", "second"), sep = ":"
) %>%
dplyr::mutate(
event_datetime = lubridate::make_datetime(year, month, day, as.numeric(hour), as.numeric(minute), as.numeric(second), tz = "UTC"),
date_time_ms = paste(paste(year, month, day, sep = "-"), timestamp, sep = " "),
# date_time_ms = format(as.POSIXct(date_time_ms, tz = "America/New York"), "%Y-%m-%d %H:%M:%OS6"),
date_time_ms2 = as.POSIXct(date_time_ms, format = "%Y-%m-%d %H:%M:%OS"),
date_time_ms3 = format(date_time_ms2, format = "%Y-%m-%d %H:%M:%OS6"),
event_datetime_ms = lubridate::ymd_hms(date_time_ms)
) %>%
dplyr::mutate(
data_stage = "raw_combined"
)
glimpse(raw_data2)
second(raw_data2$date_time_ms2)
glimpse(raw_data2)
# Add metadata and convert timestamps to a useful format for downstream pre-processing and analysis
raw_data2 <- raw_data %>%
dplyr::mutate(data_type = sensors[x]) %>%
# Make another timestamp column: keep the original timestamps and modify the copy to the useful format
# dplyr::mutate(
# original_timestamp = timestamp
# ) %>%
# Convert timestamps to the POSIX format with millisecond resolution (e.g. decimal seconds)
# dplyr::mutate(
#   timestamp_ms = as.POSIXct(format(as.POSIXct(paste(paste(year, month, day, sep = "-"), timestamp, sep = " "), tz = tz), POSIXct_format))
# ) %>%
# Make two timestamp columns, one will be separated below
dplyr::mutate(
timestamp2 = timestamp
) %>%
separate(
timestamp2, c("hour", "minute", "second"), sep = ":"
) %>%
dplyr::mutate(
event_datetime = lubridate::make_datetime(year, month, day, as.numeric(hour), as.numeric(minute), as.numeric(second), tz = "UTC"),
date_time_ms = paste(paste(year, month, day, sep = "-"), timestamp, sep = " "),
# date_time_ms = format(as.POSIXct(date_time_ms, tz = "America/New York"), "%Y-%m-%d %H:%M:%OS6"),
date_time_ms2 = as.POSIXct(date_time_ms, format = "%Y-%m-%d %H:%M:%OS"),
date_time_ms3 = as.POSIXct(format(date_time_ms2, format = "%Y-%m-%d %H:%M:%OS6")),
event_datetime_ms = lubridate::ymd_hms(date_time_ms)
) %>%
dplyr::mutate(
data_stage = "raw_combined"
)
glimpse(raw_data2)
options("digits.secs" = 6)
# Add metadata and convert timestamps to a useful format for downstream pre-processing and analysis
raw_data2 <- raw_data %>%
dplyr::mutate(data_type = sensors[x]) %>%
# Make another timestamp column: keep the original timestamps and modify the copy to the useful format
# dplyr::mutate(
# original_timestamp = timestamp
# ) %>%
# Convert timestamps to the POSIX format with millisecond resolution (e.g. decimal seconds)
# dplyr::mutate(
#   timestamp_ms = as.POSIXct(format(as.POSIXct(paste(paste(year, month, day, sep = "-"), timestamp, sep = " "), tz = tz), POSIXct_format))
# ) %>%
# Make two timestamp columns, one will be separated below
dplyr::mutate(
timestamp2 = timestamp
) %>%
separate(
timestamp2, c("hour", "minute", "second"), sep = ":"
) %>%
dplyr::mutate(
event_datetime = lubridate::make_datetime(year, month, day, as.numeric(hour), as.numeric(minute), as.numeric(second), tz = "UTC"),
date_time_ms = paste(paste(year, month, day, sep = "-"), timestamp, sep = " "),
# date_time_ms = format(as.POSIXct(date_time_ms, tz = "America/New York"), "%Y-%m-%d %H:%M:%OS6"),
date_time_ms2 = as.POSIXct(date_time_ms, format = "%Y-%m-%d %H:%M:%OS"),
date_time_ms3 = format(date_time_ms2, format = "%Y-%m-%d %H:%M:%OS6"),
event_datetime_ms = lubridate::ymd_hms(date_time_ms)
) %>%
dplyr::mutate(
data_stage = "raw_combined"
)
glimpse(raw_data2)
