expect_error(
score_detectionClusters(file_nm = "detection_clusters.csv", sensor_id_col_nm = NULL, PIT_tag_col_nm = NULL, rfid_label = "RFID", camera_label = "Video", outer_irbb_label = NULL, inner_irbb_label = NULL, video_metadata_col_nms = c("total_pixels_motionTrigger"), pixel_col_nm = "total_pixels_motionTrigger", integrate_perching = FALSE, perching_dataset = NULL, perching_prefix = NULL, video_width = args[["video_width"]], video_height = args[["video_height"]], integrate_preproc_video = FALSE, path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS"),
regexp = paste("Expected a numeric value but the argument", arg_nms[i], "is not numeric", sep = " ")
)
}))
# The sensor label arguments are caught in the non-NULL tests above
# Remove the temporary directory and all files within it
if(tmp_path == file.path(path, data_dir)){
unlink(tmp_path, recursive = TRUE)
}
})
source("/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/score_detectionClusters.R")
test_that("the function catches when numeric arguments are not numeric", {
# Avoid library calls and other changes to the virtual environment
# See https://r-pkgs.org/testing-design.html
withr::local_package("tidyverse")
withr::local_package("plyr")
withr::local_package("dplyr")
withr::local_package("lubridate")
# Just for code development
# library(tidyverse)
# library(lubridate)
# library(testthat)
# Create a temporary directory for testing. Files will be written and read here
path <- "/home/gsvidaurre/Desktop"
data_dir <- "tmp_tests"
tmp_path <- file.path(path, data_dir)
if(!dir.exists(tmp_path)){
dir.create(tmp_path)
}
# Create the input data directory that the function expects
if(!dir.exists(file.path(tmp_path, "processed"))){
dir.create(file.path(tmp_path, "processed"))
}
# Generate a file with pre-processed timestamps for 1 sensor type
# Create 3 entrance and 3 exit events using different combinations of the 2 pairs of beam breakers. Each event is a detection cluster of a given duration (see ends below)
starts <- as.POSIXct(c(
"2023-01-01 01:00:00 EST"
)) + seq(1, 300, 50)
ends <- starts + rep(c(5, 10, 15), 2)
# Create a spreadsheet of the simulated directional movement events
sim_dats <- data.frame(start = starts) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(start),
month = month(start),
day = day(start),
end = ends,
event_seq = c(
paste(c(rep("Outer Beam Breaker", 2), rep("Inner Beam Breaker", 2)), collapse = "; "), # entrance
paste(c(rep("Outer Beam Breaker", 4), rep("Inner Beam Breaker", 2)), collapse = "; "), # no directionality
paste(c(rep("Outer Beam Breaker", 4), rep("Inner Beam Breaker", 5)), collapse = "; "), # entrance
paste(c(rep("Inner Beam Breaker", 2), rep("Outer Beam Breaker", 2)), collapse = "; "), # exit
paste(c(rep("Inner Beam Breaker", 5), rep("Outer Beam Breaker", 2)), collapse = "; "), # exit
paste(c(rep("Inner Beam Breaker", 1), rep("Outer Beam Breaker", 4)), collapse = "; ") # exit
),
indiv1_id = "test",
indiv2_id = NA,
# Matches the number of RFID detections if present above
total_indiv1_detections = c(NA, 2, 3, NA, 2, 4),
total_indiv2_detections = 0,
individual_initiated = "test",
individual_ended = "test",
threshold_seconds = 1,
run_length = 1,
data_stage = "pre-processing",
date_pre_processed = Sys.Date()
)
write.csv(sim_dats, file.path(tmp_path, "processed",  "detection_clusters.csv"), row.names = FALSE)
# When camera_label is not NULL, the video_width and height arguments must be numeric
arg_nms <- c("video_width", "video_height")
args <- list(
`video_width` = 1280,
`video_height` = 720
)
invisible(lapply(1:length(arg_nms), function(i){
args[arg_nms[i]] <- "test"
expect_error(
score_detectionClusters(file_nm = "detection_clusters.csv", sensor_id_col_nm = NULL, PIT_tag_col_nm = NULL, rfid_label = "RFID", camera_label = "Video", outer_irbb_label = NULL, inner_irbb_label = NULL, video_metadata_col_nms = c("total_pixels_motionTrigger"), pixel_col_nm = "total_pixels_motionTrigger", integrate_perching = FALSE, perching_dataset = NULL, perching_prefix = NULL, video_width = args[["video_width"]], video_height = args[["video_height"]], integrate_preproc_video = FALSE, path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS"),
regexp = paste("Expected a numeric value but the argument", arg_nms[i], "is not numeric", sep = " ")
)
}))
# The sensor label arguments are caught in the non-NULL tests above
# Remove the temporary directory and all files within it
if(tmp_path == file.path(path, data_dir)){
unlink(tmp_path, recursive = TRUE)
}
})
test_that("the function catches when paths don't exist", {
# Avoid library calls and other changes to the virtual environment
# See https://r-pkgs.org/testing-design.html
withr::local_package("tidyverse")
withr::local_package("plyr")
withr::local_package("dplyr")
withr::local_package("lubridate")
# Just for code development
# library(tidyverse)
# library(lubridate)
# library(testthat)
# Create a temporary directory for testing. Files will be written and read here
path <- "/home/gsvidaurre/Desktop"
data_dir <- "tmp_tests"
tmp_path <- file.path(path, data_dir)
if(!dir.exists(tmp_path)){
dir.create(tmp_path)
}
# Create the input data directory that the function expects
if(!dir.exists(file.path(tmp_path, "processed"))){
dir.create(file.path(tmp_path, "processed"))
}
# Generate a file with pre-processed timestamps for 1 sensor type
# Create 3 entrance and 3 exit events using different combinations of the 2 pairs of beam breakers. Each event is a detection cluster of a given duration (see ends below)
starts <- as.POSIXct(c(
"2023-01-01 01:00:00 EST"
)) + seq(1, 300, 50)
ends <- starts + rep(c(5, 10, 15), 2)
# Create a spreadsheet of the simulated directional movement events
sim_dats <- data.frame(start = starts) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(start),
month = month(start),
day = day(start),
end = ends,
event_seq = c(
paste(c(rep("Outer Beam Breaker", 2), rep("Inner Beam Breaker", 2)), collapse = "; "), # entrance
paste(c(rep("Outer Beam Breaker", 4), rep("Inner Beam Breaker", 2)), collapse = "; "), # no directionality
paste(c(rep("Outer Beam Breaker", 4), rep("Inner Beam Breaker", 5)), collapse = "; "), # entrance
paste(c(rep("Inner Beam Breaker", 2), rep("Outer Beam Breaker", 2)), collapse = "; "), # exit
paste(c(rep("Inner Beam Breaker", 5), rep("Outer Beam Breaker", 2)), collapse = "; "), # exit
paste(c(rep("Inner Beam Breaker", 1), rep("Outer Beam Breaker", 4)), collapse = "; ") # exit
),
indiv1_id = "test",
indiv2_id = NA,
# Matches the number of RFID detections if present above
total_indiv1_detections = c(NA, 2, 3, NA, 2, 4),
total_indiv2_detections = 0,
individual_initiated = "test",
individual_ended = "test",
threshold_seconds = 1,
run_length = 1,
data_stage = "pre-processing",
date_pre_processed = Sys.Date()
)
write.csv(sim_dats, file.path(tmp_path, "processed",  "detection_clusters.csv"), row.names = FALSE)
# Remove this file
file.remove(file.path(tmp_path, "processed", "detection_clusters.csv"))
expect_error(
score_detectionClusters(file_nm = "detection_clusters.csv", sensor_id_col_nm = NULL, PIT_tag_col_nm = NULL, rfid_label = "RFID", camera_label = "Video", outer_irbb_label = NULL, inner_irbb_label = NULL, video_metadata_col_nms = c("pixel_threshold"), integrate_perching = FALSE, perching_dataset = NULL, perching_prefix = NULL, pixel_col_nm = "total_pixels_motionTrigger", video_width = 1280, video_height = 720, integrate_preproc_video = FALSE, path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS"),
regexp = paste("The file detection_clusters.csv does not exist in the directory", file.path(path, data_dir, "processed"), sep = " ")
)
# Generate the file again, then remove the whole directory
write.csv(sim_dats, file.path(tmp_path, "processed",  "detection_clusters.csv"), row.names = FALSE)
# Remove the directory where this file is located
if(tmp_path == file.path(path, data_dir)){
unlink(tmp_path, recursive = TRUE)
}
expect_error(
score_detectionClusters(file_nm = "detection_clusters.csv", sensor_id_col_nm = NULL, PIT_tag_col_nm = NULL, rfid_label = "RFID", camera_label = "Video", outer_irbb_label = NULL, inner_irbb_label = NULL,  video_metadata_col_nms = c("pixel_threshold"), integrate_perching = FALSE, perching_dataset = NULL, perching_prefix = NULL, pixel_col_nm = "total_pixels_motionTrigger", video_width = 1280, video_height = 720, integrate_preproc_video = FALSE, path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS"),
regexp = paste("The directory", file.path(path, data_dir, "processed"), "does not exist", sep = " ")
)
})
test_that("the input dataset has all of the expected columns", {
# Avoid library calls and other changes to the virtual environment
# See https://r-pkgs.org/testing-design.html
withr::local_package("tidyverse")
withr::local_package("plyr")
withr::local_package("dplyr")
withr::local_package("lubridate")
# Just for code development
# library(tidyverse)
# library(lubridate)
# library(testthat)
# Create a temporary directory for testing. Files will be written and read here
path <- "/home/gsvidaurre/Desktop"
data_dir <- "tmp_tests"
tmp_path <- file.path(path, data_dir)
if(!dir.exists(tmp_path)){
dir.create(tmp_path)
}
# Create the input data directory that the function expects
if(!dir.exists(file.path(tmp_path, "processed"))){
dir.create(file.path(tmp_path, "processed"))
}
# Generate a file with pre-processed timestamps for 1 sensor type
# Create 3 entrance and 3 exit events using different combinations of the 2 pairs of beam breakers. Each event is a detection cluster of a given duration (see ends below)
starts <- as.POSIXct(c(
"2023-01-01 01:00:00 EST"
)) + seq(1, 300, 50)
ends <- starts + rep(c(5, 10, 15), 2)
# Columns that must always be present in the main input data
col_nms <- c("start", "end")
invisible(lapply(1:length(col_nms), function(i){
# Create a spreadsheet of the simulated directional movement events
sim_dats <- data.frame(start = starts) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(start),
month = month(start),
day = day(start),
end = ends,
event_seq = c(
paste(c(rep("Outer Beam Breaker", 2), rep("Inner Beam Breaker", 2)), collapse = "; "), # entrance
paste(c(rep("Outer Beam Breaker", 4), rep("Inner Beam Breaker", 2)), collapse = "; "), # no directionality
paste(c(rep("Outer Beam Breaker", 4), rep("Inner Beam Breaker", 5)), collapse = "; "), # entrance
paste(c(rep("Inner Beam Breaker", 2), rep("Outer Beam Breaker", 2)), collapse = "; "), # exit
paste(c(rep("Inner Beam Breaker", 5), rep("Outer Beam Breaker", 2)), collapse = "; "), # exit
paste(c(rep("Inner Beam Breaker", 1), rep("Outer Beam Breaker", 4)), collapse = "; ") # exit
),
indiv1_id = "test",
indiv2_id = NA,
# Matches the number of RFID detections if present above
total_indiv1_detections = c(NA, 2, 3, NA, 2, 4),
total_indiv2_detections = 0,
individual_initiated = "test",
individual_ended = "test",
threshold_seconds = 1,
run_length = 1,
data_stage = "pre-processing",
date_pre_processed = Sys.Date()
) %>%
# Drop the given column
dplyr::select(-c(all_of(col_nms[i])))
write.csv(sim_dats, file.path(tmp_path, "processed",  "detection_clusters.csv"), row.names = FALSE)
expect_error(
score_detectionClusters(file_nm = "detection_clusters.csv", sensor_id_col_nm = NULL, PIT_tag_col_nm = NULL, rfid_label = "RFID", camera_label = "Video", outer_irbb_label = NULL, inner_irbb_label = NULL, video_metadata_col_nms = c("pixel_threshold"), integrate_perching = FALSE, perching_dataset = NULL, perching_prefix = NULL, pixel_col_nm = "total_pixels_motionTrigger", video_width = 1280, video_height = 720, integrate_preproc_video = FALSE, path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS"),
regexp = paste("The column", col_nms[i], "was not found in the data frame", sep = " ")
)
}))
# When integrate_perching = TRUE, I also need to check that the perching_end and perching_starts timestamps columns are present in each dataset. And also that the columns sensor_id_col_nm and PIT_tag_col_nm are present
sim_dats <- data.frame(start = starts) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(start),
month = month(start),
day = day(start),
end = ends,
event_seq = c(
paste(c(rep("Outer Beam Breaker", 2), rep("Inner Beam Breaker", 2)), collapse = "; "), # entrance
paste(c(rep("Outer Beam Breaker", 4), rep("Inner Beam Breaker", 2)), collapse = "; "), # no directionality
paste(c(rep("Outer Beam Breaker", 4), rep("Inner Beam Breaker", 5)), collapse = "; "), # entrance
paste(c(rep("Inner Beam Breaker", 2), rep("Outer Beam Breaker", 2)), collapse = "; "), # exit
paste(c(rep("Inner Beam Breaker", 5), rep("Outer Beam Breaker", 2)), collapse = "; "), # exit
paste(c(rep("Inner Beam Breaker", 1), rep("Outer Beam Breaker", 4)), collapse = "; ") # exit
),
indiv1_id = "test",
indiv2_id = NA,
# Matches the number of RFID detections if present above
total_indiv1_detections = c(NA, 2, 3, NA, 2, 4),
total_indiv2_detections = 0,
individual_initiated = "test",
individual_ended = "test",
threshold_seconds = 1,
run_length = 1,
data_stage = "pre-processing",
date_pre_processed = Sys.Date()
)
write.csv(sim_dats, file.path(tmp_path, "processed",  "detection_clusters.csv"), row.names = FALSE)
# Create a dataset of 3 simulated perching events that encompass 2 entrances and 1 exit above
starts_p <- starts[c(1:2, 5)]
ends_p <- starts_p + c(25, 50, 10)
# Columns that must always be present in the perching event data
col_nms <- c("perching_start", "perching_end", "sensor_id", "PIT_tag_ID")
# i <- 3
invisible(lapply(1:length(col_nms), function(i){
# Create a spreadsheet of the simulated directional movement events
sim_perch_rfid <- data.frame(perching_start = starts_p) %>%
dplyr::mutate(
chamber_id = "Box_01",
sensor_id = "RFID",
PIT_tag_ID = "test",
perching_end = ends_p,
perching_duration_s = perching_end - perching_start,
unique_perching_event = seq(1, nrow(.), 1),
threshold = 1,
min_perching_run_length = 3,
data_stage = "pre-processing",
date_pre_processed = Sys.Date()
)
sim_perch_irbb <- data.frame(perching_start = starts_p) %>%
dplyr::mutate(
chamber_id = "Box_01",
sensor_id = "IRBB",
perching_end = ends_p,
perching_duration_s = perching_end - perching_start,
unique_perching_event = seq(1, nrow(.), 1),
threshold = 1,
min_perching_run_length = 3,
data_stage = "pre-processing",
date_pre_processed = Sys.Date()
)
# Drop the given column if it exists
if(col_nms[i] %in% names(sim_perch_rfid)){
sim_perch_rfid <- sim_perch_rfid %>%
dplyr::select(-c(all_of(col_nms[i])))
}
# Drop the given column if it exists
if(col_nms[i] %in% names(sim_perch_irbb)){
sim_perch_irbb <- sim_perch_irbb %>%
dplyr::select(-c(all_of(col_nms[i])))
}
write.csv(sim_perch_rfid, file.path(tmp_path, "processed", "perching_events_RFID.csv"), row.names = FALSE)
write.csv(sim_perch_irbb, file.path(tmp_path, "processed", "perching_events_IRBB.csv"), row.names = FALSE)
expect_error(
score_detectionClusters(file_nm = "detection_clusters.csv", sensor_id_col_nm = "sensor_id", PIT_tag_col_nm = "PIT_tag_ID", rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", video_metadata_col_nms = c("pixel_threshold"), integrate_perching = TRUE, perching_dataset = "RFID-IRBB", perching_prefix = "perching_events_", pixel_col_nm = NULL, video_width = NULL, video_height = NULL, integrate_preproc_video = FALSE, path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS"),
regexp = paste("The column", col_nms[i], "was not found in the data frame", sep = " ")
)
}))
# When camera_label is not NULL, I need to check that the video_metadata_cols are present in the main data
sim_dats <- data.frame(start = starts) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(start),
month = month(start),
day = day(start),
end = ends,
event_seq = c(
paste(c(rep("Outer Beam Breaker", 2), rep("Inner Beam Breaker", 2)), collapse = "; "), # entrance
paste(c(rep("Outer Beam Breaker", 4), rep("Inner Beam Breaker", 2)), collapse = "; "), # no directionality
paste(c(rep("Outer Beam Breaker", 4), rep("Inner Beam Breaker", 5)), collapse = "; "), # entrance
paste(c(rep("Inner Beam Breaker", 2), rep("Outer Beam Breaker", 2)), collapse = "; "), # exit
paste(c(rep("Inner Beam Breaker", 5), rep("Outer Beam Breaker", 2)), collapse = "; "), # exit
paste(c(rep("Inner Beam Breaker", 1), rep("Outer Beam Breaker", 4)), collapse = "; ") # exit
),
indiv1_id = "test",
indiv2_id = NA,
# Matches the number of RFID detections if present above
total_indiv1_detections = c(NA, 2, 3, NA, 2, 4),
total_indiv2_detections = 0,
individual_initiated = "test",
individual_ended = "test",
threshold_seconds = 1,
run_length = 1,
pixel_threshold = 100,
total_pixels_motionTrigger = 10000,
data_stage = "pre-processing",
date_pre_processed = Sys.Date()
) %>%
dplyr::select(-c("pixel_threshold"))
write.csv(sim_dats, file.path(tmp_path, "processed",  "detection_clusters.csv"), row.names = FALSE)
expect_error(
score_detectionClusters(file_nm = "detection_clusters.csv", sensor_id_col_nm = NULL, PIT_tag_col_nm = NULL, rfid_label = NULL, camera_label = "Video", outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", video_metadata_col_nms = c("pixel_threshold", "total_pixels_motionTrigger"), integrate_perching = FALSE, perching_dataset = NULL, perching_prefix = NULL, pixel_col_nm = "total_pixels_motionTrigger", video_width = 1280, video_height = 720, integrate_preproc_video = FALSE, path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS"),
regexp = paste("The column", "pixel_threshold", "was not found in the data frame", sep = " ")
)
# Remove the temporary directory and all files within it
if(tmp_path == file.path(path, data_dir)){
unlink(tmp_path, recursive = TRUE)
}
})
test_that("the input dataset has no NAs in columns that cannot have NAs", {
# Avoid library calls and other changes to the virtual environment
# See https://r-pkgs.org/testing-design.html
withr::local_package("tidyverse")
withr::local_package("plyr")
withr::local_package("dplyr")
withr::local_package("lubridate")
# Just for code development
# library(tidyverse)
# library(lubridate)
# library(testthat)
# Create a temporary directory for testing. Files will be written and read here
path <- "/home/gsvidaurre/Desktop"
data_dir <- "tmp_tests"
tmp_path <- file.path(path, data_dir)
if(!dir.exists(tmp_path)){
dir.create(tmp_path)
}
# Create the input data directory that the function expects
if(!dir.exists(file.path(tmp_path, "processed"))){
dir.create(file.path(tmp_path, "processed"))
}
# Generate a file with pre-processed timestamps for 1 sensor type
# Create 3 entrance and 3 exit events using different combinations of the 2 pairs of beam breakers. Each event is a detection cluster of a given duration (see ends below)
starts <- as.POSIXct(c(
"2023-01-01 01:00:00 EST"
)) + seq(1, 300, 50)
ends <- starts + rep(c(5, 10, 15), 2)
# Columns that must never have NAs in the main input data
col_nms <- c("start", "end")
invisible(lapply(1:length(col_nms), function(i){
# Create a spreadsheet of the simulated directional movement events
sim_dats <- data.frame(start = starts) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(start),
month = month(start),
day = day(start),
end = ends,
event_seq = c(
paste(c(rep("Outer Beam Breaker", 2), rep("Inner Beam Breaker", 2)), collapse = "; "), # entrance
paste(c(rep("Outer Beam Breaker", 4), rep("Inner Beam Breaker", 2)), collapse = "; "), # no directionality
paste(c(rep("Outer Beam Breaker", 4), rep("Inner Beam Breaker", 5)), collapse = "; "), # entrance
paste(c(rep("Inner Beam Breaker", 2), rep("Outer Beam Breaker", 2)), collapse = "; "), # exit
paste(c(rep("Inner Beam Breaker", 5), rep("Outer Beam Breaker", 2)), collapse = "; "), # exit
paste(c(rep("Inner Beam Breaker", 1), rep("Outer Beam Breaker", 4)), collapse = "; ") # exit
),
indiv1_id = "test",
indiv2_id = NA,
# Matches the number of RFID detections if present above
total_indiv1_detections = c(NA, 2, 3, NA, 2, 4),
total_indiv2_detections = 0,
individual_initiated = "test",
individual_ended = "test",
threshold_seconds = 1,
run_length = 1,
data_stage = "pre-processing",
date_pre_processed = Sys.Date()
) %>%
# Drop the given column
dplyr::select(-c(all_of(col_nms[i])))
sim_dats[[col_nms[i]]] <- NA
write.csv(sim_dats, file.path(tmp_path, "processed",  "detection_clusters.csv"), row.names = FALSE)
expect_error(
score_detectionClusters(file_nm = "detection_clusters.csv", sensor_id_col_nm = NULL, PIT_tag_col_nm = NULL, rfid_label = "RFID", camera_label = "Video", outer_irbb_label = NULL, inner_irbb_label = NULL, video_metadata_col_nms = c("pixel_threshold"), integrate_perching = FALSE, perching_dataset = NULL, perching_prefix = NULL, pixel_col_nm = "total_pixels_motionTrigger", video_width = 1280, video_height = 720, integrate_preproc_video = FALSE, path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS"),
regexp = paste("The column", col_nms[i], "needs to be in a format compatible with temporal calculations")
)
}))
# When integrate_perching = TRUE, I also need to check that the perching_end and perching_starts timestamps columns do not have NAs
sim_dats <- data.frame(start = starts) %>%
dplyr::mutate(
chamber_id = "Box_01",
year = year(start),
month = month(start),
day = day(start),
end = ends,
event_seq = c(
paste(c(rep("Outer Beam Breaker", 2), rep("Inner Beam Breaker", 2)), collapse = "; "), # entrance
paste(c(rep("Outer Beam Breaker", 4), rep("Inner Beam Breaker", 2)), collapse = "; "), # no directionality
paste(c(rep("Outer Beam Breaker", 4), rep("Inner Beam Breaker", 5)), collapse = "; "), # entrance
paste(c(rep("Inner Beam Breaker", 2), rep("Outer Beam Breaker", 2)), collapse = "; "), # exit
paste(c(rep("Inner Beam Breaker", 5), rep("Outer Beam Breaker", 2)), collapse = "; "), # exit
paste(c(rep("Inner Beam Breaker", 1), rep("Outer Beam Breaker", 4)), collapse = "; ") # exit
),
indiv1_id = "test",
indiv2_id = NA,
# Matches the number of RFID detections if present above
total_indiv1_detections = c(NA, 2, 3, NA, 2, 4),
total_indiv2_detections = 0,
individual_initiated = "test",
individual_ended = "test",
threshold_seconds = 1,
run_length = 1,
data_stage = "pre-processing",
date_pre_processed = Sys.Date()
)
write.csv(sim_dats, file.path(tmp_path, "processed",  "detection_clusters.csv"), row.names = FALSE)
# Create a dataset of 3 simulated perching events that encompass 2 entrances and 1 exit above
starts_p <- starts[c(1:2, 5)]
ends_p <- starts_p + c(25, 50, 10)
# Columns that must always be present in the perching event data
col_nms <- c("perching_start", "perching_end")
invisible(lapply(1:length(col_nms), function(i){
# Create a spreadsheet of the simulated directional movement events
sim_perch_rfid <- data.frame(perching_start = starts_p) %>%
dplyr::mutate(
chamber_id = "Box_01",
sensor_id = "RFID",
PIT_tag_ID = "test",
perching_end = ends_p,
perching_duration_s = perching_end - perching_start,
unique_perching_event = seq(1, nrow(.), 1),
threshold = 1,
min_perching_run_length = 3,
data_stage = "pre-processing",
date_pre_processed = Sys.Date()
)
sim_perch_irbb <- data.frame(perching_start = starts_p) %>%
dplyr::mutate(
chamber_id = "Box_01",
sensor_id = "IRBB",
perching_end = ends_p,
perching_duration_s = perching_end - perching_start,
unique_perching_event = seq(1, nrow(.), 1),
threshold = 1,
min_perching_run_length = 3,
data_stage = "pre-processing",
date_pre_processed = Sys.Date()
)
if(col_nms[i] %in% names(sim_perch_rfid)){
sim_perch_rfid[[col_nms[i]]] <- NA
}
if(col_nms[i] %in% names(sim_perch_irbb)){
sim_perch_irbb[[col_nms[i]]] <- NA
}
write.csv(sim_perch_rfid, file.path(tmp_path, "processed", "perching_events_RFID.csv"), row.names = FALSE)
write.csv(sim_perch_irbb, file.path(tmp_path, "processed", "perching_events_IRBB.csv"), row.names = FALSE)
expect_error(
score_detectionClusters(file_nm = "detection_clusters.csv", sensor_id_col_nm = "sensor_id", PIT_tag_col_nm = "PIT_tag_ID", rfid_label = NULL, camera_label = NULL, outer_irbb_label = "Outer Beam Breaker", inner_irbb_label = "Inner Beam Breaker", video_metadata_col_nms = c("pixel_threshold"), integrate_perching = TRUE, perching_dataset = "RFID-IRBB", perching_prefix = "perching_events_", pixel_col_nm = NULL, video_width = NULL, video_height = NULL, integrate_preproc_video = FALSE, path = path, data_dir = file.path(data_dir, "processed"), out_dir = file.path(data_dir, "processed"), out_file_nm = "scored_detectionClusters.csv", tz = "America/New York", POSIXct_format = "%Y-%m-%d %H:%M:%OS"),
regexp = paste("The column", col_nms[i], "needs to be in a format compatible with temporal calculations")
)
}))
# Remove the temporary directory and all files within it
if(tmp_path == file.path(path, data_dir)){
unlink(tmp_path, recursive = TRUE)
}
})
rm(list = ls())
if (!require(testthat)) install.packages('testthat')
library(testthat)
testing_path <- "/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/tests/testthat/"
test_file(file.path(testing_path, "test_score_detectionClusters.R"))
rm(list = ls())
if (!require(testthat)) install.packages('testthat')
library(testthat)
testing_path <- "/home/gsvidaurre/Desktop/GitHub_repos/Abissmal/R/tests/testthat/"
# Run the testthat tests for each function
test_file(file.path(testing_path, "test_combine_raw_data_across_sensors.R"))
test_file(file.path(testing_path, "test_find_perching_events.R"))
test_file(file.path(testing_path, "test_preprocess_detections.R"))
test_file(file.path(testing_path, "test_find_detectionClusters.R"))
test_file(file.path(testing_path, "test_score_detectionClusters.R"))
rm(list = ls())
