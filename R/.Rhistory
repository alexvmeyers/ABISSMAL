# Add back metadata about the beam breaker events and general metadata
dplyr::inner_join(
labeled_irbb %>%
dplyr::select(-c("data_type")),
by = c(all_of(inner_irbb_col))
) %>%
dplyr::select(chamber_id, year, month, day, all_of(outer_irbb_col), all_of(inner_irbb_col), all_of(video_col), all_of(irbb_event_col), all_of(irbb_unique_col), inner_video_diffs, assignmnt_type, movement_inference, integration_method, data_stage, lower_threshold_s, upper_threshold_s, video_recording_duration_s, date_integrated) %>%
dplyr::arrange(!!sym(inner_irbb_col), desc = FALSE)
glimpse(integr8d_df)
# Do more mapping to perform the integration depending on the given lower and upper temporal thresholds
# The integration is done separately for entrances and exits from each of the leading and lagging calculations, as well as the within video assignments
integr8d_df <- lags_df %>%
# Entrances, lead differences
dplyr::mutate(
!!inner_irbb_col := leading_inner_irbb,
inner_video_diffs = inner_video_lead_diffs,
assignmnt_type = "lead",
movement_inference = "motion_trigger"
) %>%
# Add back metadata about the beam breaker event labels
dplyr::inner_join(
labeled_irbb %>%
dplyr::select(all_of(inner_irbb_col), all_of(irbb_event_col), all_of(irbb_unique_col)),
by = c(all_of(inner_irbb_col))
) %>%
# Filter for entrances among the labeled beam breaker events
dplyr::filter(
!!sym(irbb_event_col) == "entrance"
) %>%
# Then filter for video detections that match these beam breaker events
dplyr::filter(
!!rlang::parse_expr(conditnal_lead_ent)
) %>%
dplyr::select(all_of(inner_irbb_col), all_of(video_col), inner_video_diffs, assignmnt_type, movement_inference) %>%
# Entrances, lag differences
bind_rows(
lags_df %>%
dplyr::mutate(
!!inner_irbb_col := lagging_inner_irbb,
inner_video_diffs = inner_video_lag_diffs,
assignmnt_type = "lag",
movement_inference = "motion_trigger"
) %>%
# Add back metadata about the beam breaker event labels
dplyr::inner_join(
labeled_irbb %>%
dplyr::select(all_of(inner_irbb_col), all_of(irbb_event_col), all_of(irbb_unique_col)),
by = c(all_of(inner_irbb_col))
) %>%
# Filter for entrances among the labeled beam breaker events
dplyr::filter(
!!sym(irbb_event_col) == "entrance"
) %>%
# Then filter for video detections that match these beam breaker events
dplyr::filter(
!!rlang::parse_expr(conditnal_lag_ent)
) %>%
dplyr::select(all_of(inner_irbb_col), all_of(video_col), inner_video_diffs, assignmnt_type, movement_inference)
) %>%
# Exits, lead differences
bind_rows(
lags_df %>%
dplyr::mutate(
!!inner_irbb_col := leading_inner_irbb,
inner_video_diffs = inner_video_lead_diffs,
assignmnt_type = "lead",
movement_inference = "motion_trigger"
) %>%
# Add back metadata about the beam breaker event labels
dplyr::inner_join(
labeled_irbb %>%
dplyr::select(all_of(inner_irbb_col), all_of(irbb_event_col), all_of(irbb_unique_col)),
by = c(all_of(inner_irbb_col))
) %>%
# Filter for exits among the labeled beam breaker events
dplyr::filter(
!!sym(irbb_event_col) == "exit"
) %>%
# Then filter for video detections that match these beam breaker events
dplyr::filter(
!!rlang::parse_expr(conditnal_lead_exi)
) %>%
dplyr::select(all_of(inner_irbb_col), all_of(video_col), inner_video_diffs, assignmnt_type, movement_inference)
) %>%
# Exits, lag differences
bind_rows(
lags_df %>%
dplyr::mutate(
!!inner_irbb_col := lagging_inner_irbb,
inner_video_diffs = inner_video_lag_diffs,
assignmnt_type = "lag",
movement_inference = "motion_trigger"
) %>%
# Add back metadata about the beam breaker event labels
dplyr::inner_join(
labeled_irbb %>%
dplyr::select(all_of(inner_irbb_col), all_of(irbb_event_col), all_of(irbb_unique_col)),
by = c(all_of(inner_irbb_col))
) %>%
# Filter for exits among the labeled beam breaker events
dplyr::filter(
!!sym(irbb_event_col) == "exit"
) %>%
# Then filter for video detections that match these beam breaker events
dplyr::filter(
!!rlang::parse_expr(conditnal_lag_exi)
) %>%
dplyr::select(all_of(inner_irbb_col), all_of(video_col), inner_video_diffs, assignmnt_type, movement_inference)
) %>%
# Within video assignments, lead differences
bind_rows(
lags_df %>%
dplyr::mutate(
!!inner_irbb_col := leading_inner_irbb,
inner_video_diffs = inner_video_lead_diffs,
assignmnt_type = "lead",
movement_inference = "post-motion_trigger"
) %>%
# Add back metadata about the beam breaker event labels
dplyr::inner_join(
labeled_irbb %>%
dplyr::select(all_of(inner_irbb_col), all_of(irbb_event_col), all_of(irbb_unique_col)),
by = c(all_of(inner_irbb_col))
) %>%
# Then filter for video detections that match these beam breaker events
dplyr::filter(
!!rlang::parse_expr(conditnal_lead_withn)
) %>%
dplyr::select(all_of(inner_irbb_col), all_of(video_col), inner_video_diffs, assignmnt_type, movement_inference)
) %>%
# Within video assignments, lag differences
bind_rows(
lags_df %>%
dplyr::mutate(
!!inner_irbb_col := lagging_inner_irbb,
inner_video_diffs = inner_video_lag_diffs,
assignmnt_type = "lag",
movement_inference = "post-motion_trigger"
) %>%
# Add back metadata about the beam breaker event labels
dplyr::inner_join(
labeled_irbb %>%
dplyr::select(all_of(inner_irbb_col), all_of(irbb_event_col), all_of(irbb_unique_col)),
by = c(all_of(inner_irbb_col))
) %>%
# Then filter for video detections that match these beam breaker events
dplyr::filter(
!!rlang::parse_expr(conditnal_lead_withn)
) %>%
dplyr::select(all_of(inner_irbb_col), all_of(video_col), inner_video_diffs, assignmnt_type, movement_inference)
) %>%
# Make sure to add metadata columns for this integration step
dplyr::mutate(
integration_method = method,
data_stage = "integration",
lower_threshold_s = l_th,
upper_threshold_s = u_th,
video_recording_duration_s = video_rec_dur,
date_integrated = paste(Sys.Date(), Sys.time(), sep = " ")
) %>%
# Add back metadata about the beam breaker events and general metadata
dplyr::inner_join(
labeled_irbb %>%
dplyr::select(-c("data_type")),
by = c(all_of(inner_irbb_col))
) %>%
dplyr::select(chamber_id, year, month, day, all_of(outer_irbb_col), all_of(inner_irbb_col), all_of(video_col), all_of(irbb_event_col), all_of(irbb_unique_col), inner_video_diffs, assignmnt_type, movement_inference, integration_method, data_stage, lower_threshold_s, upper_threshold_s, video_recording_duration_s, date_integrated) %>%
dplyr::arrange(!!sym(inner_irbb_col), desc = FALSE)
glimpse(integr8d_df)
View(integr8d_df)
unique(integr8d_df$movement_inference)
method <- "sign"
library(tidyverse)
l_th <- 0
u_th <- 5
video_rec_dur <- 9
video_file_nm <- "pre_processed_data_Video.csv"
irbb_file_nm <- "labeled_beamBreaker_data.csv"
sensor_id_col <- "sensor_id"
timestamps_col <- "timestamp_ms"
outer_irbb_col <- "outer_beamBreaker_timestamp"
inner_irbb_col <- "inner_beamBreaker_timestamp"
irbb_event_col <- "type"
irbb_unique_col <- "unique_beamBreaker_event"
method <- "sign"
path <- "/media/gsvidaurre/Anodorhynchus/Data_Testing/Box_02_31Dec2022/Data"
data_dir <- "pre_processed"
out_dir <- "integrated"
tz <- "America/New York"
POSIXct_format <- "%Y-%m-%d %H:%M:%OS"
# Check that the lower and upper temporal thresholds are each numeric when using the temporal method
if(grepl("temporal", method) & !is.numeric(l_th)){
stop('The pre-video recording lower temporal threshold needs to be numeric (in seconds)')
}
if(grepl("temporal", method) & !is.numeric(u_th)){
stop('The pre-video recording upper temporal threshold needs to be numeric (in seconds)')
}
if(grepl("temporal", method) & !is.numeric(p_th)){
stop('The post-video recording temporal threshold needs to be numeric (in seconds)')
}
# Create the directory for saving the integrated data files if it doesn't already exist
if(!dir.exists(file.path(path, out_dir))){
dir.create(file.path(path, out_dir))
}
# Read in the pre-processed and labeled beam breaker data
labeled_irbb <- read.csv(file.path(path, data_dir, irbb_file_nm)) %>%
# Make sure that the timestamps are in the right format
dplyr::mutate(
!!outer_irbb_col := as.POSIXct(format(as.POSIXct(!!sym(outer_irbb_col), tz = "America/New York"), "%Y-%m-%d %H:%M:%OS6")),
!!inner_irbb_col := as.POSIXct(format(as.POSIXct(!!sym(inner_irbb_col), tz = "America/New York"), "%Y-%m-%d %H:%M:%OS6"))
) %>%
# Drop columns that aren't needed here
dplyr::select(-c("data_stage", "temporal_threshold_s", "date_labeled"))
# Read in the pre-processed video data
preproc_video <- read.csv(file.path(path, data_dir, video_file_nm)) %>%
# Make sure that the timestamps are in the right format
dplyr::mutate(
!!timestamps_col := as.POSIXct(format(as.POSIXct(!!sym(timestamps_col), tz = "America/New York"), "%Y-%m-%d %H:%M:%OS6"))
) %>%
# Make sure to retain rows for the pre_trigger videos only, to avoid duplicating timestamps and metadata
dplyr::filter(
grepl("pre_trigger", video_file_name)
)
# Drop columns that aren't needed for the integration
preproc_video2 <- preproc_video %>%
dplyr::select(-c("total_pixels_motionTrigger", "pixel_threshold", "video_file_name", "data_stage", "date_pre_processed"))
# Check that the input data are both data frames
if(!is.data.frame(labeled_irbb)){
stop('The IRBB data needs to be a data frame')
}
if(!is.data.frame(preproc_video2)){
stop('The Video data needs to be a data frame')
}
# Lengthen the IRBB data frame
irbb_df_tmp <- labeled_irbb %>%
pivot_longer(
cols = c(all_of(outer_irbb_col), all_of(inner_irbb_col)),
names_to = sensor_id_col,
values_to = timestamps_col
) %>%
dplyr::select(-c(all_of(irbb_event_col), all_of(irbb_unique_col)))
glimpse(irbb_df_tmp)
# Make sure that the video data has the same columns in the same order as the beam breaker data for the row binding and calculations below
video_df_tmp <- preproc_video2 %>%
# dplyr::mutate(
# group_col = NA,
# !!irbb_event_col := NA,
# !!irbb_unique_col := NA,
# ) %>%
dplyr::select(names(irbb_df_tmp))
# Get the sensor ID value for the video data, which will be a column name below
video_col <- preproc_video2 %>%
pull(sensor_id) %>%
unique()
# Do the timestamp difference calculations
# Here I'm interested in aligning to the inner pair of beam breakers only, since the camera sits last/ in the sequence of sensors that should trigger for entrances/exits, and right after/before the inner pair of beam breakers
lags_df <- video_df_tmp %>%
bind_rows(irbb_df_tmp %>%
dplyr::filter(!!sym(sensor_id_col) == inner_irbb_col)) %>%
as_tibble() %>%
# Order timestamps within each data type
group_by(!!sym(sensor_id_col)) %>%
dplyr::arrange(!!sym(timestamps_col), desc = FALSE) %>%
# Make unique row indices within groups
dplyr::mutate(
group_row_id = row_number()
) %>%
ungroup() %>%
pivot_wider(
names_from = all_of(sensor_id_col),
values_from = all_of(timestamps_col)
) %>%
# Make a leading and lagging video column for calculations and filtering below. Lead() moves the video timestamps one row index up, and lag() moves these timestamps one row index down
dplyr::mutate(
leading_inner_irbb = lead(!!sym(inner_irbb_col), default = first(!!sym(inner_irbb_col))),
lagging_inner_irbb = lag(!!sym(inner_irbb_col), default = first(!!sym(inner_irbb_col)))
) %>%
# Calculate the temporal differences between the relevant pairs of timestamps: Inner beam breaker timestamps compared to video to find entrances and exits
dplyr::mutate(
# For the leading calculations, negative differences mean that the camera triggered first, while positive differences mean that the inner beam breaker triggered first. For the lagging calculations, negative differences mean that the inner beam breaker triggered first, while positive differences mean that the camera triggered first
inner_video_lead_diffs = round(as.numeric(leading_inner_irbb - !!sym(video_col)), 2),
inner_video_lag_diffs = round(as.numeric(lagging_inner_irbb - !!sym(video_col)), 2),
## Here positive differences mean the camera triggered first
## inner_post_video_diffs = round(as.numeric(leading_RFID - !!sym(video_col)), 2)
) %>%
# Convert these differences to Boolean values based on a threshold (in seconds)
dplyr::mutate(
# To search for entrances, look video detections that came within the given l_th or u_th AFTER an inner beam breaker timestamp. Set up these conditionals for both the lead and lag calculations
binary_lead_inner_ent = (
# Video after, so positive lead differences
inner_video_lead_diffs >= l_th & inner_video_lead_diffs <= u_th
),
binary_lag_inner_ent = (
# Video after, so negative lag differences
inner_video_lag_diffs <= -l_th & inner_video_lag_diffs >= -u_th
),
# Then to search for exits, look for video detections that came within the given l_th or u_th BEFORE an inner beam breaker timestamp. Again, set up these conditionals for both the lead and lag calculations
binary_lead_inner_exi = (
# Video before, so negative lead differences
inner_video_lead_diffs <= -l_th & inner_video_lead_diffs >= -u_th
),
binary_lag_inner_exi = (
# Video before, so positive lag differences
inner_video_lag_diffs >= l_th & inner_video_lag_diffs <= u_th
),
# Then catch inner beam breaker timestamps that happened beyond the upper temporal threshold but still within the duration of video recording. Looking for lead negative differences and lag positive differences, since these are events in which the camera triggered first
binary_lead_inner_withinVideo = (
inner_video_lead_diffs <= -u_th & inner_video_lead_diffs >= -video_rec_dur
),
binary_lag_inner_withinVideo = (
inner_video_lag_diffs >= u_th & inner_video_lag_diffs <= video_rec_dur
)
) %>%
# Drop all rows with NA values across these binary columns
dplyr::filter(
!dplyr::if_all(
c(
binary_lead_inner_ent,
binary_lag_inner_ent,
binary_lead_inner_exi,
binary_lag_inner_exi,
binary_lead_inner_withinVideo,
binary_lag_inner_withinVideo
),
is.na
)
)
# There should no differences or few differences in the integrated datasets yielded between these methods
if(method == "temporal"){
conditnal_lead_ent <- "binary_lead_inner_ent"
conditnal_lead_exi <- "binary_lead_inner_exi"
conditnal_lag_ent <- "binary_lag_inner_ent"
conditnal_lag_exi <- "binary_lag_inner_exi"
conditnal_lead_withn <- "binary_lead_inner_withinVideo"
conditnal_lag_withn <- "binary_lag_inner_withinVideo"
} else if(method == "sign"){
# As above:
# For the leading calculations, negative differences mean that the camera triggered first, while positive differences mean that the inner beam breaker triggered first. For the lagging calculations, negative differences mean that the inner beam breaker triggered first, while positive differences mean that the camera triggered first
# To search for entrances, look video detections that came within the given l_th or u_th AFTER an inner beam breaker timestamp. Set up these conditionals for both the lead and lag calculations
# Then to search for exits, look for video detections that came within the given l_th or u_th BEFORE an inner beam breaker timestamp. Again, set up these conditionals for both the lead and lag calculations
# Then catch inner beam breaker timestamps that happened beyond the upper temporal threshold but still within the duration of video recording. Looking for lead negative differences and lag positive differences, since these are events in which the camera triggered first
conditnal_lead_ent <- "inner_video_lead_diffs > 0"
conditnal_lead_exi <- "inner_video_lead_diffs <= 0"
conditnal_lag_ent <- "inner_video_lag_diffs <= 0"
conditnal_lag_exi <- "inner_video_lag_diffs > 0"
conditnal_lead_withn <- "binary_lead_inner_withinVideo <= 0"
conditnal_lag_withn <- "binary_lag_inner_withinVideo > 0"
}
# Do more mapping to perform the integration depending on the given lower and upper temporal thresholds
# The integration is done separately for entrances and exits from each of the leading and lagging calculations, as well as the within video assignments
integr8d_df <- lags_df %>%
# Entrances, lead differences
dplyr::mutate(
!!inner_irbb_col := leading_inner_irbb,
inner_video_diffs = inner_video_lead_diffs,
assignmnt_type = "lead",
movement_inference = "motion_trigger"
) %>%
# Add back metadata about the beam breaker event labels
dplyr::inner_join(
labeled_irbb %>%
dplyr::select(all_of(inner_irbb_col), all_of(irbb_event_col), all_of(irbb_unique_col)),
by = c(all_of(inner_irbb_col))
) %>%
# Filter for entrances among the labeled beam breaker events
dplyr::filter(
!!sym(irbb_event_col) == "entrance"
) %>%
# Then filter for video detections that match these beam breaker events
dplyr::filter(
!!rlang::parse_expr(conditnal_lead_ent)
) %>%
dplyr::select(all_of(inner_irbb_col), all_of(video_col), inner_video_diffs, assignmnt_type, movement_inference) %>%
# Entrances, lag differences
bind_rows(
lags_df %>%
dplyr::mutate(
!!inner_irbb_col := lagging_inner_irbb,
inner_video_diffs = inner_video_lag_diffs,
assignmnt_type = "lag",
movement_inference = "motion_trigger"
) %>%
# Add back metadata about the beam breaker event labels
dplyr::inner_join(
labeled_irbb %>%
dplyr::select(all_of(inner_irbb_col), all_of(irbb_event_col), all_of(irbb_unique_col)),
by = c(all_of(inner_irbb_col))
) %>%
# Filter for entrances among the labeled beam breaker events
dplyr::filter(
!!sym(irbb_event_col) == "entrance"
) %>%
# Then filter for video detections that match these beam breaker events
dplyr::filter(
!!rlang::parse_expr(conditnal_lag_ent)
) %>%
dplyr::select(all_of(inner_irbb_col), all_of(video_col), inner_video_diffs, assignmnt_type, movement_inference)
) %>%
# Exits, lead differences
bind_rows(
lags_df %>%
dplyr::mutate(
!!inner_irbb_col := leading_inner_irbb,
inner_video_diffs = inner_video_lead_diffs,
assignmnt_type = "lead",
movement_inference = "motion_trigger"
) %>%
# Add back metadata about the beam breaker event labels
dplyr::inner_join(
labeled_irbb %>%
dplyr::select(all_of(inner_irbb_col), all_of(irbb_event_col), all_of(irbb_unique_col)),
by = c(all_of(inner_irbb_col))
) %>%
# Filter for exits among the labeled beam breaker events
dplyr::filter(
!!sym(irbb_event_col) == "exit"
) %>%
# Then filter for video detections that match these beam breaker events
dplyr::filter(
!!rlang::parse_expr(conditnal_lead_exi)
) %>%
dplyr::select(all_of(inner_irbb_col), all_of(video_col), inner_video_diffs, assignmnt_type, movement_inference)
) %>%
# Exits, lag differences
bind_rows(
lags_df %>%
dplyr::mutate(
!!inner_irbb_col := lagging_inner_irbb,
inner_video_diffs = inner_video_lag_diffs,
assignmnt_type = "lag",
movement_inference = "motion_trigger"
) %>%
# Add back metadata about the beam breaker event labels
dplyr::inner_join(
labeled_irbb %>%
dplyr::select(all_of(inner_irbb_col), all_of(irbb_event_col), all_of(irbb_unique_col)),
by = c(all_of(inner_irbb_col))
) %>%
# Filter for exits among the labeled beam breaker events
dplyr::filter(
!!sym(irbb_event_col) == "exit"
) %>%
# Then filter for video detections that match these beam breaker events
dplyr::filter(
!!rlang::parse_expr(conditnal_lag_exi)
) %>%
dplyr::select(all_of(inner_irbb_col), all_of(video_col), inner_video_diffs, assignmnt_type, movement_inference)
) %>%
# Within video assignments, lead differences
bind_rows(
lags_df %>%
dplyr::mutate(
!!inner_irbb_col := leading_inner_irbb,
inner_video_diffs = inner_video_lead_diffs,
assignmnt_type = "lead",
movement_inference = "post-motion_trigger"
) %>%
# Add back metadata about the beam breaker event labels
dplyr::inner_join(
labeled_irbb %>%
dplyr::select(all_of(inner_irbb_col), all_of(irbb_event_col), all_of(irbb_unique_col)),
by = c(all_of(inner_irbb_col))
) %>%
# Then filter for video detections that match these beam breaker events
dplyr::filter(
!!rlang::parse_expr(conditnal_lead_withn)
) %>%
dplyr::select(all_of(inner_irbb_col), all_of(video_col), inner_video_diffs, assignmnt_type, movement_inference)
) %>%
# Within video assignments, lag differences
bind_rows(
lags_df %>%
dplyr::mutate(
!!inner_irbb_col := lagging_inner_irbb,
inner_video_diffs = inner_video_lag_diffs,
assignmnt_type = "lag",
movement_inference = "post-motion_trigger"
) %>%
# Add back metadata about the beam breaker event labels
dplyr::inner_join(
labeled_irbb %>%
dplyr::select(all_of(inner_irbb_col), all_of(irbb_event_col), all_of(irbb_unique_col)),
by = c(all_of(inner_irbb_col))
) %>%
# Then filter for video detections that match these beam breaker events
dplyr::filter(
!!rlang::parse_expr(conditnal_lead_withn)
) %>%
dplyr::select(all_of(inner_irbb_col), all_of(video_col), inner_video_diffs, assignmnt_type, movement_inference)
) %>%
# Make sure to add metadata columns for this integration step
dplyr::mutate(
integration_method = method,
data_stage = "integration",
lower_threshold_s = l_th,
upper_threshold_s = u_th,
video_recording_duration_s = video_rec_dur,
date_integrated = paste(Sys.Date(), Sys.time(), sep = " ")
) %>%
# Add back metadata about the beam breaker events and general metadata
dplyr::inner_join(
labeled_irbb %>%
dplyr::select(-c("data_type")),
by = c(all_of(inner_irbb_col))
) %>%
dplyr::select(chamber_id, year, month, day, all_of(outer_irbb_col), all_of(inner_irbb_col), all_of(video_col), all_of(irbb_event_col), all_of(irbb_unique_col), inner_video_diffs, assignmnt_type, movement_inference, integration_method, data_stage, lower_threshold_s, upper_threshold_s, video_recording_duration_s, date_integrated) %>%
dplyr::arrange(!!sym(inner_irbb_col), desc = FALSE)
glimpse(integr8d_df)
unique(integr8d_df$movement_inference)
View(integr8d_df)
# Reset the current global options
options(orig_opts)
